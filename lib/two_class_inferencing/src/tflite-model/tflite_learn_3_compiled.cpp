/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 27.06.2025 19:39:41

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242656;
#else
constexpr int kTensorArenaSize = 241632;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4] = { 11194, -23326, -21244, -12917, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00036109716165810823, 0.00021960624144412577, 0.00023810347192920744, 0.00037671960308216512, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ 57,-19,-77,-54,88,-28,8,-38,100,-17,59,74,-59,-41,-22,-7,4,-40,-71,16,2,55,-32,127,13,3,-1,18,65,-43,33,11, 
  /* [1][0][][] */ 56,74,-79,-20,-47,40,118,38,-66,-78,-90,8,83,-64,62,-119,127,-103,23,-51,23,-75,-75,-54,-6,-88,61,-56,-37,-112,-29,-26, 
  /* [2][0][][] */ -32,96,17,58,-29,-5,86,45,-82,-98,81,-64,-79,89,-127,78,59,81,92,-67,-22,24,-21,-72,30,-34,84,-88,-9,15,72,57, 
  /* [3][0][][] */ 45,-65,54,4,-10,77,34,-6,-3,-62,25,68,53,-4,-127,-9,73,-54,70,5,-74,7,-11,-37,57,0,-57,63,-52,73,23,34, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0047355098649859428, 0.0028799658175557852, 0.0031225427519530058, 0.0049403859302401543, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { -468, -239, -296, -716, -309, 68, -324, -400, 590, -566, 485, -670, -171, -421, 724, -679, -142, -613, -431, -634, -139, -385, -623, 1300, -496, -562, -240, -803, -689, -157, -505, -877, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.4665634050033987e-05, 5.2865805628243834e-05, 5.915086148888804e-05, 4.6817727707093582e-05, 5.8173078286927193e-05, 5.7418837968725711e-05, 4.8749017878435552e-05, 4.8281624913215637e-05, 5.4036438086768612e-05, 4.483405064092949e-05, 5.3079602366779e-05, 4.1553183109499514e-05, 5.1021073886658996e-05, 5.1297072786837816e-05, 6.5887805249076337e-05, 4.6025950723560527e-05, 5.4389169235946611e-05, 4.4744931074092165e-05, 4.3672513129422441e-05, 4.3698029912775382e-05, 6.2418737797997892e-05, 5.1813025493174791e-05, 5.2425064495764673e-05, 7.9224366345442832e-05, 4.5400520320981741e-05, 4.4251810322748497e-05, 4.312429518904537e-05, 4.3739357352023944e-05, 4.4709442590828985e-05, 5.3856332669965923e-05, 4.3298659875290468e-05, 4.8959744162857533e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -48,-66,85,1,87,-29,-94,-116,49,-114,-114,-12,48,-4,-50,46,-67,-40,-81,-71,-80,-111,-8,93,-110,-5,66,-60,93,-9,-34,-90,76,-74,-89,38,-119,-92,-112,17,59,-93,-110,82,31,-118,91,-33,9,-65,-45,84,-88,-63,-108,82,16,57,121,-115,-85,60,-65,42,-33,4,57,78,34,76,78,-124,89,-120,22,69,-108,1,-68,19,39,11,77,-18,-69,-51,-93,92,15,102,-25,-127,2,59,20,0, 
  /* [1][0][][] */ -19,39,-69,-17,-28,1,26,13,71,-82,-87,69,26,-16,21,51,77,-34,27,127,-37,-12,17,8,34,33,-38,77,1,23,92,-31,48,93,-25,47,18,62,9,-46,-45,7,-8,-80,-14,41,-13,-42,-22,-77,98,43,-2,82,-58,-15,-1,80,23,58,-35,77,-62,-67,-42,32,50,47,89,33,-28,14,-121,104,-53,25,58,-58,-39,50,-56,61,-35,-77,28,95,-52,-41,73,71,63,6,89,67,27,-8, 
  /* [2][0][][] */ 58,3,-58,73,1,-127,59,90,-88,35,-22,80,67,-19,53,-98,-64,-57,-21,32,-56,-16,71,16,-38,56,47,-7,-49,32,56,57,-77,-27,-52,-96,-101,66,110,-14,-86,-53,3,-7,-70,83,-7,-51,58,10,123,-67,-49,23,24,21,-80,57,-6,-30,0,63,-2,30,68,18,30,72,-96,31,27,-39,37,-75,4,6,-85,-31,-3,-38,-1,-63,10,-32,-17,-71,-28,-49,73,70,-49,-3,-42,-83,-40,-66, 
  /* [3][0][][] */ 67,-4,17,-30,-43,-10,-121,49,40,7,51,-4,73,81,55,-17,76,74,-48,70,103,-97,-77,-126,-48,-102,-86,77,33,-95,75,23,-74,-34,-60,-1,-109,-23,65,39,-27,-87,-90,-4,71,28,-45,-73,50,-99,16,-11,95,36,90,-91,-127,-94,-75,-82,-100,10,-45,52,89,-37,-74,-28,-65,-65,12,97,14,-91,39,-62,16,69,76,-73,-87,-107,28,89,17,26,-47,-108,-79,39,-10,-109,83,-120,-75,58, 
  /* [4][0][][] */ 35,68,-6,34,-24,77,18,18,35,42,-10,28,12,-40,-14,-58,-21,-15,-52,0,66,-73,59,15,-17,-12,37,-54,-41,15,-61,-58,47,75,34,-83,-39,-13,-76,31,-45,-52,-71,-72,15,66,21,38,11,-39,-33,-73,-72,18,-66,-6,14,-80,10,5,-12,-38,-22,-62,-16,30,-4,-32,24,-102,-72,-71,-49,-5,127,33,29,-16,-12,-53,-6,-43,-96,-25,-9,46,58,-12,-101,-66,36,14,4,63,-91,-43, 
  /* [5][0][][] */ 92,-71,52,52,57,-127,23,45,71,-86,5,-59,35,84,24,21,42,42,3,19,30,38,13,-16,-83,-54,-13,-64,34,45,12,-52,-36,-1,-63,-10,-98,-28,31,24,-64,-37,29,79,-32,23,31,-40,-82,66,27,34,42,3,34,-20,100,37,-11,-42,34,-47,44,-48,-44,80,-21,21,41,-7,81,-51,-25,35,-26,-55,15,-37,12,6,77,40,32,88,-62,67,-5,37,55,-68,82,118,-9,16,64,-73, 
  /* [6][0][][] */ 18,-40,89,62,-88,-127,-2,62,-6,-74,5,-91,95,57,98,-112,24,1,73,71,-64,-108,86,45,-63,-63,-6,-52,-24,-64,44,-45,-93,-106,-50,-99,-35,34,-90,76,77,45,25,-14,-92,98,-77,-37,-82,11,-35,-53,73,-45,90,-15,24,-8,-32,84,-73,-12,43,-64,-78,63,83,-38,57,-2,-100,-8,48,-57,-101,-43,-57,-101,-48,-48,35,-19,44,-14,-60,-82,-34,-69,78,92,86,41,-40,-72,78,-26, 
  /* [7][0][][] */ 114,68,-49,-58,-58,35,-26,4,101,3,-92,-3,72,-72,35,58,32,10,56,123,48,20,-19,59,-68,109,30,40,-75,127,-11,56,17,24,36,105,-123,82,7,-20,85,-70,82,60,53,7,94,-99,41,-58,-103,-60,-11,87,19,44,101,-78,24,-66,18,-29,66,-102,-50,-47,46,30,-93,23,37,79,63,46,36,39,-46,26,-95,20,87,-27,-11,-51,79,24,-96,98,79,9,74,66,-32,-51,11,-65, 
  /* [8][0][][] */ -23,24,-12,-42,41,74,-46,-29,5,31,41,93,-19,-46,-57,-49,-29,80,-76,-21,20,-3,83,114,-91,50,46,80,-43,0,-82,70,86,-32,66,-17,127,-5,-39,49,65,84,-96,-89,-17,-37,-25,89,25,-41,-64,-4,-28,-22,-35,-111,48,80,-93,107,72,55,31,86,-22,-35,6,60,-89,33,53,-5,63,25,32,33,-48,112,77,69,24,54,-103,-88,22,36,58,-48,22,-38,-31,41,-81,-61,-58,46, 
  /* [9][0][][] */ -13,-5,99,36,63,-78,-59,-122,29,40,-21,37,-42,-92,-110,-37,-8,-14,-103,-79,-12,83,-117,-114,98,-22,-27,12,-29,-69,-100,82,49,-11,10,-28,-86,2,-42,-56,32,-80,40,-103,65,5,-114,37,35,-31,-95,-58,55,-83,-81,83,71,-73,-30,-18,-102,84,67,-90,-66,-8,88,32,-53,86,90,-105,-7,64,-119,-103,-90,-127,-51,98,18,9,81,13,-55,-107,21,-30,79,19,-37,92,88,-21,43,-44, 
  /* [10][0][][] */ -39,63,81,-43,2,122,93,44,29,-1,34,-53,21,69,-15,-5,-25,56,-127,-48,-4,35,53,-42,27,55,-92,-99,-28,46,-64,-69,73,83,114,63,-42,19,3,41,-12,101,-78,-12,-58,-39,13,-32,4,-6,25,27,25,3,-39,-13,-100,-30,54,-47,11,84,107,19,72,-56,-67,-5,7,-10,-62,-38,72,76,-64,90,-24,61,63,15,57,15,43,91,-78,72,84,-22,36,5,-15,-77,-18,-52,-56,-36, 
  /* [11][0][][] */ 107,-17,-31,100,119,55,43,23,110,72,-89,99,-2,-97,12,-73,-73,-116,77,48,15,63,9,-126,-106,-114,-34,58,68,7,9,-15,-94,-96,43,24,-80,59,-36,-80,-45,92,-98,-13,-61,-81,-114,-107,66,109,96,54,-86,-111,7,10,-72,-53,-24,-95,-92,77,76,4,20,84,-72,10,94,38,-88,-88,20,90,-117,37,-57,19,-61,80,-127,-30,-85,-58,29,-102,3,-25,-112,-24,2,-101,-85,-20,-98,-53, 
  /* [12][0][][] */ 30,52,-48,-4,62,-21,-26,22,-68,58,-11,4,-3,26,36,-68,-90,-37,28,-110,28,-13,9,82,-55,-50,83,-73,73,27,-35,127,-81,-67,-48,-16,-20,-71,-34,41,91,24,-97,-37,-36,-66,-39,90,-45,-100,-41,102,41,-5,-68,61,21,-49,51,45,61,76,11,66,76,29,-43,99,54,80,27,42,81,65,-22,-6,-21,21,-95,-127,-46,90,60,15,-32,30,41,104,-74,-82,82,103,93,-5,41,52, 
  /* [13][0][][] */ 96,-41,81,70,82,47,48,69,53,-123,5,-38,16,45,52,-64,-125,-82,-108,59,59,-37,82,-62,-53,48,-17,-6,-76,-104,72,33,35,81,-24,65,-111,-21,56,58,-54,64,-39,7,-24,31,0,-18,30,74,-8,-127,-114,18,91,-52,-114,2,8,-100,-15,101,-67,-7,-38,-64,-95,82,-36,-6,60,12,-97,52,-77,-48,-123,30,55,-54,31,-74,75,26,-77,-100,71,85,-15,-58,-84,10,110,-66,48,2, 
  /* [14][0][][] */ -56,-31,76,53,127,46,2,-69,-47,53,53,100,-32,-39,-48,-24,-3,-29,21,13,-30,35,27,56,-37,-48,2,53,-52,-67,-33,28,94,-16,-7,21,117,73,25,-70,-5,-53,17,76,45,-74,29,-43,102,40,49,42,86,-26,-12,4,8,-11,19,99,-15,-41,-30,81,-69,-3,67,-76,-41,-71,10,73,18,49,94,-27,45,-37,51,25,42,1,-64,-40,-57,-35,-58,62,80,7,77,-69,85,106,-3,35, 
  /* [15][0][][] */ -2,-39,-41,53,127,-61,45,-105,42,-21,-79,4,88,-10,-100,-117,71,-3,-95,34,32,4,56,87,56,50,25,74,15,42,47,-116,-4,-9,-58,-18,-75,88,95,-77,0,95,-62,-37,4,-87,-53,-84,-18,-80,-21,12,-101,-111,-60,-31,48,36,-29,90,-56,-34,-19,81,-39,76,-80,-11,-61,-17,53,-76,6,-12,61,-112,-15,41,86,57,-90,44,-116,-72,-127,-48,-98,19,65,51,-116,-46,37,77,-115,79, 
  /* [16][0][][] */ -37,2,70,-54,45,22,-41,38,42,34,-80,42,7,-24,-43,-52,74,61,127,16,94,60,-37,37,-31,49,-54,48,-83,41,37,33,-95,64,36,43,-51,45,-36,-44,21,-36,63,74,56,90,87,-8,-52,-100,-1,95,-18,94,60,42,31,72,80,-3,104,69,28,53,23,17,-34,79,33,81,-34,-6,28,77,32,63,1,69,-84,-41,15,-56,55,21,11,80,82,21,67,20,-12,113,66,-35,-57,13, 
  /* [17][0][][] */ 19,-119,17,66,-57,-124,-77,-107,28,-97,68,36,84,46,-124,34,18,38,88,98,-103,-26,1,-63,10,52,-88,15,90,-64,-44,60,-43,-36,19,-7,-59,83,-96,-42,-105,-52,-28,-23,-7,-1,68,-119,69,90,-26,12,-30,60,83,-85,-127,70,-94,-121,19,-103,58,82,-98,-85,28,-112,-121,-16,92,16,2,-127,-76,51,99,-59,28,-70,-3,-27,-87,-103,-122,56,64,-46,7,61,-106,-126,-24,77,-1,2, 
  /* [18][0][][] */ -97,92,94,-78,8,-116,-111,-2,-12,64,-110,-44,-40,31,51,-61,9,-31,41,-18,93,-56,10,-87,38,-99,-28,96,22,34,-9,45,34,-36,-124,-109,-43,29,-29,53,-44,-4,-57,-16,-115,12,24,-7,12,-22,66,24,-119,-18,-4,82,-50,28,-16,-127,83,95,5,17,-82,-118,-43,73,49,-89,-75,106,-105,-23,-99,-112,48,42,-10,-84,-61,-3,-33,-71,92,-40,63,68,-113,-80,-75,104,88,-69,40,-42, 
  /* [19][0][][] */ 7,17,66,31,49,-92,83,83,81,-72,17,-21,-103,22,-65,47,59,-114,99,48,-33,68,-65,3,63,-92,16,-74,-99,-127,-76,33,69,-92,31,-13,-2,-80,-56,-109,31,-124,-93,-2,-95,17,61,-100,-37,27,-49,31,-43,1,-3,-19,13,83,-13,-38,43,-58,86,49,-79,-14,-36,-11,-25,40,64,-60,-71,-127,-63,-88,-34,-121,4,95,45,-121,-40,64,-96,-20,-4,-16,76,17,-6,51,-44,96,56,-60, 
  /* [20][0][][] */ -24,59,51,60,-70,117,11,32,12,39,-65,3,-10,55,30,-40,-31,-18,-7,30,10,-33,-51,-56,79,-43,-71,41,21,14,-29,74,72,35,-7,66,39,-21,-22,-80,-60,-23,-58,-78,-12,-48,-52,73,46,-77,-80,18,36,96,30,-2,62,45,61,72,65,-23,-58,-16,8,-51,-37,7,15,-43,-53,51,-50,-42,29,12,74,54,72,127,63,-4,50,-27,43,70,-9,44,10,63,43,12,14,53,-12,16, 
  /* [21][0][][] */ 73,51,46,-71,86,-42,51,-26,-14,-57,-67,40,-16,10,-58,-72,-91,-39,0,-55,68,-49,52,-80,74,-109,-40,56,17,-18,-28,-35,12,-1,-23,-110,95,61,-116,-52,-20,-11,0,-28,-90,-91,-74,82,-19,-56,-23,60,24,38,-127,-40,-39,41,-17,98,18,0,10,-38,41,11,-36,-98,-76,-30,55,38,11,-29,85,45,-114,-24,43,79,-6,74,-9,-82,10,-90,45,-90,-113,48,94,-102,-56,-61,35,-34, 
  /* [22][0][][] */ 11,-58,-66,-92,127,22,73,37,-97,61,-76,-98,83,-106,-108,-90,18,51,-88,-61,58,-77,13,13,68,-17,-116,73,-59,-74,-71,-104,34,35,14,-3,-7,-28,-60,-108,-14,-22,-16,66,31,-112,60,-32,-58,-77,-7,-27,-64,-92,-53,13,-12,-39,-33,-39,78,-72,-68,-106,-60,-1,-109,-50,82,67,-30,-13,-67,-4,46,-87,28,-55,37,64,70,-93,-75,-112,48,55,66,-45,-61,9,-53,62,2,7,-43,63, 
  /* [23][0][][] */ -1,-31,39,65,62,7,21,-63,34,13,63,86,-50,-64,38,0,89,-9,-111,31,45,-20,89,33,15,-30,62,36,54,-40,31,-39,23,25,25,17,127,-6,-72,-10,-46,10,-10,-30,-31,-66,57,22,82,-8,-84,-20,49,-37,-54,21,-16,-34,22,65,-71,-38,-28,-5,18,37,-33,-92,12,-27,107,-37,-9,-26,22,-21,12,38,72,88,-27,-34,-10,-80,70,25,60,-19,-61,17,77,-53,39,-8,-32,28, 
  /* [24][0][][] */ -89,-62,-108,-72,-107,-112,-75,-96,50,99,67,32,99,49,-51,-127,-89,27,17,-61,82,-86,-63,-46,27,-36,60,48,95,43,-7,-77,-7,-5,59,11,-62,-95,54,-29,-84,-101,86,-8,4,-47,27,59,-98,-55,-34,6,59,38,56,-80,-16,63,35,-13,78,-16,22,89,-102,77,-54,-93,-121,38,-57,-28,-43,22,80,85,45,-82,-109,-97,-90,-96,-66,-121,-11,48,-24,-112,17,-114,-6,-96,-28,5,-103,22, 
  /* [25][0][][] */ -98,-68,-91,-23,77,-87,-115,38,30,-123,-51,5,57,-15,-121,-36,-86,45,14,-120,52,68,-25,-71,1,-65,-116,22,59,-106,24,98,76,-121,27,57,81,-73,-36,-31,-95,81,-116,-10,83,27,50,21,-115,72,-83,-12,28,-33,-76,-3,-37,37,-118,59,102,27,37,29,-13,59,-32,-20,-103,-19,-39,-124,20,-124,56,7,54,57,0,7,33,35,-60,66,-88,-60,-114,-103,-36,-51,85,8,-127,-23,-33,-93, 
  /* [26][0][][] */ 49,-89,-28,-35,-90,-68,-24,-15,-94,-97,102,63,-98,-43,15,-11,105,40,-42,-28,-1,60,92,-15,59,89,14,38,-5,40,-75,24,-21,-45,-122,-62,-81,98,-36,104,-90,108,74,33,-46,85,-33,104,-18,12,-71,79,17,-17,-2,-81,62,67,15,26,4,-116,25,-19,127,-12,-73,55,-73,98,42,94,29,-56,-89,0,57,-122,-100,32,-10,72,52,-57,93,-9,-33,34,-87,122,4,-12,-29,112,56,95, 
  /* [27][0][][] */ -5,-7,-79,-119,-99,-47,-77,-31,23,84,20,-116,-12,39,63,-44,49,-33,73,-79,-107,-7,-44,-37,-117,26,-124,-17,86,35,-48,-23,42,51,-70,-100,-102,-80,-121,69,-109,0,12,1,80,8,50,85,71,82,43,-53,-96,-99,-23,-51,118,-39,-125,-90,-73,-74,-18,36,37,-62,-127,86,47,-5,-100,-9,43,-69,-21,-102,43,-80,68,83,66,-42,124,-71,-89,-97,-49,14,-60,-21,-41,-63,39,36,93,41, 
  /* [28][0][][] */ 78,-11,80,33,-108,-60,-108,-79,-49,-111,40,83,-66,-93,-9,82,73,90,-64,88,-42,5,-120,-88,-125,61,-98,-63,-54,-73,-17,-27,-113,0,91,64,1,-120,-22,13,82,24,-102,33,-110,-26,-4,31,7,-59,-75,-50,-72,7,45,33,58,-26,73,34,6,-46,-93,-5,46,55,-37,65,-88,43,-116,-54,51,32,-10,-110,-127,-78,-98,28,-89,-97,97,-46,41,-123,46,-94,-117,-84,-15,-59,-52,33,-111,-53, 
  /* [29][0][][] */ 57,6,45,-42,-24,100,-91,17,32,-34,-64,-60,85,-90,-45,-60,-80,48,-39,-76,-52,-26,43,21,-33,2,-39,-28,-65,-28,72,-28,25,-24,-41,-83,-24,77,14,84,36,93,-52,69,-22,73,-35,-16,9,-13,85,-57,41,-127,98,37,-81,29,1,61,-89,96,-28,-56,-44,-69,47,75,61,-97,51,-41,105,26,50,14,51,-47,-21,-26,-35,-62,5,-76,25,106,18,37,-26,56,47,62,-82,-5,-34,22, 
  /* [30][0][][] */ 17,-76,-73,24,-97,19,-76,-26,104,-25,-13,-48,-99,7,46,11,-16,25,91,-112,33,-111,-123,2,-119,12,-80,103,-21,-107,-103,-3,-85,-80,-127,-65,4,-28,-16,12,77,-87,-24,86,91,-55,91,47,-80,73,17,-107,92,-60,-22,90,-78,-55,-85,-58,-105,-14,-82,-30,-108,-98,-106,79,-66,98,46,-42,-89,94,30,-97,-60,-82,-87,-68,18,23,-108,-28,-117,17,-116,101,-45,-127,66,54,-36,-4,6,-80, 
  /* [31][0][][] */ 56,-106,17,67,58,31,-73,-103,-47,-32,-84,-96,80,-105,-58,88,-77,-92,14,44,34,10,-45,71,45,-122,17,15,-74,-58,24,88,6,5,-101,-30,65,-43,-60,-111,36,-72,-44,11,-6,-56,-52,12,48,3,70,-36,-119,-62,-89,-2,-118,45,-14,87,-23,-25,71,-70,58,79,-61,-87,65,-127,-126,4,-85,-29,-17,-16,-55,-59,24,59,-88,-23,27,44,28,68,-103,-5,-6,-67,-94,-41,20,68,-22,-39, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0018982894252985716, 0.0022467966191470623, 0.0025139115750789642, 0.0019897534511983395, 0.0024723557289689779, 0.0024403005372732878, 0.0020718332380056381, 0.0020519690588116646, 0.0022965485695749521, 0.0019054471049457788, 0.0022558830678462982, 0.0017660101875662804, 0.0021683955565094948, 0.0021801255643367767, 0.0028002315666526556, 0.001956102903932333, 0.0023115396033972502, 0.0019016595324501395, 0.0018560817698016763, 0.0018571661785244942, 0.0026527962181717157, 0.0022020535543560982, 0.0022280651610344648, 0.0033670354168862104, 0.0019295221427455544, 0.0018807018641382456, 0.0018327825237065554, 0.001858922652900219, 0.0019001512555405498, 0.0022888940293341875, 0.0018401930574327707, 0.0020807890687137842, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { -1884, 2197, 7352, 2521, -2863, -2945, 15523, 2742, 2363, -1119, 9208, -299, -7462, 2080, 14075, 5839, 13448, 4089, -2817, -3230, 5082, 27137, 16494, 9398, 1103, 721, 3679, 2864, 2328, -3900, 5377, -2823, 54, 3491, 90, 640, 8529, 4482, -2260, 3239, 6055, 4729, 4858, 7162, 3798, 4184, 1157, 8002, 3455, -5412, -4420, 456, -158, -1017, 1593, -27, 155, -919, -4053, 9784, -721, 1108, -1415, -1682, -3087, 5452, 18055, 1274, -3258, 794, 1339, 1688, 1540, -1135, 570, 10450, -452, 11346, 16026, -887, 8007, 1825, -358, 1105, 11863, 6772, 4088, 872, 4876, 5225, -273, -4865, 565, -1791, -1743, -2014, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00036006543086841702, 0.00067616190062835813, 0.00032451297738589346, 0.00033022795105352998, 0.00031351772486232221, 0.00049310876056551933, 0.00021280889632180333, 0.00025744136655703187, 0.00024627210223115981, 0.00056982738897204399, 0.00021781687973998487, 0.00024581266916356981, 0.00033421322586946189, 0.0013184974668547511, 0.0002177264541387558, 0.00020103208953514695, 0.00013797523570246994, 0.00035272614331915975, 0.000693104462698102, 0.00052185339154675603, 0.00011473819904495031, 9.9621698609553277e-05, 0.00018511884263716638, 0.00017755002772901207, 0.00016322132432833314, 0.00063853728352114558, 0.0008094077929854393, 0.00037112730205990374, 0.00020514703646767884, 0.00050381990149617195, 0.00026626716135069728, 0.00028717110399156809, 0.00023889477597549558, 0.00032396483584307134, 0.0004148671287111938, 0.00036773161264136434, 0.00022774720855522901, 0.00023410066205542535, 0.00029302260372787714, 0.00054622167954221368, 0.0002090168563881889, 0.00054354622261598706, 0.00030981292366050184, 0.00032237780396826565, 0.00050176470540463924, 0.00023714153212495148, 0.00041241868166252971, 0.00027088727802038193, 0.00039588729850947857, 0.00024787656730040908, 0.00036277624894864857, 0.00024783966364338994, 0.00073847227031365037, 0.00029369935509748757, 0.00047970545710995793, 0.00034140184288844466, 0.00054318102775141597, 0.00032504854607395828, 0.00039122949237935245, 0.00018922280287370086, 0.00097470328910276294, 0.00053637957898899913, 0.00020308076636865735, 0.00045781413791701198, 0.00062113662716001272, 0.0003463670436758548, 0.00011856853234348819, 0.00030898555996827781, 0.00037124371738173068, 0.0004275795363355428, 0.00030851000337861478, 0.00028006325010210276, 0.00084806507220491767, 0.00035492616007104516, 0.00039522134466096759, 0.00020511668117251247, 0.0003343364514876157, 0.00016592972679063678, 0.00011444939445937052, 0.00024188779934775084, 0.00018154591089114547, 0.00017036056669894606, 0.00023525294091086835, 0.00023201113799586892, 0.00015122639888431877, 0.00034849828807637095, 0.0005775800091214478, 0.0003036857524421066, 0.00014183773600962013, 0.00038619473343715072, 0.00033437827369198203, 0.00038372536073438823, 0.0003441284061409533, 0.00059880444314330816, 0.00034435026464052498, 0.00022897476446814835, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -22,127,-30,-106,-12,-39,-34,-40,1,0,-19,56,26,-53,-22,43, 
  /* [1][0][][] */ -18,20,-39,-4,-10,-11,17,-45,54,39,-30,28,-14,5,14,-127, 
  /* [2][0][][] */ -8,12,-38,36,65,21,-59,-50,127,-17,2,-8,-29,86,-75,45, 
  /* [3][0][][] */ -13,-95,14,-87,71,12,-1,18,115,1,127,42,-10,98,16,97, 
  /* [4][0][][] */ -55,90,-38,59,-55,16,-80,79,78,22,-45,6,-127,-26,-50,61, 
  /* [5][0][][] */ 1,115,127,3,28,90,-66,44,-68,12,-16,-31,17,-27,-70,52, 
  /* [6][0][][] */ 22,-54,105,-117,68,11,-41,64,-41,-127,67,-4,-2,80,19,87, 
  /* [7][0][][] */ 63,127,-55,-89,105,2,-18,-51,107,72,-49,3,42,-31,78,60, 
  /* [8][0][][] */ 16,-79,-5,-100,41,-54,2,-85,20,55,63,-7,-3,127,89,96, 
  /* [9][0][][] */ 0,-50,18,127,38,15,46,-59,-65,92,18,-14,-15,-55,-15,18, 
  /* [10][0][][] */ -27,-37,-31,-127,1,24,0,38,58,-25,50,11,-25,-55,-6,10, 
  /* [11][0][][] */ -27,16,39,-8,80,-12,108,-40,-62,19,18,19,-9,127,-87,-42, 
  /* [12][0][][] */ 52,-5,-79,8,59,51,31,77,-24,-11,-68,-39,-15,106,25,127, 
  /* [13][0][][] */ -3,13,-49,0,10,-127,-20,11,-1,-24,6,-7,22,-13,28,25, 
  /* [14][0][][] */ 27,-54,87,-48,71,-6,-127,-124,-34,-71,27,-4,24,-62,17,-28, 
  /* [15][0][][] */ -103,2,29,-11,-27,-39,127,10,-33,-40,69,-50,9,55,70,-3, 
  /* [16][0][][] */ -22,35,127,83,-10,2,81,39,-117,11,-66,-36,18,0,33,-83, 
  /* [17][0][][] */ -30,-91,-24,13,-55,-20,-74,26,-127,-31,14,-60,-10,31,44,-18, 
  /* [18][0][][] */ 45,14,-28,57,30,-9,-26,14,27,25,-29,-90,19,127,46,54, 
  /* [19][0][][] */ 27,-46,17,8,127,9,-65,-83,-27,-61,-30,-81,-36,-3,31,-28, 
  /* [20][0][][] */ 63,-61,-91,-93,-3,-127,10,8,-2,63,6,-69,73,-14,56,-62, 
  /* [21][0][][] */ 15,-10,52,-9,-44,-41,15,69,-32,-97,96,1,44,127,42,86, 
  /* [22][0][][] */ -23,35,-32,127,-19,16,74,60,11,27,-22,60,-22,11,17,12, 
  /* [23][0][][] */ 36,-19,78,-47,15,-17,13,58,1,30,-5,-21,21,8,-127,26, 
  /* [24][0][][] */ -127,25,24,-8,24,110,43,-18,23,6,121,25,-72,51,49,-29, 
  /* [25][0][][] */ 15,30,15,19,21,0,48,-67,3,-127,-11,-20,-19,-27,28,6, 
  /* [26][0][][] */ -38,-29,5,16,-49,15,-9,-7,-56,-11,12,2,4,127,-50,36, 
  /* [27][0][][] */ -24,14,31,64,44,-23,5,-31,57,21,-10,-11,0,127,-14,-2, 
  /* [28][0][][] */ -4,48,77,83,111,5,68,61,-84,-1,-32,-35,44,127,19,-61, 
  /* [29][0][][] */ 10,-9,5,30,55,12,-17,43,-38,-36,-36,-127,-73,7,0,39, 
  /* [30][0][][] */ -21,108,-60,66,-24,-23,47,-127,-53,52,-31,-18,49,29,76,105, 
  /* [31][0][][] */ -52,-24,25,-19,-36,4,-45,-105,61,127,-21,-105,-20,-80,-8,-60, 
  /* [32][0][][] */ -127,-61,-5,67,58,49,-6,12,4,8,-121,70,62,-11,26,56, 
  /* [33][0][][] */ -22,-20,-36,-12,-59,-2,-64,-20,43,-9,-22,-19,-1,-101,127,25, 
  /* [34][0][][] */ 45,-24,72,27,8,44,-73,70,-77,-46,69,31,-9,-35,-36,127, 
  /* [35][0][][] */ -66,13,-45,34,-17,-16,19,-127,77,20,-59,-5,-14,28,126,-97, 
  /* [36][0][][] */ -80,-11,75,127,-13,48,88,-29,-4,50,4,-13,18,-1,-81,-42, 
  /* [37][0][][] */ -11,43,27,-31,26,-14,-46,-76,-91,-19,-47,-2,-21,-127,76,-48, 
  /* [38][0][][] */ 66,100,-36,-42,115,0,44,-31,127,73,-53,19,-2,-42,42,25, 
  /* [39][0][][] */ -17,65,-17,-127,-4,10,-39,37,41,-65,-30,-24,13,55,24,41, 
  /* [40][0][][] */ 13,-19,7,-90,-17,-30,-5,3,-127,16,7,-56,26,-61,12,-45, 
  /* [41][0][][] */ -16,-10,-22,-5,9,-8,13,-2,-27,6,-57,11,-127,19,20,24, 
  /* [42][0][][] */ 98,95,-34,-18,-95,-85,-14,-93,-27,11,69,-94,-45,50,127,-114, 
  /* [43][0][][] */ 5,127,-74,-11,40,-27,61,-3,22,53,-49,-36,42,-81,-53,-10, 
  /* [44][0][][] */ -44,-32,30,-21,45,-6,-100,-127,-13,-14,45,-13,5,-31,64,-56, 
  /* [45][0][][] */ 4,80,-127,-36,47,-72,-9,-60,-8,4,-19,-85,23,-14,46,-2, 
  /* [46][0][][] */ -15,-16,-8,-77,-16,9,45,2,-113,5,20,14,-6,-127,20,-23, 
  /* [47][0][][] */ 14,28,33,-12,127,-9,-15,27,-51,51,13,33,11,11,123,-47, 
  /* [48][0][][] */ -127,-75,-2,38,50,23,11,-7,11,16,-77,49,49,1,34,17, 
  /* [49][0][][] */ -22,55,112,33,111,21,76,39,-127,-25,-11,-15,-19,96,22,-74, 
  /* [50][0][][] */ 10,0,-15,24,15,-127,-3,-17,-12,-2,-24,-18,32,-56,-32,34, 
  /* [51][0][][] */ -18,16,61,12,9,-21,-7,2,-94,77,55,-127,17,-96,-13,46, 
  /* [52][0][][] */ 5,19,-3,67,46,-8,-3,43,46,74,-36,-71,32,127,6,14, 
  /* [53][0][][] */ -36,-68,-12,-1,-76,-10,-72,-18,46,16,24,-64,26,-95,127,-23, 
  /* [54][0][][] */ 69,9,-62,-13,127,61,-68,-31,-70,-8,-48,-62,1,-15,19,-10, 
  /* [55][0][][] */ 68,-2,-5,-6,36,-59,-79,-127,-52,-67,-89,4,11,-49,-23,-5, 
  /* [56][0][][] */ -30,4,43,-15,-6,-32,-89,47,2,127,25,-22,26,6,5,-19, 
  /* [57][0][][] */ -19,44,-34,-29,-26,-29,108,69,-50,20,-2,3,14,34,127,18, 
  /* [58][0][][] */ 46,53,-104,48,127,76,-40,15,-71,-81,3,14,-44,39,-14,-18, 
  /* [59][0][][] */ -74,39,127,32,-72,-45,98,106,2,29,17,-16,24,11,24,-11, 
  /* [60][0][][] */ 8,-3,-36,-6,-3,-127,-15,13,-14,-15,5,-34,44,-7,-34,-1, 
  /* [61][0][][] */ 35,-6,16,127,104,33,30,9,-116,-10,21,35,-16,24,46,-28, 
  /* [62][0][][] */ -110,127,2,-86,-40,-16,-120,69,-41,-75,-48,-81,-24,-108,-91,-76, 
  /* [63][0][][] */ -55,16,-13,127,-73,25,-67,-2,-37,4,-14,-22,10,55,5,24, 
  /* [64][0][][] */ 4,20,-17,13,24,4,-9,57,-3,-30,-6,-61,-8,-127,59,4, 
  /* [65][0][][] */ -3,-21,0,-117,13,-45,46,-11,-37,59,0,-127,9,-1,-13,-32, 
  /* [66][0][][] */ 10,-16,69,1,-21,-11,22,109,-19,-33,-13,21,15,127,-41,64, 
  /* [67][0][][] */ 7,65,-24,-127,-6,-5,-45,38,60,-84,-43,-7,21,57,54,42, 
  /* [68][0][][] */ -67,27,127,12,-11,14,37,-1,-45,-44,-18,-23,2,-28,118,-17, 
  /* [69][0][][] */ 127,77,-13,-32,-112,-65,-12,-42,-23,31,75,-87,-26,38,52,-86, 
  /* [70][0][][] */ 21,19,-39,2,-17,50,50,127,-13,93,-44,22,-11,58,-51,7, 
  /* [71][0][][] */ -4,-18,-3,25,-4,-82,-2,-1,-22,22,-70,-15,-127,5,55,22, 
  /* [72][0][][] */ 24,17,-127,3,5,0,12,90,-35,1,-3,-1,31,4,-45,26, 
  /* [73][0][][] */ -79,53,57,8,9,-65,-99,-127,23,-53,29,-32,20,-82,-9,-15, 
  /* [74][0][][] */ -13,71,72,127,10,1,-49,97,-71,6,-20,26,38,-113,33,-49, 
  /* [75][0][][] */ -22,37,-71,-11,25,-15,31,-42,126,-4,6,-14,-11,127,-12,20, 
  /* [76][0][][] */ -12,-11,26,32,4,-10,-22,53,17,-26,-9,-127,-12,4,4,6, 
  /* [77][0][][] */ 0,-59,-34,48,-43,49,60,127,34,21,49,60,-34,-16,-16,13, 
  /* [78][0][][] */ -22,-25,35,-61,70,1,-19,74,44,-28,27,3,-4,127,-11,19, 
  /* [79][0][][] */ -4,-124,-82,-12,-50,17,-15,-82,127,51,-19,89,-21,12,63,-30, 
  /* [80][0][][] */ -23,8,85,-60,45,-34,11,-20,-56,51,-58,-102,28,127,67,-12, 
  /* [81][0][][] */ -58,37,-108,38,67,-127,-4,69,-7,-59,78,-21,41,29,18,-25, 
  /* [82][0][][] */ 98,0,-13,-2,14,-91,-14,10,-19,-10,-62,-16,127,-1,2,20, 
  /* [83][0][][] */ -18,90,-127,-106,-38,-20,46,-81,39,64,-32,-126,30,36,26,122, 
  /* [84][0][][] */ -66,-17,87,-12,-5,-4,68,-127,-18,25,-1,-47,-8,53,66,-52, 
  /* [85][0][][] */ -93,120,26,-127,-75,-36,-28,-11,-68,-8,-66,15,5,-16,-99,-20, 
  /* [86][0][][] */ 2,1,-36,-7,-19,-23,127,48,4,-7,2,37,-12,30,62,-2, 
  /* [87][0][][] */ -22,-13,10,-69,5,-39,23,-5,-10,17,-26,-127,-8,4,-9,-34, 
  /* [88][0][][] */ 75,35,38,-16,65,-127,17,8,-70,20,-118,-89,49,19,76,32, 
  /* [89][0][][] */ 7,-8,-43,-74,58,-24,-47,-35,-74,-6,47,-83,127,-18,62,-60, 
  /* [90][0][][] */ 14,-69,32,-30,81,-23,-86,91,49,-27,-55,-48,-5,127,-15,-94, 
  /* [91][0][][] */ -39,-22,-56,-83,6,-18,-19,-22,-16,123,36,-127,-17,5,-37,-1, 
  /* [92][0][][] */ -41,9,60,36,-8,-127,20,-16,4,-11,6,-20,7,-19,30,-3, 
  /* [93][0][][] */ 29,-13,127,-1,-67,39,15,-49,2,40,-51,-10,-19,-16,20,-23, 
  /* [94][0][][] */ 27,2,-16,-1,13,-21,-7,-17,-29,-15,-4,-90,127,3,30,-52, 
  /* [95][0][][] */ 85,57,41,73,-78,-16,-83,-10,-5,18,81,-50,-34,41,42,-127, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00077241193503141403, 0.0014505017315968871, 0.00069614488165825605, 0.00070840463740751147, 0.00067255785688757896, 0.0010578163200989366, 0.00045651738764718175, 0.00055226293625310063, 0.00052830262575298548, 0.0012223930098116398, 0.00046726051368750632, 0.00052731705363839865, 0.00071695382939651608, 0.0028284392319619656, 0.00046706653665751219, 0.00043125380761921406, 0.00029598432593047619, 0.00075666769407689571, 0.0014868468279018998, 0.0011194793041795492, 0.00024613624555058777, 0.00021370835020206869, 0.00039711673161946237, 0.00038088011206127703, 0.0003501421888358891, 0.0013697894755750895, 0.0017363406950607896, 0.00079614185960963368, 0.00044008117401972413, 0.0010807939106598496, 0.00057119602570310235, 0.00061603909125551581, 0.00051247677765786648, 0.00069496897049248219, 0.00088997249258682132, 0.00078885740367695689, 0.0004885630332864821, 0.00050219247350469232, 0.0006285917479544878, 0.0011717540910467505, 0.0004483827215153724, 0.0011660146992653608, 0.00066461029928177595, 0.00069156446261331439, 0.00107638502959162, 0.00050871574785560369, 0.00088472006609663367, 0.00058110704412683845, 0.00084925699047744274, 0.00053174450295045972, 0.00077822717139497399, 0.0005316653405316174, 0.0015841698041185737, 0.00063004350522533059, 0.0010290635982528329, 0.00073237484320998192, 0.0011652313405647874, 0.00069729378446936607, 0.00083926506340503693, 0.00040592052391730249, 0.002090932335704565, 0.0011506408918648958, 0.00043564863153733313, 0.00098210235591977835, 0.0013324616011232138, 0.00074302614666521549, 0.00025435307179577649, 0.0006628354312852025, 0.00079639157047495246, 0.00091724313097074628, 0.00066181528382003307, 0.00060079136164858937, 0.001819268218241632, 0.00076138717122375965, 0.0008478283416479826, 0.00044001606875099242, 0.00071721815038472414, 0.00035595224471762776, 0.00024551671231165528, 0.00051889743190258741, 0.00038945206324569881, 0.00036545729381032288, 0.00050466432003304362, 0.00049771001795306802, 0.0003244107065256685, 0.0007475981255993247, 0.0012390239862725139, 0.00065146631095558405, 0.00030427015735767782, 0.00082846451550722122, 0.00071730784839019179, 0.00082316721091046929, 0.00073822384001687169, 0.0012845546007156372, 0.00073869980406016111, 0.00049119640607386827, } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -14268, 7484, -18174, 9341, -1835, 12867, 22978, -23408, 5950, 31481, 24005, 18235, -10371, 14886, -12829, 10220, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0006280432571657002, 0.00045809912262484431, 0.00019860478641930968, 0.00025295765954069793, 0.00037710132892243564, 0.00030652541317977011, 0.00039504369487985969, 0.000287618488073349, 0.00022049837571103126, 0.00022059798357076943, 0.00051518593681976199, 0.00047388704842887819, 0.00033060790156014264, 0.00022194672783371061, 0.00042517957626841962, 0.00050053576705977321, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ 17,-11,20,-26,35,51,-59,-14,26,17,-13,-4,-13,-17,-19,28,3,-7,0,2,9,-64,16,9,8,23,-2,127,25,-36,41,-11,-11,-3,1,10,-2,23,-38,-8,-30,8,-4,26,1,10,-4,20,8,-24,-32,-24,14,-10,-20,100,-14,8,-40,-22,-26,19,14,-27,-38,-68,-8,36,-3,35,22,-4,-9,-31,-7,-21,-10,21,11,11,6,-40,52,23,-20,-31,-30,-109,2,-33,23,-10,49,-53,-22,4, 
  /* [1][0][][] */ 53,-52,-69,-42,98,45,25,43,-8,-23,-32,-47,2,-11,-28,63,-57,17,28,44,18,6,-39,-46,51,-9,-32,-69,0,-3,-75,35,-17,-28,28,22,47,3,-34,-12,-28,41,-47,-31,-38,77,-6,46,8,-80,-35,-88,-2,48,32,10,-41,-24,-25,-26,2,-34,19,-58,-88,76,22,-25,-20,-4,-7,15,39,-86,-11,9,49,-58,28,10,12,-58,31,4,-43,0,-16,-4,50,-58,14,6,3,-7,43,127, 
  /* [2][0][][] */ -32,80,-98,-6,53,-23,50,86,12,-127,16,2,-10,19,28,3,-6,21,-47,53,3,37,50,24,1,19,-15,-13,49,-16,75,-40,31,61,-27,52,-112,-65,37,7,8,-44,36,-14,33,-15,-5,-12,3,43,10,57,75,-26,4,30,50,27,44,12,50,8,21,0,37,16,-17,-5,-20,-24,-23,-59,-58,-70,-17,33,38,57,27,-43,4,-6,-11,-20,-51,38,34,62,31,52,14,-6,15,7,-43,-45, 
  /* [3][0][][] */ -2,29,66,-32,26,-66,63,-21,-25,-96,16,-11,16,59,3,37,28,31,29,-2,127,20,60,12,-19,-9,7,13,56,5,0,58,-65,86,-3,-35,-56,-8,22,37,-63,-81,66,23,16,9,-9,-105,-38,13,19,91,-27,-102,2,25,-112,60,49,21,69,89,-20,-16,69,68,-17,-46,44,-32,18,-67,45,-23,12,-40,-19,-14,38,33,-7,-19,25,-6,-46,25,21,57,32,48,14,32,35,93,17,-75, 
  /* [4][0][][] */ 54,-32,26,-32,127,96,-31,-44,-85,-32,-39,-30,-37,12,-20,48,47,-61,-27,85,22,-29,42,-13,12,28,13,-35,12,-30,0,-64,54,14,3,-21,50,21,23,-28,-55,2,-12,-43,20,-87,-13,41,25,-1,3,-51,-12,-11,11,42,-37,-11,-47,17,-14,75,57,20,28,8,-22,21,-36,-18,45,82,33,-47,-15,-26,4,20,55,-13,12,-37,0,-28,-67,7,21,20,-91,2,25,-41,18,-5,29,-12, 
  /* [5][0][][] */ -23,-17,0,-16,2,-18,47,-51,-34,-32,-2,16,17,52,-17,-14,-4,-5,24,-3,30,38,-26,55,13,-20,46,-87,3,1,36,22,-15,44,7,-93,11,18,16,11,-16,-23,21,-25,23,-24,22,-16,-11,7,61,14,-11,-13,-9,-38,-13,24,-28,1,55,12,-14,5,8,42,-5,83,35,98,11,28,6,-12,-2,45,-67,5,10,31,-14,-16,-8,10,2,35,15,127,-31,18,-14,-3,26,10,-62,-4, 
  /* [6][0][][] */ -32,-51,16,-42,-24,-26,67,-1,-7,-3,-10,-42,-4,19,-23,-2,4,-15,3,-21,-24,78,19,6,2,-19,12,-13,11,7,42,8,45,43,37,-24,-20,-20,-13,-30,-6,35,-12,-15,16,-18,-1,12,-1,44,-45,67,-12,-33,-9,-43,4,-41,-5,-5,18,48,8,-69,25,-18,0,-53,3,25,127,-15,-59,11,4,29,-84,-12,-1,2,-8,40,30,2,3,21,44,27,15,25,11,-28,-43,3,-44,7, 
  /* [7][0][][] */ -111,99,26,6,54,-24,57,-26,-44,-103,12,13,-53,38,-2,13,31,-51,-6,-15,18,20,11,-3,-43,-32,54,-3,45,-32,-30,43,42,-12,-67,-50,-2,2,-119,85,29,-23,18,62,-18,11,34,-52,-23,8,-15,75,-9,-36,-55,8,83,32,-40,-7,32,21,-7,-1,-51,75,-30,-127,8,-53,36,74,-32,-17,0,-12,31,73,17,-13,-57,11,-27,64,23,4,1,4,11,55,-111,-19,-63,-18,-19,34, 
  /* [8][0][][] */ -32,-33,97,-8,-124,37,66,-91,26,61,40,15,21,20,43,-15,-51,-27,71,-1,-38,10,-57,66,33,-22,85,-17,6,-8,53,58,20,0,19,-67,-34,18,40,55,-9,21,8,57,-27,-47,34,43,-127,22,55,20,-69,-32,-44,105,-44,-17,-92,-22,10,-9,-57,-10,14,66,-46,7,70,9,-28,19,50,43,74,-8,-82,-19,26,59,-118,-12,-45,-31,13,50,87,42,-45,-55,21,34,34,1,23,12, 
  /* [9][0][][] */ -80,-46,-81,42,47,25,16,23,43,-79,57,75,-50,8,71,-44,-12,-17,-16,8,-71,-53,14,5,-83,-8,-19,31,4,-11,-20,3,37,-26,-122,72,9,36,-42,38,92,-70,-4,91,-46,15,-83,-68,-14,15,-36,-23,31,-27,-40,-58,16,86,-2,14,44,-56,-11,127,-61,-16,17,-16,-18,0,-48,-91,29,-12,-22,-11,89,-47,-6,-32,-7,-36,-13,43,-1,-47,6,-44,40,3,-41,56,-55,-17,-10,-33, 
  /* [10][0][][] */ -85,-12,-41,-31,-23,-69,78,-18,47,-20,29,60,23,3,-9,10,-7,20,-37,-38,-8,39,21,29,-49,4,2,-118,56,-53,77,-31,0,27,-26,-18,-24,41,-3,38,42,-46,24,-14,5,34,39,-22,12,51,-15,53,-38,-57,-4,-46,56,28,-3,-27,55,17,8,31,7,85,-11,-60,23,-29,16,-29,-64,-8,18,49,-5,51,-15,16,-14,23,13,49,-1,-3,12,127,-10,31,20,-6,28,-17,38,-63, 
  /* [11][0][][] */ -127,9,30,-28,17,-66,3,-26,-63,-4,-3,24,54,50,-38,-41,57,-8,-43,-54,32,44,2,3,91,-21,102,-3,-20,12,-15,39,-20,69,0,-69,-35,3,12,13,-19,-9,8,9,100,-14,92,46,62,59,17,48,16,-58,15,-13,-75,-15,-32,-55,6,-2,-38,-18,-7,-15,26,0,49,27,6,39,-16,2,46,-14,-65,84,-116,74,-37,0,-71,-73,127,40,84,25,-31,77,-52,-56,-23,51,-37,1, 
  /* [12][0][][] */ 12,19,-82,36,57,23,-18,7,0,7,-3,-3,-21,-22,40,23,-56,-33,9,-2,-21,-56,-21,24,-37,31,-17,79,-28,3,-90,0,-11,-6,-13,55,4,-10,8,28,34,-28,14,17,-34,9,3,40,-28,-37,-15,-47,-46,6,-12,-32,28,-2,3,1,-17,-14,40,58,-5,-68,14,60,-58,-127,-3,55,21,19,15,80,55,-34,-13,-8,13,-7,-4,17,-4,-35,-43,-88,37,-5,8,-6,-45,-4,-11,61, 
  /* [13][0][][] */ -71,72,-21,-29,-72,45,35,-5,-25,-22,32,48,98,36,-45,-40,-6,6,-30,-24,0,63,74,-66,71,-1,62,-2,12,-37,-35,-53,-50,-37,-6,-2,-35,48,17,11,19,-14,5,-3,36,19,10,-14,53,-22,37,127,41,-67,59,-34,-31,64,19,17,25,109,32,28,3,-10,-23,-33,24,-17,58,-115,62,-31,-28,-4,-20,0,-46,9,46,14,-38,-7,25,-45,93,30,-18,-7,-52,54,-3,-53,-26,-20, 
  /* [14][0][][] */ 63,24,-14,-43,59,56,-24,2,-75,44,53,-36,-21,-68,-69,-12,-73,0,56,18,42,-41,73,-122,-11,46,-93,-25,-7,6,-1,-84,-58,-13,22,24,-30,9,95,-2,-48,127,-65,-68,-51,-20,6,22,106,-42,24,-52,31,43,-88,55,-56,2,-88,8,-30,12,54,42,18,22,-16,3,-41,28,51,39,19,-3,-24,28,58,-107,-6,-70,45,-41,17,32,-24,-78,-49,-17,-41,-8,73,29,18,37,46,-28, 
  /* [15][0][][] */ -22,-78,3,-61,-13,31,-8,-74,-28,30,-25,-30,54,3,34,-32,-64,4,-5,11,-2,16,-53,-40,17,-25,11,2,-14,-14,34,-50,-11,33,35,-21,14,10,-82,2,34,-74,-8,-6,9,-72,46,61,35,2,-3,-127,-10,49,-15,26,29,-17,-21,24,1,26,8,-37,-13,-6,-8,22,6,34,12,36,20,7,32,-36,-51,6,-9,33,-34,28,0,54,19,-20,-11,-28,-63,28,16,82,-44,-28,-12,16, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.026691839098930359, 0.019469212740659714, 0.0084407031536102295, 0.01075070071965456, 0.016026806086301804, 0.013027329929172993, 0.016789356246590614, 0.012223785743117332, 0.0093711810186505318, 0.0093754138797521591, 0.021895401179790497, 0.020140198990702629, 0.014050835743546486, 0.0094327358528971672, 0.018070131540298462, 0.021272769197821617, } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 19599, 64289, -165, -271, 14234, -4176, 73, -3890, 3026, 15040, -7279, -1114, 2125, 9390, 5956, -9488, -5542, -1082, 274, 15795, -9202, 24403, -921, 10982, 24096, 560, -4985, 17046, 13135, -19651, 1987, 21220, 24012, -15831, -838, -118, -38, 1050, 242, -10907, -5230, 826, -9477, -2471, 30788, -2015, 13392, -3463, -14662, 2725, -264, -105, -2773, 13778, -5341, 10595, 23776, -1341, 44945, -680, -8931, -70, 2981, 186, -1514, 7611, -351, -5402, -134, 3873, -131, -3940, 2285, 751, -3508, -5996, 1586, -1453, 40696, -8098, -6927, -12232, -16, 690, 48986, -12741, -12145, -26848, -8464, 2854, -1603, 33590, 387, -1991, -2137, -362, };
const TfArray<96, float> quant10_scale = { 96, { 0.0001437910832464695, 8.8559878349769861e-05, 0.00012771399633493274, 0.00022980921494308859, 0.00024187139933928847, 0.0001863437209976837, 5.4280248150462285e-05, 0.00010647416638676077, 0.00018982814799528569, 0.00016215846699196845, 0.00024019861302804202, 0.00012386438902467489, 0.00034301806590519845, 0.00022407673532143235, 0.00032763180206529796, 0.00014067285519558936, 0.00017491956532467157, 0.00020335352746769786, 0.00022876140428707004, 7.3317984060849994e-05, 9.8718817753251642e-05, 4.6633667807327583e-05, 0.00013987404236104339, 6.1560953326988965e-05, 7.7031567343510687e-05, 0.00012286187848076224, 0.00018480276048649102, 0.00016815164417494088, 6.6604327003005892e-05, 0.00049036298878490925, 0.0003258521028328687, 0.00026653689565137029, 9.3796043074689806e-05, 9.5390132628381252e-05, 0.00024587387451902032, 0.00056385697098448873, 0.00043490261305123568, 0.00019120331853628159, 0.00025878986343741417, 6.4851061324588954e-05, 0.00023034631158225238, 0.00028122859657742083, 0.00031735919765196741, 6.6082648118026555e-05, 0.00036989134969189763, 0.00011104829900432378, 0.0001021526986733079, 0.00033683708170428872, 0.00055086554493755102, 0.00010635718354023993, 0.00036773100146092474, 0.00023403529485221952, 0.0001766765199135989, 0.00021226894750725478, 0.00015279559011105448, 0.00015874429664108902, 0.00013107743870932609, 0.00041619321564212441, 3.4810738725354895e-05, 0.0001664750452619046, 0.0003108470409642905, 0.00032389108673669398, 0.00012552404950838536, 0.00017563495202921331, 0.00011730896949302405, 0.00017493026098236442, 0.0002890156174544245, 0.00039425777504220605, 0.00022367130441125482, 0.00011380663636373356, 0.00024820180260576308, 0.00010916013707173988, 0.00027774975751526654, 0.00014765032392460853, 0.00022708576580043882, 0.0003384757146704942, 0.00014396382903214544, 7.9968602221924812e-05, 6.4958723669406027e-05, 0.00015750057355035096, 0.00021996456780470908, 0.00022133045422378927, 0.00017317732272204012, 0.00035917205968871713, 6.9221096055116504e-05, 0.00011199247092008591, 8.4811348642688245e-05, 0.00047769679804332554, 0.00027905040769837797, 0.00012440064165275544, 0.00045213275006972253, 3.0542734748451039e-05, 0.00018103685579262674, 0.00012291144230403006, 0.00036486919270828366, 0.00036730302963405848, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -47,-72,-11,127,23,85,106,-53,-8,-22,-13,-3,-32,-5,38,6,-5,-35,25,19,21,-127,127,10,-97,5,48,-30,-120,-127,44,29,11,57,64,-17,-31,-15,26,-5,-10,32,-108,77,27,-61,37,46,-19,42,-16,22,5,-9,19,40,-94,-43,-73,-20,-8,-4,6,37,73,-25,63,10,-7,27,20,127,18,21,38,-1,-16,20,127,0,-14,23,-28,20,127,19,-68,-16,-4,-30,-9,-38,0,-26,-16,26, 127,-127,73,108,-41,127,57,-106,76,3,-15,127,127,-104,-15,25,18,127,127,-114,127,-67,82,73,-127,-109,-69,-35,-62,48,-55,-15,-102,78,-127,-80,-41,-17,-46,71,-2,127,127,95,-52,-102,-111,-50,-14,-127,46,85,70,-31,39,77,-50,48,-95,-115,-45,-45,-63,62,78,-62,20,28,-81,46,-19,94,113,127,11,19,-3,64,-35,52,66,119,127,-25,-7,64,-95,127,-115,-95,6,-127,-91,-127,-41,113, -76,-15,30,-83,16,-30,84,-9,87,-37,-25,22,-20,-8,-12,-8,-3,-11,9,-17,-13,-69,30,0,-124,85,3,-56,104,51,-16,15,-9,57,13,-43,-9,25,21,16,20,16,-126,57,18,-16,36,14,-15,8,-12,4,-8,1,-2,20,-71,7,-45,52,1,42,33,-6,-8,-39,-33,19,5,1,-2,40,10,-24,-18,5,-18,-7,-84,2,-22,-28,-20,3,-99,2,-28,-24,-49,43,-19,-32,27,-24,-22,7, 
  /* [0][1][][] */ -72,-73,72,-33,-47,113,15,127,-51,-18,1,-116,27,-121,80,34,-1,-58,-18,89,51,-82,51,47,-68,-13,127,-22,-24,64,127,-94,-127,109,-82,-43,-34,28,-23,108,-48,-29,0,38,-48,127,-21,67,14,90,21,-1,18,-57,29,31,127,127,-72,-85,127,-34,-42,127,69,-35,-18,-6,127,41,127,92,-44,101,3,14,12,21,-30,5,-44,127,-84,110,4,28,-48,31,77,-127,-29,2,127,-62,-22,-2, 65,124,58,-111,127,97,92,41,-127,127,127,-38,-71,-127,-127,127,127,-63,-126,-50,98,107,-127,127,-85,-84,-38,127,-127,110,-127,-127,-88,127,109,127,127,-127,-96,127,-66,-99,110,-127,-127,-27,-127,-127,127,-112,84,43,127,127,127,-127,103,-126,-127,127,17,-83,-127,-98,-127,127,-127,127,-123,-127,-109,-84,-127,-81,127,127,-127,127,-79,127,127,29,-44,-127,57,127,88,47,127,17,127,5,-68,29,127,-127, -63,-11,-47,35,-56,-125,23,-23,23,-35,-27,98,2,90,10,2,1,60,-4,125,12,-74,-40,4,-49,95,-72,-19,-76,-19,11,-62,-77,43,9,-19,-25,35,-61,34,127,-4,-43,24,-42,-54,14,50,5,112,-5,5,-32,-74,8,15,94,-1,-9,27,-39,127,87,-54,-44,13,33,-11,-83,127,-17,-85,-3,-55,-17,-18,24,22,71,-38,-69,-45,54,12,-49,-15,65,21,18,78,-46,21,-40,87,-29,-2, 
  /* [0][2][][] */ -78,-2,-9,-19,11,-34,79,33,55,-32,-33,-10,15,21,-28,-5,-4,66,1,0,-48,-127,-4,-4,-19,-45,36,-69,97,39,25,25,22,-7,-6,-27,-11,32,4,-4,-12,-8,-62,104,2,35,10,41,-16,-26,10,-22,20,-8,14,22,-84,28,-18,15,19,-4,-24,-12,-4,-46,-39,8,-29,27,26,31,12,-23,38,10,19,8,-83,-12,-5,5,12,17,-117,-1,20,-44,-47,-48,-31,-44,12,56,-16,-7, 118,29,-127,-32,-72,-27,55,36,-65,-32,-15,-111,-81,105,-12,48,7,-50,-14,-127,90,-67,-44,10,-97,127,-48,21,-38,-20,-15,-6,-64,28,32,18,-26,-30,127,44,12,-16,70,-25,-40,78,-74,-44,-33,-11,-127,-127,-56,-26,-2,43,-75,-2,4,39,-6,-20,4,-54,-59,33,64,-24,102,122,-23,-69,11,-60,9,9,98,6,44,32,14,-91,-52,4,1,4,127,38,-45,49,-28,-95,41,75,-9,33, -67,10,-20,21,14,-82,-127,7,-14,-10,-14,7,9,-24,16,-12,-8,-18,5,16,-45,-82,9,8,11,-81,15,4,-55,-43,-14,15,41,-12,8,-16,-38,1,46,-56,26,-6,-54,-16,2,69,23,25,-11,-5,5,-12,16,-1,0,0,-74,-17,0,-34,-12,16,71,-21,30,-1,2,20,-10,25,3,20,-17,14,4,21,35,8,65,-11,7,-13,-9,-19,68,2,53,-41,60,56,-20,-43,-4,2,-13,-11, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.00611112080514431, 0.0037637946661561728, 0.0054278448224067688, 0.0097668915987014771, 0.010279534384608269, 0.0079196076840162277, 0.0023069104645401239, 0.0045251520350575447, 0.0080676963552832603, 0.0068917348980903625, 0.010208440944552422, 0.0052642361260950565, 0.014578267000615597, 0.0095232613384723663, 0.013924350962042809, 0.0059785959310829639, 0.0074340812861919403, 0.0086425244808197021, 0.0097223594784736633, 0.0031160144135355949, 0.0041955495253205299, 0.0019819308072328568, 0.0059446464292705059, 0.0026163405273109674, 0.0032738414593040943, 0.0052216299809515476, 0.0078541170805692673, 0.0071464446373283863, 0.0028306839521974325, 0.020840426906943321, 0.013848713599145412, 0.011327818036079407, 0.0039863316342234612, 0.0040540806949138641, 0.010449639521539211, 0.023963920772075653, 0.018483361229300499, 0.0081261405721306801, 0.010998568497598171, 0.0027561699971556664, 0.0097897183150053024, 0.011952214874327183, 0.013487765565514565, 0.0028085124213248491, 0.015720382332801819, 0.0047195525839924812, 0.0043414896354079247, 0.014315575361251831, 0.023411784321069717, 0.00452018016949296, 0.015628566965460777, 0.0099464999511837959, 0.0075087519362568855, 0.0090214302763342857, 0.0064938124269247055, 0.0067466325126588345, 0.0055707907304167747, 0.017688211053609848, 0.0014794564340263605, 0.007075189147144556, 0.013210998848080635, 0.013765371404588223, 0.005334771703928709, 0.0074644852429628372, 0.0049856309778988361, 0.0074345357716083527, 0.012283164076507092, 0.016755955293774605, 0.0095060300081968307, 0.00483678188174963, 0.010548576712608337, 0.0046393056400120258, 0.011804364621639252, 0.0062751383520662785, 0.0096511449664831161, 0.014385217800736427, 0.0061184624210000038, 0.0033986654598265886, 0.0027607455849647522, 0.0066937743686139584, 0.0093484940007328987, 0.0094065442681312561, 0.0073600360192358494, 0.015264811925590038, 0.002941896440461278, 0.004759680014103651, 0.0036044821608811617, 0.020302113145589828, 0.011859642341732979, 0.0052870274521410465, 0.019215641543269157, 0.0012980662286281586, 0.0076940665021538734, 0.0052237361669540405, 0.015506939962506294, 0.015610378235578537, } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 1231, 9884, 12899, 23770, 18927, -3189, -2230, 11129, 32363, -4510, 10344, 2865, 7214, 14235, 27220, 1494, 3075, 6035, 17399, 5111, -526, 968, 11509, -984, 4462, -76, 11767, 6361, 5291, 52194, 43288, 16541, 7373, -908, 10171, 4671, 1292, 7071, 22952, -742, 13346, 6488, 53664, -3937, 29968, 7850, 7489, 10919, 66502, 7597, 102, 5217, -4555, -1125, -2564, 4885, -1249, 18136, 5590, 10236, 5069, 15541, 8977, 4407, 8652, 9336, 3948, -5758, 9553, -2489, 5471, 15262, 14011, 6266, -3678, -4504, 5994, 95, 2937, -2445, 15953, 18823, 3049, 15323, 2606, -68, 12071, 68927, 7247, 16478, 6590, -210, 7358, 8325, 6659, 10055, };
const TfArray<96, float> quant12_scale = { 96, { 0.00022766628535464406, 0.0001492323208367452, 0.00014365978131536394, 9.8316304502077401e-05, 0.00015715578047093004, 0.0003208341368008405, 0.00040900090243667364, 0.00014413413009606302, 7.1133799792733043e-05, 0.00026954576605930924, 0.00025098261539824307, 0.00028175752959214151, 0.00016110205615404993, 0.00016529954154975712, 8.9851513621397316e-05, 0.00036371438181959093, 0.00015787153097335249, 0.00019960098143201321, 0.00013336716801859438, 0.00023574300576001406, 0.0002226727083325386, 0.00024760657106526196, 0.0001768653019098565, 0.00049956032307818532, 0.00057789159473031759, 0.00026093979249708354, 0.00019358773715794086, 0.00020949721510987729, 0.00028672179905697703, 6.8334760726429522e-05, 6.4449239289388061e-05, 0.00015586109657306224, 0.00021847880270797759, 0.00025837786961346865, 0.00019385419727768749, 0.00013031206617597491, 0.00028311193455010653, 0.00021122883481439203, 0.00011658718722173944, 0.00059980270452797413, 0.00012742001854348928, 0.00024502581800334156, 5.1345647079870105e-05, 0.00023095458163879812, 0.00010902181384153664, 0.00020443950779736042, 0.00024358960217796266, 0.00023140093253459781, 6.205975660122931e-05, 0.0002704778453335166, 0.00016201092512346804, 0.00029277682187967002, 0.00024687545374035835, 0.00023612708901055157, 0.00040790005004964769, 0.00021992332767695189, 0.00019239213725086302, 0.00010758144344436005, 0.00036001758417114615, 0.00014670686505269259, 0.00032238391577266157, 9.1332301963120699e-05, 0.00016841726028360426, 0.0002239127061329782, 0.00028584862593561411, 0.00020800686615984887, 0.00031645884155295789, 0.00023500673705711961, 0.00018270264263264835, 0.00031721862615086138, 0.00021554851264227182, 0.00010386188660049811, 0.00014743296196684241, 0.000173685431946069, 0.00039558179560117424, 0.00028191471938043833, 0.0002617916907183826, 0.00022459389583673328, 0.00028952839784324169, 0.00015033823729027063, 0.00012786706793121994, 8.6737185483798385e-05, 0.00024891606881283224, 0.00012796909140888602, 0.00042215845314785838, 0.00022260069090407342, 0.00018268632993567735, 5.5797343520680442e-05, 0.00018939668370876461, 0.00013319635763764381, 0.00018288313003722578, 0.00038227098411880434, 0.00021244739764370024, 0.00019797924323938787, 0.00018132512923330069, 0.00016086598043330014, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -5,33,-37,28,24,15,-9,9,46,50,-111,89,-34,-89,3,-127, 
  /* [1][0][][] */ 10,127,-81,-46,-25,-77,94,-126,-5,61,-8,-26,-1,-21,31,48, 
  /* [2][0][][] */ -104,51,-2,-19,-99,-13,12,67,-61,0,67,-127,-18,-34,10,-51, 
  /* [3][0][][] */ -113,30,34,27,16,49,89,70,16,48,-27,12,-79,-11,23,-127, 
  /* [4][0][][] */ -9,-62,0,117,-56,60,32,45,80,37,55,24,35,21,-127,-56, 
  /* [5][0][][] */ -35,-35,29,-44,27,48,-20,17,-110,96,-17,-127,9,32,9,-1, 
  /* [6][0][][] */ 51,-17,58,31,64,6,-83,-63,28,-10,12,20,127,-57,2,-42, 
  /* [7][0][][] */ -1,102,115,-75,-33,-110,-29,-127,-123,20,-65,-115,63,-51,108,44, 
  /* [8][0][][] */ 38,12,75,116,8,87,-12,89,127,43,46,-47,-99,56,-97,-127, 
  /* [9][0][][] */ 17,-115,34,62,16,-119,69,27,127,27,118,26,-8,104,-3,-99, 
  /* [10][0][][] */ 0,-86,24,-39,-53,-66,-35,86,127,103,125,-82,-8,55,68,-14, 
  /* [11][0][][] */ 52,-18,12,22,79,-13,-127,-76,17,4,-30,23,-53,15,-38,-120, 
  /* [12][0][][] */ -17,89,-63,-93,16,-4,42,-88,-117,-90,-14,-75,-25,127,113,66, 
  /* [13][0][][] */ -60,-82,-127,30,-38,-83,-39,-19,125,42,-47,50,-37,59,57,-12, 
  /* [14][0][][] */ -24,-48,10,-25,14,6,11,127,23,47,-15,-26,34,22,-77,109, 
  /* [15][0][][] */ 39,-31,-24,53,-15,10,79,-5,8,-127,-17,-50,-21,40,-15,-12, 
  /* [16][0][][] */ 74,-62,-74,-12,4,-49,17,-76,127,58,78,9,31,105,107,84, 
  /* [17][0][][] */ -8,-61,127,74,55,38,16,9,28,-31,-54,-13,-20,22,-86,-4, 
  /* [18][0][][] */ -1,15,-15,-6,-127,-32,-8,-3,-58,-55,-46,-84,8,-98,40,56, 
  /* [19][0][][] */ 127,-100,-10,-11,73,9,-82,49,81,-22,31,27,68,16,4,119, 
  /* [20][0][][] */ 7,-53,121,-89,-35,68,-59,21,-30,-98,127,-32,-18,-20,-65,118, 
  /* [21][0][][] */ 27,86,-73,-121,-61,-40,-115,-71,-127,93,-119,10,-113,-69,5,112, 
  /* [22][0][][] */ 55,-78,50,-15,78,-14,17,-6,-127,-6,-37,-13,-3,3,72,-23, 
  /* [23][0][][] */ 46,11,47,-4,22,14,-11,3,3,-47,38,-22,127,-5,12,-6, 
  /* [24][0][][] */ -59,-74,37,-46,-74,10,58,27,-65,47,-13,-33,-16,-127,93,67, 
  /* [25][0][][] */ -38,66,-52,-9,-7,53,-94,-52,-53,114,-54,-7,-67,-127,5,-30, 
  /* [26][0][][] */ 113,-27,-9,-56,-15,-58,-47,-22,127,-21,-2,-30,49,31,69,27, 
  /* [27][0][][] */ 71,-44,37,-4,-48,-29,18,-26,-23,35,-127,22,21,-23,-3,43, 
  /* [28][0][][] */ -79,9,-67,1,46,-18,74,-4,-10,91,-127,83,-12,-44,-76,-42, 
  /* [29][0][][] */ -53,-9,0,127,-16,71,10,-31,-26,10,-85,35,-37,-56,-3,-36, 
  /* [30][0][][] */ -15,-55,127,-37,61,60,-51,19,-44,0,92,-23,-52,-21,-43,77, 
  /* [31][0][][] */ 16,-94,32,-29,-21,-42,35,12,-9,35,127,19,-35,88,57,71, 
  /* [32][0][][] */ -12,47,-38,54,-127,32,-89,-39,-43,-51,-14,89,-1,58,24,87, 
  /* [33][0][][] */ 36,-41,30,99,2,-33,-50,-127,-85,34,110,-29,-1,-3,67,6, 
  /* [34][0][][] */ -10,20,57,20,80,24,-92,29,-15,127,-7,55,-73,-7,0,-55, 
  /* [35][0][][] */ 114,9,-30,-78,-55,-127,-8,-26,-36,16,-27,-39,118,-1,25,88, 
  /* [36][0][][] */ 57,-25,-127,-16,-38,39,-10,38,-22,-28,-29,0,21,6,20,18, 
  /* [37][0][][] */ 54,-9,90,16,-127,-22,53,-91,-46,90,-72,-31,9,-46,39,46, 
  /* [38][0][][] */ -51,73,53,38,-12,85,14,-3,44,-66,127,12,30,49,30,-56, 
  /* [39][0][][] */ -2,15,12,43,34,3,-127,33,0,-6,-4,-88,10,-17,23,-5, 
  /* [40][0][][] */ -81,-28,29,127,57,110,61,8,-13,14,27,50,-7,91,-27,2, 
  /* [41][0][][] */ 6,27,-33,-23,-37,-47,127,31,-30,24,-29,3,25,7,-9,-2, 
  /* [42][0][][] */ -8,-16,55,-11,8,115,-6,98,56,-127,53,-20,-40,33,-12,-34, 
  /* [43][0][][] */ -4,34,-46,-80,-7,-39,-127,-113,44,12,-44,16,-120,-51,38,-35, 
  /* [44][0][][] */ -17,-10,-40,-23,-60,-45,8,-58,127,33,36,90,-1,88,28,2, 
  /* [45][0][][] */ -5,-32,-18,-115,-47,-48,-127,-37,-11,-23,-56,-69,31,-4,-37,127, 
  /* [46][0][][] */ -14,71,-36,68,-97,-8,20,-38,-127,73,-65,-29,3,34,-32,-19, 
  /* [47][0][][] */ -16,-31,-35,127,-52,48,27,-3,31,58,18,50,4,-40,44,29, 
  /* [48][0][][] */ -44,-67,72,-81,23,10,13,38,-65,90,70,32,-16,127,114,2, 
  /* [49][0][][] */ -53,93,23,-23,-54,54,3,-56,12,-22,-127,-66,8,-90,-73,-111, 
  /* [50][0][][] */ 80,110,-14,-117,127,20,30,71,126,18,-37,12,4,-41,-51,94, 
  /* [51][0][][] */ 8,26,12,-32,70,29,-37,-127,25,-66,10,10,-26,-5,-26,-29, 
  /* [52][0][][] */ -4,15,-27,56,54,-24,-33,127,-80,127,-62,-35,92,105,0,-66, 
  /* [53][0][][] */ -20,64,32,-44,-12,-20,44,0,-105,-36,-53,52,12,-127,-54,-37, 
  /* [54][0][][] */ -12,15,13,3,53,-3,36,-38,16,54,7,11,-10,127,-44,-27, 
  /* [55][0][][] */ -46,127,-2,-30,67,-10,-44,-1,-59,-15,34,-11,-23,-5,77,14, 
  /* [56][0][][] */ -11,5,23,-44,82,28,53,-47,60,-11,81,127,-83,24,102,92, 
  /* [57][0][][] */ -23,-10,26,44,-12,25,8,127,-1,39,-16,-34,-24,27,-14,-56, 
  /* [58][0][][] */ -15,127,1,-108,0,31,15,39,14,-15,10,74,-26,-77,22,99, 
  /* [59][0][][] */ 23,46,89,-105,-84,24,29,-53,16,112,58,-31,-66,-127,-50,-38, 
  /* [60][0][][] */ -8,14,127,-50,-17,93,7,-7,10,33,-7,17,3,-11,34,-12, 
  /* [61][0][][] */ -36,24,-41,-51,0,77,85,127,-39,77,21,15,-16,74,47,-35, 
  /* [62][0][][] */ -18,38,-48,-59,-79,79,-41,35,-96,19,15,-90,31,-103,127,27, 
  /* [63][0][][] */ 45,-28,-16,-42,21,5,-24,-127,-61,73,-27,6,11,3,-13,-54, 
  /* [64][0][][] */ -26,-6,20,28,76,1,-32,-127,19,-95,-18,-38,80,-33,-14,-17, 
  /* [65][0][][] */ -127,33,9,-61,3,56,17,-60,-85,-18,-13,-38,-17,17,-46,-47, 
  /* [66][0][][] */ 17,-7,75,22,-60,-1,10,12,-30,21,20,-63,-61,49,-127,-22, 
  /* [67][0][][] */ 55,-47,-17,31,58,-62,-36,-127,11,-77,-38,41,-92,-60,-86,14, 
  /* [68][0][][] */ 66,-27,-127,44,37,-82,-1,-60,18,39,29,27,-31,60,57,-101, 
  /* [69][0][][] */ -43,43,7,63,-19,-98,29,43,9,12,-9,-7,127,-55,22,53, 
  /* [70][0][][] */ 27,19,-49,-39,-13,9,127,67,-62,47,6,-5,-49,53,79,1, 
  /* [71][0][][] */ 26,56,-69,-90,-3,-77,24,13,-46,8,38,-18,15,-127,69,57, 
  /* [72][0][][] */ -27,127,14,76,-7,-36,-107,-106,-14,-27,-95,-16,46,79,17,10, 
  /* [73][0][][] */ -8,-127,-66,-46,-38,-28,40,-57,-14,0,-35,46,-8,-71,112,-5, 
  /* [74][0][][] */ -13,31,43,50,-4,8,-127,67,10,-59,0,-91,17,-4,-68,-15, 
  /* [75][0][][] */ -68,24,-3,27,-20,88,69,127,2,41,7,-26,-59,41,6,-3, 
  /* [76][0][][] */ 35,40,7,-84,-43,-29,-127,-99,-96,11,-79,-117,-1,-12,46,0, 
  /* [77][0][][] */ -13,30,-72,-50,-46,-13,-17,-66,127,12,-49,-11,1,60,54,-103, 
  /* [78][0][][] */ -80,-126,-46,113,59,81,-86,-2,-23,-42,-127,-4,41,-28,68,14, 
  /* [79][0][][] */ 127,-11,49,-106,99,-116,80,9,124,42,51,-33,74,-31,60,-90, 
  /* [80][0][][] */ -65,-40,93,-68,-16,-27,8,3,-11,-19,38,-61,1,127,-36,39, 
  /* [81][0][][] */ -22,-54,87,66,-37,127,-47,-33,-76,35,-10,-39,-47,-28,-121,6, 
  /* [82][0][][] */ -80,-8,1,-98,-53,-53,-6,-32,-27,3,-50,-68,-24,-88,-127,-7, 
  /* [83][0][][] */ -57,44,-67,-89,-15,27,-48,-19,-92,39,52,-127,15,-91,-10,27, 
  /* [84][0][][] */ 127,42,13,25,-25,10,-71,23,-51,-22,91,-41,-40,4,48,-94, 
  /* [85][0][][] */ -24,23,72,-29,-1,-15,32,99,-78,-127,-53,-55,16,99,113,-80, 
  /* [86][0][][] */ -57,-25,102,22,-70,92,66,72,-71,-51,18,-18,-18,-127,-88,-30, 
  /* [87][0][][] */ 127,-55,24,-31,-68,-2,5,33,-12,-26,-113,-30,75,16,-19,81, 
  /* [88][0][][] */ -17,57,-43,-1,38,-43,52,12,42,-30,31,77,-11,-71,127,-77, 
  /* [89][0][][] */ 41,74,-117,17,-67,-109,52,-18,68,-1,-81,5,43,22,-21,-127, 
  /* [90][0][][] */ -98,-19,-34,-39,-3,30,127,46,64,-101,23,-83,56,13,-105,6, 
  /* [91][0][][] */ -35,14,13,-118,-44,-6,77,-21,-19,-2,127,42,110,17,11,114, 
  /* [92][0][][] */ 16,-13,41,-9,29,-17,-98,-127,45,-38,8,-28,-26,-24,22,-12, 
  /* [93][0][][] */ 31,-15,43,-68,42,21,2,77,65,-86,65,77,-50,127,5,7, 
  /* [94][0][][] */ -94,29,-127,-11,104,-126,61,-65,0,-30,107,-14,-7,-59,-40,20, 
  /* [95][0][][] */ -16,25,-10,-127,-21,-69,-43,-5,-18,-45,-68,-90,-27,9,-46,-15, 
};
const TfArray<96, float> quant13_scale = { 96, { 0.00068611599272117019, 0.00044974021147936583, 0.00043294631177559495, 0.00029629503842443228, 0.00047361908946186304, 0.00096689519705250859, 0.001232602633535862, 0.0004343758337199688, 0.00021437535178847611, 0.00081232789671048522, 0.00075638428097590804, 0.00084913038881495595, 0.00048551193322055042, 0.00049816188402473927, 0.00027078477432951331, 0.0010961230145767331, 0.00047577611985616386, 0.00060153583763167262, 0.00040192753658629954, 0.00071045674849301577, 0.00067106692586094141, 0.00074620987288653851, 0.00053301750449463725, 0.0015055208932608366, 0.0017415870679542422, 0.00078639207640662789, 0.00058341375552117825, 0.0006313600460998714, 0.000864091154653579, 0.00020593991212081164, 0.00019423014600761235, 0.00046971728443168104, 0.00065842777257785201, 0.00077867129584774375, 0.00058421678841114044, 0.00039272039430215955, 0.00085321214282885194, 0.0006365785957314074, 0.00035135785583406687, 0.0018076203996315598, 0.00038400467019528151, 0.00073843228165060282, 0.00015473995881620795, 0.00069602590519934893, 0.00032855814788490534, 0.00061611767159774899, 0.00073410395998507738, 0.00069737108424305916, 0.00018702898523770273, 0.00081513682380318642, 0.00048825101112015545, 0.00088233908172696829, 0.00074400653829798102, 0.00071161426603794098, 0.001229285029694438, 0.00066278112353757024, 0.00057981058489531279, 0.00032421731157228351, 0.0010849820682778955, 0.00044212926877662539, 0.00097156577976420522, 0.00027524741017259657, 0.00050755770644173026, 0.00067480385769158602, 0.00086145964451134205, 0.00062686856836080551, 0.00095370941562578082, 0.00070823787245899439, 0.00055060943122953176, 0.0009559991885907948, 0.0006495967973023653, 0.00031300770933739841, 0.00044431749847717583, 0.00052343436982482672, 0.0011921615805476904, 0.00084960402455180883, 0.0007889594417065382, 0.0006768567836843431, 0.00087254936806857586, 0.00045307312393561006, 0.00038535191561095417, 0.00026139913825318217, 0.00075015629408881068, 0.00038565939757972956, 0.0012722554383799434, 0.00067084986949339509, 0.0005505603039637208, 0.00016815599519759417, 0.00057078321697190404, 0.00040141274803318083, 0.00055115338182076812, 0.0011520469561219215, 0.00064025097526609898, 0.00059664843138307333, 0.00054645806085318327, 0.00048480046098120511, } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -11612, 19635, -10978, 8060, 27674, 9260, -1383, 442, 26636, -14722, 19409, 25454, -14996, 14750, 30574, -25495, };
const TfArray<16, float> quant14_scale = { 16, { 0.00040235440246760845, 0.00026796763995662332, 0.00026239242288284004, 0.00018965279741678387, 0.00024166762887034565, 0.00028701758128590882, 0.00026150478515774012, 0.00027947471244260669, 0.00017226164345629513, 0.00023687253997195512, 0.00030532156233675778, 0.00049443909665569663, 0.0004011318669654429, 0.00036807780270464718, 0.00045399332884699106, 0.00029273706604726613, } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -9,17,-20,13,43,77,-47,2,18,3,5,6,12,3,18,71,7,9,7,-14,95,9,12,-16,-22,-14,-30,-69,-31,3,59,40,71,-6,2,8,17,-14,-14,10,-23,27,32,-50,18,-27,-8,9,24,11,-12,-4,-29,-8,9,2,43,26,-17,-2,-41,34,10,4,18,-1,54,1,16,13,10,-6,-52,36,22,-17,1,-68,-1,-18,44,-6,-27,-33,29,9,-1,21,2,7,34,-46,-7,14,-15,127, 
  /* [1][0][][] */ 77,-76,62,54,-14,-27,-31,-76,-7,-53,38,-34,21,-58,-61,-53,-127,-6,38,2,-34,-123,-57,-24,93,-48,-55,55,-20,114,20,34,-36,-18,-82,6,-17,5,28,-45,10,-59,7,-55,-22,7,62,-20,3,22,35,-38,52,-111,25,18,5,16,-17,-78,38,-69,-8,-52,46,-98,8,34,15,11,-32,5,-90,68,28,64,0,86,11,-65,-12,-30,-50,30,-98,32,-48,67,-49,39,0,22,-13,-35,-32,0, 
  /* [2][0][][] */ -6,4,13,-37,-16,-56,-27,59,47,-25,-1,89,-20,16,67,-31,19,-21,9,25,-25,-4,19,31,16,-7,-7,51,-28,-5,53,-62,11,-43,-34,-11,19,127,-67,2,21,-47,-16,54,-74,-48,-72,30,17,29,-13,-25,38,24,-5,-19,-38,4,35,2,-34,29,87,123,26,-30,-24,-93,9,-26,-3,1,5,-27,-37,-5,17,54,17,35,45,107,22,-30,18,18,39,0,27,-4,4,-54,-19,-13,36,43, 
  /* [3][0][][] */ -43,-45,-57,17,22,-26,-17,37,3,29,-11,27,22,-23,58,-27,38,-39,9,18,-35,21,-20,21,-44,56,25,-8,13,-68,37,-30,6,-34,-3,38,-20,21,-8,42,56,-66,53,-12,-27,-8,-17,53,-110,23,-49,34,-127,44,-34,-18,23,26,15,39,-12,26,10,52,-19,-35,-29,-11,50,44,41,26,-10,-37,-55,-43,-33,-79,28,-7,32,-19,13,46,94,71,47,8,59,-37,14,-2,-1,13,44,7, 
  /* [4][0][][] */ 1,-38,10,-88,-16,-58,-15,42,-73,-74,-81,-26,9,92,32,44,49,-21,-11,-13,11,21,62,2,-38,-44,33,54,-20,1,-21,-27,-65,45,26,72,7,-53,-19,13,-1,8,-87,-68,40,-29,-36,-5,27,33,51,9,-60,-8,20,18,27,-26,4,71,-8,25,18,-64,37,-127,25,-28,-61,60,-13,1,-23,6,-18,55,-9,53,28,-58,-2,-25,112,-60,57,-44,22,8,90,50,76,5,-40,33,-27,-14, 
  /* [5][0][][] */ -7,4,-19,-6,-23,-27,23,87,43,-18,-32,-11,-9,22,53,6,-5,-10,-20,-35,-44,14,-15,-38,10,-32,24,70,58,-14,38,37,-65,2,6,-11,-53,-34,-31,-16,-34,3,1,23,30,14,-5,18,22,-16,-2,12,-27,10,-3,19,-10,-46,-18,33,-61,34,-24,-40,-13,13,-33,-5,-5,18,26,20,7,-7,-15,-9,-10,22,-1,105,-14,-65,24,14,3,0,60,-42,-2,-29,39,-127,-20,-26,-10,-88, 
  /* [6][0][][] */ 1,3,-23,-23,35,4,-29,-30,6,24,9,2,32,-31,13,-3,5,7,26,17,-27,35,-44,-2,59,12,9,-4,60,-22,3,-24,-9,-30,-16,6,36,-7,33,-11,19,1,-27,22,-11,-18,54,-127,15,30,-22,-19,11,-5,-14,-39,-14,3,49,-4,40,-1,-20,7,21,49,25,-41,-14,-6,15,-14,-21,26,34,-11,-30,53,15,59,-15,10,78,-7,-4,58,19,-45,15,-50,-64,20,-11,32,6,10, 
  /* [7][0][][] */ 30,7,36,-6,5,8,-16,-64,10,13,-11,-12,-8,-87,53,-12,11,-1,10,-59,-26,0,-68,-13,-40,-12,13,2,35,-13,3,-22,-8,-46,-11,-41,8,-42,-25,-6,40,16,-4,56,-4,-3,13,54,14,17,-79,-16,-31,32,5,-72,-2,-12,1,8,-2,-4,-30,16,-6,56,4,-53,-20,-35,14,36,-20,-32,-37,-8,21,13,29,29,66,-27,20,5,-11,127,21,6,-55,-39,-28,32,-45,22,0,16, 
  /* [8][0][][] */ -102,41,-104,-11,41,4,23,17,20,80,-33,-8,23,35,114,-13,27,22,-106,51,31,28,-35,-52,-83,3,41,-8,59,-127,-45,18,25,-17,-4,12,0,11,-59,20,61,22,91,-82,-18,5,23,-25,-81,-3,-11,111,-94,83,-18,20,66,19,6,-25,30,-65,74,9,-46,30,50,12,12,22,14,94,-61,7,37,51,10,-108,7,-89,-13,10,46,6,-4,34,55,-46,25,27,8,6,70,-24,61,-8, 
  /* [9][0][][] */ -6,-66,-13,-8,20,20,-45,21,31,1,5,12,-31,-24,-2,14,7,-6,5,-11,-51,-10,4,-48,27,28,3,-46,-9,-45,1,-20,61,-12,-6,5,0,36,-25,28,22,0,-5,-38,12,1,82,-75,-27,25,-41,19,-15,39,-22,1,-35,8,-1,-1,30,1,31,41,11,127,23,38,0,-1,13,-24,19,-34,-52,-4,12,-5,18,31,23,5,24,-23,37,76,-3,16,-31,10,-58,6,15,17,42,-24, 
  /* [10][0][][] */ 30,27,-11,24,58,-127,-31,-4,3,54,43,33,-30,-6,46,-111,65,7,-53,48,-60,6,-7,14,-72,23,-26,47,-25,8,17,43,-10,-35,16,-11,75,-15,-78,19,5,80,64,-29,-88,0,-84,-9,-1,-22,-20,-10,3,8,0,-44,17,5,7,0,-39,20,-20,71,-6,28,24,22,32,-8,27,47,-21,-33,-38,4,-15,14,18,-7,10,-30,-40,-24,66,-64,102,27,21,24,27,-11,112,27,-56,-94, 
  /* [11][0][][] */ 42,38,-32,13,-23,22,88,3,-2,-11,-31,-12,22,26,50,-17,12,-2,-127,-23,-9,37,3,-25,-67,-41,-3,4,18,3,-18,-18,-11,-19,27,21,14,28,-5,27,-2,9,82,-74,3,-26,6,15,-127,-12,11,-35,3,-9,-9,45,-5,-28,9,29,6,-23,-13,14,-44,61,1,13,28,36,69,22,-80,-36,6,42,7,-25,-54,4,6,-22,96,41,17,-11,44,-11,23,15,17,7,16,18,-54,32, 
  /* [12][0][][] */ -31,-11,29,4,-1,58,-5,23,127,-2,22,16,-11,4,-53,0,22,33,23,36,32,18,-23,-24,5,44,9,-14,-69,0,27,-42,31,-48,24,-17,20,-2,24,-20,-9,-23,-7,23,19,18,16,-1,20,22,-68,-3,-3,-23,7,-2,43,-2,9,7,10,-6,31,-1,19,24,-10,-26,22,-3,8,-9,23,16,-45,-25,15,22,10,-18,37,26,21,39,14,28,-27,-9,11,5,-24,49,-5,-2,27,10, 
  /* [13][0][][] */ 36,-5,-26,8,49,-26,-8,-13,-7,-9,20,-4,-17,-6,17,-3,29,-86,-72,-3,-28,-17,6,-1,-12,30,-11,-15,-5,-51,-26,33,41,-17,40,56,12,-13,-36,17,53,33,14,42,26,48,-11,-127,32,31,-18,3,-34,15,25,-25,2,-6,37,14,-9,32,18,1,-29,13,5,-89,9,9,-25,-67,-7,17,-28,37,-24,-16,15,-2,12,-16,-30,31,69,68,22,-11,-23,-3,24,-7,27,16,3,-21, 
  /* [14][0][][] */ -68,-75,43,52,8,-51,-10,-47,-25,-40,41,28,72,-7,-118,-2,100,-41,-27,12,25,-53,18,85,-123,23,-12,-20,-52,-54,-36,37,-10,99,34,-6,74,59,-34,-4,2,45,-25,-58,9,127,33,44,-83,48,82,49,-20,-13,9,-21,33,12,53,66,32,91,-11,21,-17,-42,-46,93,-30,92,-91,-70,-50,32,36,38,-18,44,85,14,-12,-27,36,21,28,0,45,30,26,73,79,23,3,-5,-21,-86, 
  /* [15][0][][] */ 90,-7,22,-20,15,38,71,-35,-13,44,7,-1,-95,16,4,39,22,42,21,-56,9,38,-108,70,28,-36,31,10,40,45,-70,-82,11,5,108,17,41,-37,-56,-127,-42,47,38,51,20,78,-16,-30,124,-38,-38,5,36,-75,28,-118,40,-64,9,72,-109,20,-42,-22,82,-10,-35,84,9,69,2,5,27,-10,-8,41,15,-61,59,7,-67,-52,6,74,-37,-2,71,-58,-6,-11,106,28,-83,39,-28,-9, 
};
const TfArray<16, float> quant15_scale = { 16, { 0.017100062221288681, 0.011388624086976051, 0.011151677928864956, 0.0080602439120411873, 0.010270874015986919, 0.012198247015476227, 0.011113952845335007, 0.011877674609422684, 0.007321119774132967, 0.010067082941532135, 0.012976165860891342, 0.021013662219047546, 0.017048103734850883, 0.015643306076526642, 0.019294716417789459, 0.012441325001418591, } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 10629, -11205, 2294, 83897, -2838, -4484, -5109, 5386, -1992, 1356, 4948, -898, 632, -7409, 4152, -1985, -1163, 18010, 27020, 2178, 2235, -7021, 1743, 771, 19227, -400, -2979, -2488, -6317, -7994, 6647, -11179, 4674, -1598, -561, 34610, 837, -4046, 18151, -1374, 83, 1200, -10766, -8851, -9145, 62901, 868, 18239, 32758, -13892, -29, 11466, 5847, -1029, -3524, 1769, -15634, 1576, 2641, -5844, 1290, -467, -13594, -1931, 1094, 13821, 32103, 24354, -11043, 485, -5318, -1002, 45532, 9232, 120, -2052, 16138, 38905, -2871, -8361, -491, -7175, 686, -3423, 582, -436, 1433, -1089, 2721, -1227, 666, 217, 3056, 1987, 1397, 45334, };
const TfArray<96, float> quant16_scale = { 96, { 0.00013939816562924534, 9.1066111053805798e-05, 0.00023009823053143919, 2.6236542908009142e-05, 0.00014258007286116481, 0.00016246426093857735, 0.00041183663415722549, 8.9858142018783838e-05, 0.00017654456314630806, 0.00043576772441156209, 0.00017905296408571303, 0.0002852112811524421, 0.00012703302490990609, 0.00037084225914441049, 0.00026400244678370655, 0.00038188183680176735, 0.00010649007890606299, 0.00029446426196955144, 6.6041393438354135e-05, 0.00023651235096622258, 3.7243415135890245e-05, 0.00016123919340316206, 0.00013072034926153719, 0.0003824826271738857, 0.00018365257710684091, 0.00026582105783745646, 0.00012954330304637551, 0.00021239285706542432, 0.00010897518222918734, 0.00011060473480029032, 0.00012115143908886239, 0.00014566352183464915, 0.00012499894364736974, 0.00013952006702311337, 0.00022733716468792409, 6.9386609538923949e-05, 0.0004476793110370636, 0.00010801432654261589, 5.4266845836536959e-05, 0.00018462707521393895, 0.00019597505161073059, 0.00039204675704240799, 0.00033369075390510261, 0.00013385135389398783, 0.0001863315119408071, 4.4394746510079131e-05, 0.00021855217346455902, 0.00018842330609913915, 7.9556120908819139e-05, 0.00015907658962532878, 0.00026112765772268176, 0.00010023800859926268, 0.00025242159608751535, 0.0002979325654450804, 0.0003056603018194437, 0.00052098283777013421, 0.00024131173267960548, 0.00020899641094729304, 0.00010308826313121244, 7.7857548603788018e-05, 0.00036181180621497333, 0.00017553525685798377, 0.00026039947988465428, 0.00013411857071332633, 0.00020658262656070292, 0.00020773960568476468, 6.5758576965890825e-05, 7.1493108407594264e-05, 0.00035851830034516752, 0.00026919457013718784, 0.00023585821327287704, 0.00011928478488698602, 0.00013292845687828958, 0.00016245995357166976, 0.00018280108633916825, 0.00018573139095678926, 0.00040147616527974606, 5.0570637540658936e-05, 0.00023275743296835572, 0.00022507365792989731, 0.00017060962272807956, 0.00028999341884627938, 0.00019394584523979574, 0.00010976006160490215, 0.0001370363897876814, 0.00011888008884852752, 0.000122330806334503, 0.00019460773910395801, 0.00021455627575051039, 0.00010573579493211582, 0.00018207458197139204, 0.00013548965216614306, 0.0001354400155832991, 0.00052659801440313458, 0.00092631485313177109, 8.8681888883002102e-05, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -16,10,-19,112,-20,28,-69,-57,19,-3,100,-17,3,-13,0,48,4,14,-53,8,78,10,37,-30,3,21,45,40,23,20,21,57,-11,25,5,-12,8,57,-46,-35,25,9,27,16,-76,-49,29,-5,-9,-16,-8,-10,51,7,-16,2,0,-39,28,-21,26,-8,127,25,-12,-9,9,-47,65,35,-4,-11,74,-36,68,6,17,-127,30,67,0,23,127,-14,39,26,-38,-19,32,-14,-20,76,-4,17,-1,13, -47,19,-7,13,51,-2,-16,-127,41,13,-127,-14,-15,-17,8,83,11,-31,-7,-12,82,-99,127,33,-58,-30,-107,-19,31,39,-51,22,95,11,-12,1,-19,127,-63,-127,13,-21,-30,13,48,-127,127,-45,-75,55,52,3,43,-62,29,55,42,42,-105,86,127,35,3,-17,43,-37,-107,1,36,-33,-25,58,-49,-51,104,1,-27,-62,-35,72,-68,70,-15,8,-11,45,51,-38,-31,42,-12,73,-127,-33,22,-127, 1,1,-22,-73,9,21,32,14,-4,-4,-2,61,2,-13,-8,3,-22,18,-24,20,5,31,25,-28,0,-35,6,1,-4,11,44,-73,29,21,15,-21,14,4,-36,-25,8,2,-15,8,25,-31,23,-1,8,-6,6,-5,10,8,-7,10,-11,42,8,2,9,-25,3,-18,-27,-17,16,-49,-114,-7,39,-18,-127,-24,-3,22,9,-8,4,21,-18,20,-36,-8,-40,21,35,35,-27,-19,29,-1,13,6,2,-44, 
  /* [0][1][][] */ -40,60,-18,45,-88,-13,-11,-45,26,96,-46,-29,-29,-28,-9,61,127,-30,-104,-8,66,-127,-31,15,-35,-46,-123,-7,45,40,-49,31,-127,-80,-60,6,66,0,-43,46,-17,96,0,2,44,-47,-15,-30,127,46,-3,18,44,14,-44,-15,34,9,-127,127,-40,-97,26,127,-58,-35,-82,121,-39,127,-20,62,-35,-60,28,11,-35,-75,127,41,127,33,7,-1,127,26,-109,47,-37,-33,-110,40,87,98,32,-57, 127,127,127,127,-46,-127,127,20,127,-127,14,-127,-98,127,127,127,-17,-127,-49,-127,127,26,-60,127,127,127,-53,-127,127,127,-127,127,-17,-127,-117,127,-127,-47,102,109,-127,-127,127,127,127,-123,-106,127,-16,127,-127,-127,-127,127,127,-127,127,-127,-47,40,-118,-20,-63,-63,127,127,-70,127,127,-108,-127,127,-46,127,-127,-127,-127,126,-72,127,-47,127,82,127,-34,-127,-27,-103,-127,-123,-24,-127,-26,-127,-127,116, -22,69,-38,3,127,74,-28,43,4,23,-21,-6,-24,-29,-16,-7,-103,-26,-127,44,33,88,-11,-120,-36,-42,127,73,12,32,69,12,106,-51,127,-1,54,6,-91,8,34,26,-18,8,-14,-47,-10,-43,82,18,-12,35,-5,-1,-81,-11,22,19,124,-101,-1,127,0,-34,-103,-24,-79,101,9,-15,116,34,-23,-57,15,53,-29,-9,-39,-2,-51,0,42,25,-88,32,127,-45,30,-23,127,-6,-114,31,37,16, 
  /* [0][2][][] */ -4,-36,-21,-58,-4,19,40,26,4,10,-24,48,24,-33,-8,-5,41,6,6,18,-8,38,-30,-29,-1,-23,12,2,0,-6,49,-71,-37,85,-30,-24,31,-37,-74,21,9,15,-34,24,17,-80,-13,0,-9,5,21,-9,6,3,-27,10,-6,44,-57,38,-10,-13,11,20,-6,-14,18,-63,-57,12,-27,-19,-108,-32,-3,20,16,-19,61,13,22,29,-41,16,16,24,-23,13,10,27,21,-4,15,36,-2,-29, -27,-9,-26,27,-40,76,-29,59,6,-7,40,-12,127,-3,-21,-20,-1,-48,-62,14,-17,90,-48,-113,-50,-52,102,77,19,44,49,5,-125,68,-9,-23,-27,-31,-127,1,44,-11,-15,34,-20,-60,-22,-48,-59,22,74,27,-9,-76,31,54,20,33,78,-59,15,-51,-2,2,21,-27,-127,-58,-7,-27,-56,17,31,-41,-28,-4,-40,18,-49,-2,48,33,16,16,7,59,-95,127,13,127,-31,-18,110,-23,46,75, -8,-21,-27,33,14,66,-50,8,3,-7,-6,9,9,-46,-10,-12,-40,-2,8,20,-28,17,-26,1,-8,24,-1,50,-3,-2,34,33,12,53,25,-22,-7,-31,-34,7,10,-9,25,11,-61,-22,-11,3,2,-14,4,-6,-6,11,-22,-2,-1,-47,5,-34,-22,56,10,-32,-9,-3,31,-59,43,10,60,-30,22,-48,-16,24,10,7,4,19,-33,26,82,-13,-14,45,44,-5,108,13,-1,-17,5,-24,-7,-50, 
};
const TfArray<96, float> quant17_scale = { 96, { 0.0059244218282401562, 0.0038703095633536577, 0.0097791748121380806, 0.0011150530772283673, 0.0060596531257033348, 0.0069047310389578342, 0.017503056675195694, 0.0038189711049199104, 0.0075031435117125511, 0.018520127981901169, 0.007609750609844923, 0.012121479026973248, 0.0053989035077393055, 0.015760796144604683, 0.011220104061067104, 0.016229977831244469, 0.0045258281752467155, 0.012514730915427208, 0.0028067592065781355, 0.01005177479237318, 0.001582845114171505, 0.0068526654504239559, 0.0055556148290634155, 0.016255510970950127, 0.0078052342869341373, 0.011297394521534443, 0.005505590233951807, 0.0090266959741711617, 0.0046314452774822712, 0.004700701218098402, 0.0051489360630512238, 0.0061906995251774788, 0.0053124548867344856, 0.0059296027757227421, 0.0096618290990591049, 0.0029489309526979923, 0.019026370719075203, 0.0045906086452305317, 0.0023063409607857466, 0.007846650667488575, 0.008328939788043499, 0.016661986708641052, 0.014181856997311115, 0.0056886821985244751, 0.0079190889373421669, 0.0018867767648771405, 0.0092884674668312073, 0.0080079901963472366, 0.0033811351750046015, 0.0067607550881803036, 0.011097925715148449, 0.0042601153254508972, 0.010727917775511742, 0.012662133201956749, 0.012990563176572323, 0.022141769528388977, 0.010255748406052589, 0.0088823474943637848, 0.0043812510557472706, 0.0033089458011090755, 0.015377001836895943, 0.0074602481909096241, 0.011066977865993977, 0.0057000392116606236, 0.0087797613814473152, 0.0088289333507418633, 0.0027947395574301481, 0.0030384568963199854, 0.015237027779221535, 0.011440768837928772, 0.010023973882198334, 0.0050696032121777534, 0.0056494595482945442, 0.0069045480340719223, 0.0077690458856523037, 0.0078935837373137474, 0.017062736675143242, 0.00214925198815763, 0.0098921908065676689, 0.0095656299963593483, 0.007250908762216568, 0.012324719689786434, 0.0082426983863115311, 0.0046648024581372738, 0.0058240462094545364, 0.0050524035468697548, 0.0051990593783557415, 0.0082708289846777916, 0.0091186417266726494, 0.0044937711209058762, 0.0077381692826747894, 0.0057583102025091648, 0.0057562007568776608, 0.022380415350198746, 0.039368379861116409, 0.0037689802702516317, } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 12137, 1310, 8836, -653, 6618, 5258, 17631, 7719, -3104, 25023, 7066, 2641, 9150, 37252, -2293, -4573, 8058, 15933, 2973, -495, -1220, 15097, 9131, 3055, 6328, 7936, 6073, 4155, 232, -46, 6544, 11466, 22891, 3580, 5950, -1052, 18961, 8439, 947, 5173, 1034, 13937, 16852, 3779, 3343, 16492, 15361, 10218, 4703, 6664, 227, -1101, 24296, 11673, 10980, 18245, -88, 4818, 3412, 6322, 14822, 10917, 3065, 10685, 6226, 4952, 6458, -258, 24452, 9094, 10759, -2099, -989, 5535, 4628, 3364, 25204, 26642, 20591, -2954, 6815, -6679, -2893, 635, 10488, 7645, 7560, 6787, 11760, 3408, 9161, 5764, 12145, 36327, -7979, 20458, };
const TfArray<96, float> quant18_scale = { 96, { 0.00021461186406668276, 0.00031987324473448098, 0.00015156068548094481, 0.0009221933432854712, 0.00023899936059024185, 0.00018023143638856709, 0.00018332166655454785, 0.00046120549086481333, 0.00020460886298678815, 7.5722156907431781e-05, 0.000200853799469769, 0.00032419917988590896, 0.00027726715779863298, 0.00012811433407478034, 0.00014053459744900465, 0.00021678082703147084, 0.00025938087492249906, 0.00014652615936938673, 0.00016874269931577146, 0.00040466873906552792, 0.00025374247343279421, 0.00015906937187537551, 0.00017439620569348335, 0.00026195883401669562, 0.00026776664890348911, 0.00026523417909629643, 0.00022823356266599149, 0.0002110788191203028, 0.0004423760692588985, 0.00032481638481840491, 0.00021853487123735249, 0.00016166208661161363, 8.1229518400505185e-05, 0.00035331660183146596, 0.00027756445342674851, 0.00033120563603006303, 0.00011941540287807584, 0.00031773760565556586, 0.00038499847869388759, 0.00016427665832452476, 0.00043321624980308115, 0.00013543295790441334, 0.00012654028250835836, 0.00019090651767328382, 0.0002811091544572264, 0.00019081578648183495, 0.00018408925097901374, 0.00016068917466327548, 0.00032151129562407732, 0.00014861421368550509, 0.0003485062625259161, 0.00056188803864642978, 0.00010873274004552513, 0.00014388213458005339, 0.00021660112543031573, 0.00010396732977824286, 0.00038617386599071324, 0.00036317028570920229, 0.00019962542864959687, 0.00026290767709724605, 0.00011353356239851564, 0.00013345488696359098, 0.00029267897480167449, 0.00025470161926932633, 0.00014862237730994821, 0.00023481226526200771, 0.00030064678867347538, 0.0002790829457808286, 0.00011422680108807981, 0.00012407504254952073, 0.00018339195230510086, 0.00028287930763326585, 0.00027960640727542341, 0.00023291011166293174, 0.00010015349835157394, 0.00035932069295085967, 9.1403206170070916e-05, 0.00016496404714416713, 8.1408797996118665e-05, 0.00043109309626743197, 0.0001688609627308324, 0.00032207078766077757, 0.00017801197827793658, 0.00035880776704289019, 0.00014256531721912324, 0.0002037723024841398, 0.00019852317927870899, 0.00020361138740554452, 0.00014542978897225112, 0.00045558376586996019, 0.00015459844144061208, 0.00032186007592827082, 0.00016337691340595484, 7.8083328844513744e-05, 0.00034354068338871002, 0.00016651181795168668, } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 76,28,92,47,8,-50,22,-65,83,25,-61,-127,2,55,5,-85, 
  /* [1][0][][] */ 17,92,2,10,127,11,19,10,45,90,4,95,16,-51,32,-76, 
  /* [2][0][][] */ -1,-127,79,58,-47,49,-51,45,20,-49,15,113,-51,-81,24,-112, 
  /* [3][0][][] */ 89,117,9,-2,-127,-19,-97,-28,-16,-2,91,-67,-54,81,-35,19, 
  /* [4][0][][] */ 13,-5,-34,21,-57,-38,-27,-1,-50,-38,-8,-46,-37,-127,47,-30, 
  /* [5][0][][] */ 72,-44,-39,15,25,-63,-28,0,3,15,-127,-34,38,19,15,8, 
  /* [6][0][][] */ -85,-29,3,15,-34,15,-36,13,-44,-81,-19,-76,51,50,8,127, 
  /* [7][0][][] */ 0,71,-106,49,16,-127,-48,23,-11,-14,-13,31,-8,10,-15,0, 
  /* [8][0][][] */ 7,-47,-35,19,11,-4,-57,-79,30,-12,-83,6,-127,23,24,2, 
  /* [9][0][][] */ -5,-70,66,127,-22,39,-12,-103,82,-76,6,-64,-36,40,-111,4, 
  /* [10][0][][] */ -86,5,41,9,127,88,42,69,88,-29,-38,107,18,-57,45,89, 
  /* [11][0][][] */ 50,-20,-127,41,-4,16,-45,31,-1,-35,-13,1,-24,10,-42,-37, 
  /* [12][0][][] */ 127,-49,19,-38,0,-28,-49,-37,78,-14,-125,-19,-54,-13,-17,4, 
  /* [13][0][][] */ -18,-44,84,-52,127,13,-24,-64,67,-65,104,64,45,31,9,-14, 
  /* [14][0][][] */ -53,59,-112,-23,6,-116,34,-88,63,72,-29,-127,34,112,50,70, 
  /* [15][0][][] */ -74,60,62,34,114,-67,7,33,28,-79,2,18,-127,-49,-53,49, 
  /* [16][0][][] */ -79,57,3,1,-11,50,28,70,-10,55,127,5,40,18,15,-26, 
  /* [17][0][][] */ -5,4,-43,-46,-4,43,29,107,-28,107,-10,0,-6,127,65,0, 
  /* [18][0][][] */ 36,83,-50,25,-13,6,47,-26,68,127,-111,119,40,-67,44,-91, 
  /* [19][0][][] */ 3,-10,93,8,-27,7,-27,-9,1,-11,-52,-23,-127,-32,31,10, 
  /* [20][0][][] */ 115,-47,-33,-110,-73,15,38,-43,-107,53,-127,-3,110,-40,3,19, 
  /* [21][0][][] */ 1,-60,127,35,-72,72,101,-15,-48,78,-14,-69,-49,-31,2,-36, 
  /* [22][0][][] */ 52,2,-33,26,4,-25,127,91,100,13,4,10,37,120,-109,21, 
  /* [23][0][][] */ -25,33,-127,37,8,-70,33,48,14,-15,8,25,-20,2,-21,10, 
  /* [24][0][][] */ 49,-68,-12,-22,26,17,6,-17,47,28,57,98,-34,79,127,66, 
  /* [25][0][][] */ -127,-79,-56,-31,60,102,32,24,-48,-54,-55,91,1,32,-1,41, 
  /* [26][0][][] */ -1,-3,48,-9,6,24,-15,75,-86,-91,3,35,1,-127,-25,-27, 
  /* [27][0][][] */ -83,24,-29,13,18,8,14,31,2,9,127,-5,4,5,-1,-5, 
  /* [28][0][][] */ 10,6,38,39,1,44,14,71,53,32,-33,-28,-127,-26,-25,35, 
  /* [29][0][][] */ -18,38,52,-40,17,-28,20,-31,-127,34,1,-10,49,1,-75,15, 
  /* [30][0][][] */ -20,-40,-127,-21,16,-73,2,23,-28,-2,8,-27,-82,-38,-9,-29, 
  /* [31][0][][] */ 127,-25,-110,-18,-30,4,-78,35,-55,6,-78,-58,-8,3,-65,46, 
  /* [32][0][][] */ -105,127,11,114,20,115,-21,48,85,-30,126,-7,-70,96,-36,-91, 
  /* [33][0][][] */ 10,-50,117,-26,-11,9,15,-70,-6,-10,32,-4,0,38,127,4, 
  /* [34][0][][] */ -35,-4,-26,-55,-9,6,2,-35,-41,-127,-9,-91,10,17,32,34, 
  /* [35][0][][] */ 8,-12,36,38,10,-4,59,-1,-127,90,-43,37,-18,120,-41,-76, 
  /* [36][0][][] */ -74,27,-6,3,-31,32,43,49,-13,37,127,-36,31,50,70,-3, 
  /* [37][0][][] */ -34,-21,127,-11,-63,-49,45,-19,22,28,-11,-13,33,-20,25,-2, 
  /* [38][0][][] */ 6,-18,9,25,-3,-20,-16,45,-4,-6,107,4,127,46,-13,0, 
  /* [39][0][][] */ -59,4,28,-45,-114,-29,127,119,-60,36,23,5,-5,14,91,100, 
  /* [40][0][][] */ 37,-16,-10,10,1,115,4,64,26,33,36,18,127,25,-27,-44, 
  /* [41][0][][] */ -15,-86,5,-91,-6,-2,-21,-114,-37,-127,22,-82,15,39,3,43, 
  /* [42][0][][] */ 33,-4,29,112,-126,64,-110,-24,-39,-10,82,-127,-101,111,5,-44, 
  /* [43][0][][] */ -1,68,-6,127,2,28,47,-80,-11,61,-25,17,-23,-11,19,26, 
  /* [44][0][][] */ 21,-39,-127,-5,36,111,-36,42,-12,44,86,-36,-14,-69,-48,25, 
  /* [45][0][][] */ 50,19,-65,-127,-11,-32,27,-38,27,32,-26,-42,-6,-61,82,-52, 
  /* [46][0][][] */ -1,28,19,7,11,-51,-50,58,-38,-102,-54,2,-93,98,59,-127, 
  /* [47][0][][] */ 28,-27,-3,-36,-57,10,-55,46,-36,8,17,34,14,-127,34,22, 
  /* [48][0][][] */ 16,-14,-7,-127,-8,-20,8,7,10,-30,12,2,20,41,-51,54, 
  /* [49][0][][] */ -6,-8,12,116,127,16,44,113,-88,48,58,66,-36,45,118,-30, 
  /* [50][0][][] */ -25,-4,57,-28,26,127,-51,-36,-19,-63,83,29,40,20,-38,-34, 
  /* [51][0][][] */ 127,96,-16,-43,59,-63,-68,-26,51,24,3,91,73,33,60,-62, 
  /* [52][0][][] */ -28,127,101,-24,-14,-37,60,-32,-110,-12,2,26,15,59,-69,41, 
  /* [53][0][][] */ -26,-31,-52,-127,-18,-36,-89,-62,-23,-24,-2,-63,-24,-25,118,47, 
  /* [54][0][][] */ -4,-46,1,1,14,17,-15,24,70,-11,9,-4,-36,127,9,-10, 
  /* [55][0][][] */ -20,36,-29,61,48,4,-66,-127,41,-104,-66,23,9,-50,11,-28, 
  /* [56][0][][] */ 48,23,13,84,-10,-13,8,127,18,-16,-31,-9,50,6,-55,36, 
  /* [57][0][][] */ 27,22,127,-8,-2,-43,12,-26,6,-11,-48,32,20,-12,65,-30, 
  /* [58][0][][] */ 110,123,10,124,-127,66,49,87,65,110,53,-56,-99,-19,-74,-97, 
  /* [59][0][][] */ 124,-9,-18,16,-57,-29,-17,0,12,54,-127,9,-20,-25,-29,-7, 
  /* [60][0][][] */ -127,83,-18,-24,-24,-18,57,35,-59,38,81,-38,-78,-31,25,-47, 
  /* [61][0][][] */ -64,10,98,25,-25,35,-85,-39,48,-93,104,1,127,38,-78,70, 
  /* [62][0][][] */ -21,-49,-127,26,125,-26,6,98,5,-36,6,25,-40,45,-119,-3, 
  /* [63][0][][] */ -73,-4,127,-61,-63,-85,109,-23,12,19,3,58,49,-25,101,54, 
  /* [64][0][][] */ 65,14,-81,-6,42,0,16,-77,-31,83,-7,-26,-66,-127,53,44, 
  /* [65][0][][] */ -21,42,59,-17,100,12,-16,-127,-34,-101,-54,-53,-19,-26,77,-2, 
  /* [66][0][][] */ -127,12,6,3,-39,39,7,-24,-61,-9,-52,60,34,4,45,67, 
  /* [67][0][][] */ -38,-57,70,127,13,73,-108,91,-3,17,74,7,-57,-20,-95,-15, 
  /* [68][0][][] */ -11,-8,14,127,-61,1,-3,-8,-65,27,-4,-36,-25,-60,-29,-8, 
  /* [69][0][][] */ 94,111,-32,92,31,16,58,-127,14,105,32,51,-59,-47,42,70, 
  /* [70][0][][] */ -12,40,-96,-127,93,-33,-48,19,126,29,-2,15,15,48,10,62, 
  /* [71][0][][] */ 30,80,26,72,46,-119,16,127,26,-97,17,2,67,-57,-35,40, 
  /* [72][0][][] */ -96,-70,-51,13,-5,19,-57,-14,-58,-51,-94,-8,49,23,13,127, 
  /* [73][0][][] */ -40,-65,125,127,-11,115,30,-51,75,23,20,31,24,82,-102,-47, 
  /* [74][0][][] */ 65,34,-71,-95,-49,-28,18,1,-99,4,-127,21,-93,-126,-5,57, 
  /* [75][0][][] */ 2,-17,-80,127,-8,47,-22,-32,-27,21,1,4,1,-40,57,-35, 
  /* [76][0][][] */ 22,-7,-50,57,51,9,-59,-117,72,-127,-33,16,-34,19,44,-29, 
  /* [77][0][][] */ 127,-107,69,104,-85,9,-87,-39,122,13,-118,101,-53,30,-73,-15, 
  /* [78][0][][] */ -18,-16,127,31,24,-23,-64,73,116,-31,-10,-25,68,107,44,-57, 
  /* [79][0][][] */ 8,30,41,-11,53,73,-46,-45,29,-35,59,2,127,-23,-38,-33, 
  /* [80][0][][] */ -88,-60,-107,51,53,-48,-42,-44,-64,-63,-53,5,9,-127,-28,76, 
  /* [81][0][][] */ 55,-28,-4,76,83,10,-28,1,10,-127,-49,-28,5,65,-57,14, 
  /* [82][0][][] */ 110,127,25,65,-88,-33,-48,11,-33,50,74,-46,34,69,19,-51, 
  /* [83][0][][] */ 127,59,14,-44,28,-8,-12,27,41,18,72,-2,-37,-29,-13,-54, 
  /* [84][0][][] */ 13,-27,-127,7,6,-42,-17,-126,-36,-93,-78,21,-26,-99,23,-36, 
  /* [85][0][][] */ 17,-27,-41,-13,-42,31,86,127,21,115,-59,33,67,78,50,0, 
  /* [86][0][][] */ 86,-33,-65,-4,28,-66,0,-29,13,6,-127,-17,2,38,10,26, 
  /* [87][0][][] */ 8,49,-15,-91,-36,49,-45,38,29,-60,9,4,4,-117,127,32, 
  /* [88][0][][] */ -26,-82,-16,4,65,37,46,-127,39,-43,-31,80,-38,-43,90,-7, 
  /* [89][0][][] */ 15,21,2,-127,15,45,-25,55,13,-62,33,32,-27,42,76,26, 
  /* [90][0][][] */ 52,10,-73,47,6,10,57,-118,47,127,-78,69,23,-7,49,101, 
  /* [91][0][][] */ 6,2,-15,-39,-18,-127,5,-23,-39,-18,-26,-33,66,-42,57,-9, 
  /* [92][0][][] */ 38,45,66,28,119,-62,-63,62,26,0,-97,127,125,92,106,124, 
  /* [93][0][][] */ 127,1,-112,-53,11,-63,17,11,-51,15,-86,-12,5,-4,38,92, 
  /* [94][0][][] */ 6,43,28,36,127,-17,-47,84,-9,-60,42,109,-22,69,-64,-13, 
  /* [95][0][][] */ -101,22,31,65,7,57,47,-15,-35,1,127,-22,-6,11,3,-15, 
};
const TfArray<96, float> quant19_scale = { 96, { 0.00077129196142777801, 0.0011495901271700859, 0.00054469279712066054, 0.0033142638858407736, 0.00085893803043290973, 0.00064773240592330694, 0.00065883836941793561, 0.0016575229819864035, 0.00073534226976335049, 0.00027213728753849864, 0.00072184699820354581, 0.0011651370441541076, 0.00099646835587918758, 0.00046042914618737996, 0.00050506624393165112, 0.00077908701496198773, 0.00093218701658770442, 0.00052659929497167468, 0.00060644315090030432, 0.001454335986636579, 0.00091192324180155993, 0.00057167821796610951, 0.00062676123343408108, 0.00094145192997530103, 0.00096232455689460039, 0.00095322314882650971, 0.00082024693256244063, 0.00075859460048377514, 0.0015898520359769464, 0.001167355221696198, 0.00078539084643125534, 0.00058099615853279829, 0.00029193016234785318, 0.0012697819620370865, 0.00099753681570291519, 0.0011903174454346299, 0.00042916613165289164, 0.0011419148650020361, 0.0013836431317031384, 0.00059039267944172025, 0.0015569326933473349, 0.00048673150013200939, 0.00045477220555767417, 0.00068609754089266062, 0.0010102761443704367, 0.00068577146157622337, 0.00066159700509160757, 0.0005774996243417263, 0.0011554770171642303, 0.00053410354303196073, 0.001252494053915143, 0.0020193653181195259, 0.00039077378460206091, 0.00051709695253521204, 0.00077844120096415281, 0.00037364740273915231, 0.0013878673780709505, 0.0013051950372755527, 0.0007174323545768857, 0.0009448619675822556, 0.00040802743751555681, 0.00047962251119315624, 0.0010518567869439721, 0.00091537024127319455, 0.00053413287969306111, 0.00084389006951823831, 0.0010804922785609961, 0.0010029941331595182, 0.00041051884181797504, 0.00044591238838620484, 0.00065909099066630006, 0.0010166378924623132, 0.0010048754047602415, 0.00083705392898991704, 0.00035994092468172312, 0.0012913600075989962, 0.00032849330455064774, 0.00059286307077854872, 0.00029257446294650435, 0.0015493022510781884, 0.00060686818324029446, 0.001157487859018147, 0.00063975591911002994, 0.0012895165709778666, 0.00051236443687230349, 0.00073233578586950898, 0.00071347097400575876, 0.00073175743455067277, 0.00052265904378145933, 0.0016373191028833389, 0.00055561016779392958, 0.0011567305773496628, 0.00058715906925499439, 0.00028062309138476849, 0.0012346482835710049, 0.0005984255694784224, } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -26159, 10222, 4280, -10139, -515, -4356, -17494, -53936, 8522, 19527, 37819, -19429, -3307, -23806, 31643, -34793, };
const TfArray<16, float> quant20_scale = { 16, { 0.0006358260870911181, 0.00062054413137957454, 0.0009843574371188879, 0.00096762989414855838, 0.00080585910473018885, 0.00091118359705433249, 0.00081868568668141961, 0.0004080423095729202, 0.00056012149434536695, 0.00047692915541119874, 0.00077539175981655717, 0.00052591244457289577, 0.0009104488417506218, 0.00111991330049932, 0.00053948152344673872, 0.00051864649867638946, } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -7,-26,-10,26,28,-10,28,85,-47,3,37,3,16,-18,-26,3,34,-22,-4,9,68,-27,22,127,-10,54,8,-21,30,-13,32,-17,-13,59,22,-50,12,39,1,-16,-84,-39,37,59,52,46,-104,-43, 
  /* [1][0][][] */ -45,-19,13,16,-21,10,9,66,-57,-50,-1,-41,-19,-12,-7,0,-13,127,-14,20,20,25,-32,-16,38,-53,9,13,-30,-116,-27,14,-21,5,35,3,4,-57,3,-19,-20,-54,120,11,17,-3,27,-5, 
  /* [2][0][][] */ -15,-12,3,-52,-6,-57,14,-19,8,6,2,22,14,3,-17,5,-6,-20,-11,-20,-1,-3,-1,-127,-9,82,-15,1,5,-20,-1,-10,-16,41,19,-1,11,16,22,7,-54,6,-8,-8,-13,0,20,0, 
  /* [3][0][][] */ -14,37,-12,-38,-18,5,21,-2,-15,-7,12,29,-127,11,-2,0,-8,12,-21,-6,-33,9,2,9,-2,-9,-6,29,0,22,16,20,10,-2,17,15,-15,33,43,25,6,15,32,-26,10,-3,4,30, 
  /* [4][0][][] */ 14,-61,7,4,35,38,18,-13,-35,8,-3,-32,4,14,-9,24,19,5,-86,-1,-13,6,12,62,-6,-38,3,56,17,-76,21,10,22,-47,29,-127,21,29,7,15,-31,23,1,-26,-25,-22,23,-10, 
  /* [5][0][][] */ 23,0,-44,56,2,-12,-10,29,2,8,45,6,14,60,28,2,-31,43,4,-11,1,1,-4,-25,-2,-35,-13,-22,8,-16,0,10,69,-127,9,23,-31,-16,22,6,-102,52,24,-2,-30,-10,-119,4, 
  /* [6][0][][] */ 29,4,0,-2,-8,-1,0,-13,-16,10,1,-2,-18,9,2,10,-6,-3,127,19,19,30,26,-33,22,13,39,-11,-20,-3,5,-14,-4,-15,24,-36,7,-29,78,14,3,2,-10,-3,8,-8,-3,7, 
  /* [7][0][][] */ -63,-15,-38,27,-35,103,-41,83,15,31,-8,123,82,18,-8,-4,-3,-42,-15,-37,-27,8,-22,72,-4,-39,-49,-25,-14,-29,-28,-21,3,-8,-16,-9,12,-94,127,6,20,34,-68,-69,5,-27,-14,8, 
  /* [8][0][][] */ -32,-50,4,22,10,-10,-22,24,-7,-79,18,41,52,-9,10,-1,14,72,-26,-8,-51,11,-10,3,-28,-12,12,47,-16,109,-2,26,5,22,-14,-105,-127,63,19,17,31,-15,112,-1,15,17,19,15, 
  /* [9][0][][] */ -29,20,-17,38,5,-29,15,-3,69,-86,4,78,-58,-15,32,10,-3,43,-9,-21,89,15,-8,-19,31,14,54,-44,49,13,14,18,-21,10,100,-118,-15,-127,-123,5,-38,51,105,22,3,33,-22,-33, 
  /* [10][0][][] */ -21,-1,-59,-127,31,73,8,-4,3,30,27,16,57,-51,-38,33,24,-14,45,-19,54,-28,39,40,-40,-74,7,-20,45,8,38,-27,-28,-67,10,2,-8,-36,3,-44,-38,-63,-10,6,4,23,8,-53, 
  /* [11][0][][] */ -27,68,-37,67,34,-54,-64,-4,21,46,10,-1,-15,59,-20,-95,36,35,3,-27,-70,-80,-2,-4,-4,-46,24,-28,44,-50,26,-96,90,-24,-8,-123,96,18,25,-117,-12,82,127,-53,-49,-49,36,45, 
  /* [12][0][][] */ 121,-14,-13,17,6,15,12,91,-1,-2,-45,-20,13,-13,-30,15,-7,16,3,17,0,4,21,25,-2,20,-1,11,4,11,-3,-29,-7,-68,-25,10,-18,-13,-31,-16,-5,-62,0,-127,-40,22,80,4, 
  /* [13][0][][] */ 6,1,-9,4,10,-3,-7,1,6,1,14,22,-9,1,14,-9,6,-3,11,-5,15,-6,10,-4,2,4,13,127,7,-6,-3,2,3,-2,-28,15,4,-5,9,-15,-16,3,5,1,-4,-11,-10,-17, 
  /* [14][0][][] */ 66,-15,35,-39,46,3,36,-97,-21,-38,-14,127,-54,-50,63,-3,42,43,-43,64,24,31,74,-1,30,54,-38,-90,24,-37,76,32,6,71,-124,-26,-35,43,54,-13,-20,15,44,8,1,-7,-4,-43, 
  /* [15][0][][] */ -27,-22,-61,-30,65,26,34,-61,-16,19,-7,-29,71,28,-69,40,29,52,65,-62,-92,-41,53,-21,-109,42,24,43,69,51,58,-45,39,33,90,127,5,-111,-25,-67,75,62,113,-57,-56,-39,-14,50, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.027022607624530792, 0.026373125612735748, 0.04183519259095192, 0.041124269366264343, 0.034249011427164078, 0.038725301623344421, 0.034794140607118607, 0.017341798171401024, 0.0238051638007164, 0.020269488915801048, 0.032954148948192596, 0.022351277992129326, 0.038694076240062714, 0.047596313059329987, 0.022927964106202126, 0.022042475640773773, } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 4200, 49468, -1355, 67848, 5249, 130339, -1169, 57139, 5434, 34009, 24729, 8939, -11454, 29664, 1297, -4158, 2, -892, 2349, -228, 269, -297, -1683, -21779, -2986, 47519, 131465, 103524, 3347, 7267, -326, 240, 25987, 1900, 59404, -11501, 70734, 5346, 35002, 2924, 3021, 68055, -376, 4175, 58572, -62, 971, 49632, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.544336793012917e-05, 3.6096098483540118e-05, 0.00017510935140307993, 4.2522387957433239e-05, 0.00012265794794075191, 5.6231448979815468e-05, 0.00013508474512491375, 0.00010366334754507989, 6.2390114180743694e-05, 3.7584606616292149e-05, 3.9736634789733216e-05, 6.6512198827695101e-05, 4.6308487071655691e-05, 3.5434430174063891e-05, 0.00014339368499349803, 0.00017634140385780483, 0.00012832405627705157, 8.8529937784187496e-05, 0.0001514180185040459, 0.00014148683112580329, 8.3453262050170451e-05, 0.00011783517402363941, 9.4269336841534823e-05, 0.00011093106149928644, 8.9027074864134192e-05, 8.8721812062431127e-05, 2.4690663849469274e-05, 7.1699680120218545e-05, 0.00014319790352601558, 9.1398709628265351e-05, 0.0001002298595267348, 0.00011651055683614686, 4.4540691305883229e-05, 0.00011104691657237709, 2.4106857381411828e-05, 6.1448212363757193e-05, 7.9820376413408667e-05, 7.8735843999311328e-05, 0.00016911003331188112, 8.6063890194054693e-05, 8.0372687079943717e-05, 8.4279119619168341e-05, 6.8681911216117442e-05, 7.9831159382592887e-05, 2.9367707611527294e-05, 0.00019430575775913894, 0.00010582446702755988, 2.5623627152526751e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 67,-105,107,71,52,-38,109,-70,67,-88,-81,49,56,-50,-81,-93,107,82,51,82,69,-76,-84,55,-38,-42,-65,-73,-71,61,-70,-115,-12,48,72,69,-63,55,-45,-21,50,-69,57,65,-98,10,85,-36, 78,-106,127,88,-82,-67,-62,-89,104,-100,-72,72,77,-98,-99,96,-40,100,83,127,82,-120,52,69,-57,-73,-71,-85,46,84,-32,-127,-87,82,81,86,-82,80,-75,-12,75,-95,78,85,-82,-127,100,-109, 39,-45,77,39,14,-41,-56,-43,48,-29,1,33,32,-74,-54,1,-54,38,35,70,41,-55,34,29,-35,-53,-39,-22,33,34,98,-89,-81,50,31,38,-31,39,-35,-9,42,-48,33,45,-11,-6,37,-86, 
  /* [0][1][][] */ 90,-126,-37,98,57,-86,127,-100,98,-111,-63,87,87,-112,-17,-127,127,109,77,-38,82,106,-127,76,76,-77,-92,-103,-127,89,-77,-8,-84,76,107,97,-85,81,-80,91,82,-99,93,96,-99,106,95,-91, 127,-127,-66,127,-127,-127,-97,-127,127,-127,-127,127,127,-127,-24,105,-61,127,127,-56,127,127,67,127,127,-127,-127,-127,51,127,-34,9,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-12,127,-127, 65,-92,-30,68,38,-61,-55,-70,63,-44,-53,63,53,-56,-13,17,-66,61,57,-34,58,68,56,66,62,-66,-63,-47,41,55,127,13,-59,67,50,53,-47,60,-62,57,59,-58,54,64,-59,-65,62,-67, 
  /* [0][2][][] */ 42,-67,-57,65,26,-52,67,-48,45,-71,-5,40,61,-70,80,-76,69,60,37,-34,26,-15,-75,37,-33,-44,-57,-56,-74,31,-41,91,-75,37,55,41,-26,45,-45,-92,49,-55,45,50,-28,18,42,-78, 73,-79,-55,83,-52,-62,-65,-70,58,-78,-64,63,75,-49,127,38,-45,68,64,-47,50,-18,40,69,-55,-71,-87,-68,29,63,-24,114,-60,65,63,58,-52,65,-71,-108,67,-70,68,68,-86,51,59,-46, 49,-54,-26,57,31,-16,-20,-37,22,-24,-58,30,36,0,70,29,-37,26,25,-35,30,4,47,48,-26,-26,-50,-26,35,37,62,68,-3,31,22,25,-22,33,-32,-58,29,-36,29,32,-64,10,36,-4, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0027813429478555918, 0.0015340842073783278, 0.007442147471010685, 0.0018072014208883047, 0.0052129626274108887, 0.0023898365907371044, 0.0057411016896367073, 0.0044056922197341919, 0.0026515796780586243, 0.001597345806658268, 0.0016888069221749902, 0.0028267684392631054, 0.001968110678717494, 0.001505963271483779, 0.0060942312702536583, 0.0074945096857845783, 0.0054537723772227764, 0.0037625222466886044, 0.0064352657645940781, 0.0060131903737783432, 0.0035467634443193674, 0.0050079948268830776, 0.0040064468048512936, 0.0047145700082182884, 0.0037836506962776184, 0.0037706769071519375, 0.0010493531590327621, 0.0030472364742308855, 0.0060859108343720436, 0.0038844451773911715, 0.0042597688734531403, 0.0049516987055540085, 0.0018929793732240796, 0.0047194939106702805, 0.0010245414450764656, 0.0026115491054952145, 0.0033923659939318895, 0.0033462732098996639, 0.0071871764957904816, 0.0036577153950929642, 0.0034158392809331417, 0.0035818624310195446, 0.0029189810156822205, 0.0033928242046386003, 0.0012481275480240583, 0.0082579944282770157, 0.0044975397177040577, 0.0010890041012316942, } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 904, 1126, 2814, 166, 8972, 17231, 1947, 358, -660, -920, 1198, 933, 3930, 870, 22391, 2724, 1999, -1635, -947, 4505, -1639, 8966, 9192, 11053, 5385, 347, 5329, 4658, 7711, -453, 8859, 4932, 466, -171, 4219, 5414, -1797, 20, -1466, 5188, 773, -768, -968, -164, 983, 2769, 585, 768, };
const TfArray<48, float> quant24_scale = { 48, { 0.00036106788320466876, 0.00077124778181314468, 0.00021324986300896853, 0.00044515321496874094, 0.00024386496806982905, 0.00022812116367276758, 0.00049072975525632501, 0.00022275505762081593, 0.0003769243776332587, 0.00068510888377204537, 0.00086985033703967929, 0.00030715440516360104, 0.00037139325286261737, 0.0007937842165119946, 0.00015947845531627536, 0.00044773725676350296, 0.00024681733339093626, 0.00031092326389625669, 0.00021360009850468487, 0.00022140267537906766, 0.0003590185078792274, 0.00028341094730421901, 0.0003871377557516098, 0.00014554226072505116, 0.00028846442000940442, 0.00029728750814683735, 0.0013105532852932811, 0.00040280408575199544, 0.00023349220282398164, 0.00044469739077612758, 0.00029235015972517431, 0.0002429122687317431, 0.00088836275972425938, 0.00025763141456991434, 0.00086019368609413505, 0.0003688197466544807, 0.00076036568498238921, 0.00038650305941700935, 0.00020105041039641947, 0.00035544717684388161, 0.00020884930563624948, 0.00025376115809194744, 0.00031480926554650068, 0.00025370132061652839, 0.0020150160416960716, 0.00046053633559495211, 0.00031801004661247134, 0.00129858055151999, } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,5,-2,68,-33,43,20,-32, 
  /* [1][0][][] */ 60,85,9,53,-66,94,127,114, 
  /* [2][0][][] */ -81,-29,-19,-16,-127,-8,15,-11, 
  /* [3][0][][] */ 63,-4,12,-83,-127,32,38,-21, 
  /* [4][0][][] */ -127,39,-26,40,16,-46,71,50, 
  /* [5][0][][] */ -111,-33,24,-8,-127,13,-1,100, 
  /* [6][0][][] */ -17,-127,16,-12,-15,-15,-4,41, 
  /* [7][0][][] */ -87,-16,0,127,110,-34,-45,9, 
  /* [8][0][][] */ 65,25,27,-127,7,4,-44,-52, 
  /* [9][0][][] */ -20,-114,-12,-5,-18,127,-65,67, 
  /* [10][0][][] */ -88,-4,-26,62,-127,88,64,-39, 
  /* [11][0][][] */ 127,9,27,21,-62,-45,-56,-108, 
  /* [12][0][][] */ 2,12,20,-1,6,-64,127,60, 
  /* [13][0][][] */ 71,-31,-43,-5,110,127,102,-51, 
  /* [14][0][][] */ 96,69,-5,-2,-127,-26,-16,-10, 
  /* [15][0][][] */ -20,-127,35,2,-8,23,-5,9, 
  /* [16][0][][] */ -27,-7,-23,-14,-127,-8,28,20, 
  /* [17][0][][] */ -39,96,-97,9,21,-127,107,-72, 
  /* [18][0][][] */ 127,-31,-25,21,-68,25,23,73, 
  /* [19][0][][] */ 127,-72,-47,39,91,-19,51,15, 
  /* [20][0][][] */ 115,17,-12,127,-21,50,4,-78, 
  /* [21][0][][] */ 29,22,-30,3,-15,59,-127,-57, 
  /* [22][0][][] */ -127,7,56,-32,8,16,-52,-27, 
  /* [23][0][][] */ -37,-58,8,18,-127,81,90,-28, 
  /* [24][0][][] */ 127,-37,-31,-7,-105,4,-32,21, 
  /* [25][0][][] */ 17,-17,0,-26,127,39,44,-33, 
  /* [26][0][][] */ -14,-68,30,-13,26,-125,127,-71, 
  /* [27][0][][] */ -23,-127,40,-23,-12,-60,39,-9, 
  /* [28][0][][] */ -127,52,-29,77,12,-53,37,79, 
  /* [29][0][][] */ -25,45,0,18,-12,47,-109,-127, 
  /* [30][0][][] */ 127,7,40,19,-86,-21,-18,9, 
  /* [31][0][][] */ -7,16,32,-18,-20,-84,127,46, 
  /* [32][0][][] */ -48,63,3,43,-127,-85,-60,34, 
  /* [33][0][][] */ -25,0,-13,26,-127,-47,-52,19, 
  /* [34][0][][] */ 11,-127,38,21,28,58,-40,73, 
  /* [35][0][][] */ -31,-52,-127,-13,1,-79,36,-57, 
  /* [36][0][][] */ 14,127,57,15,-39,-9,-17,-22, 
  /* [37][0][][] */ -127,33,14,-26,49,-2,-8,-96, 
  /* [38][0][][] */ -109,-32,-52,-2,40,33,42,127, 
  /* [39][0][][] */ 17,-41,75,3,4,-54,127,105, 
  /* [40][0][][] */ -32,-6,-29,-31,-127,77,112,-30, 
  /* [41][0][][] */ -127,57,-24,-56,-111,-78,-77,54, 
  /* [42][0][][] */ -40,-127,-78,-37,-36,73,-110,-63, 
  /* [43][0][][] */ -78,-2,-26,-127,120,70,70,13, 
  /* [44][0][][] */ 127,0,-18,-78,2,-15,-5,39, 
  /* [45][0][][] */ -1,-127,-1,1,-14,-66,48,3, 
  /* [46][0][][] */ 118,6,-11,-11,127,-46,-19,-1, 
  /* [47][0][][] */ 101,1,-21,127,-22,37,17,-33, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00066140788840129972, 0.0014127796748653054, 0.00039063330041244626, 0.00081543630221858621, 0.00044671437353827059, 0.00041787471855059266, 0.00089892389951273799, 0.00040804501622915268, 0.00069045397685840726, 0.0012549895327538252, 0.0015934008406475186, 0.00056264863815158606, 0.00068032200215384364, 0.0014540621777996421, 0.00029213429661467671, 0.00082016974920406938, 0.00045212253462523222, 0.00056955247418954968, 0.0003912748652510345, 0.00040556772728450596, 0.00065765384351834655, 0.00051915511721745133, 0.00070916296681389213, 0.00026660581352189183, 0.00052841211436316371, 0.00054457434453070164, 0.0024006851017475128, 0.00073786068242043257, 0.00042771344305947423, 0.00081460131332278252, 0.00053553003817796707, 0.00044496922055259347, 0.0016273121582344174, 0.00047193191130645573, 0.0015757117653265595, 0.00067560782190412283, 0.0013928457628935575, 0.00070800032699480653, 0.00036828621523454785, 0.00065111182630062103, 0.00038257232517935336, 0.00046484233462251723, 0.00057667086366564035, 0.00046473270049318671, 0.0036911272909492254, 0.00084361521294340491, 0.00058253412134945393, 0.0023787533864378929, } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -29440, 27148, -9659, -12980, 24222, 17097, 44563, 41757, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00059073360171169043, 0.00051359063945710659, 0.0014141835272312164, 0.00157657649833709, 0.00066272547701373696, 0.00050024664960801601, 0.00052609329577535391, 0.00096564221894368529, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -36,-15,-14,18,8,-35,7,-9,-95,93,-47,74,88,4,86,-29,10,0,-24,3,-14,1,-9,-29,3,-89,13,27,-26,18,11,-36,4,-45,127,27,-14,0,12,-11,81,12,64,-11,-28,5,-9,-22, 
  /* [1][0][][] */ 23,61,98,7,2,-45,15,-67,45,2,14,26,-13,28,-25,-127,5,-92,3,49,-36,36,46,-26,4,-10,34,-4,-7,-1,25,2,3,46,4,4,32,-62,99,-75,9,81,-22,41,-4,25,32,-7, 
  /* [2][0][][] */ 14,-49,13,-30,40,26,-15,-27,21,-7,-4,12,1,64,10,-12,-47,114,-35,-21,-4,25,-44,-13,127,-4,1,0,-39,-12,7,-37,-4,-2,9,9,12,-4,-17,-7,18,-2,-13,-1,11,42,-26,-33, 
  /* [3][0][][] */ 8,-67,-4,12,8,-11,-2,14,8,-24,19,8,21,-3,39,13,-15,-13,9,15,2,-4,-14,-2,10,42,0,9,-2,2,127,-14,15,4,-13,-8,-18,4,-2,11,-6,16,-3,22,-10,14,0,27, 
  /* [4][0][][] */ -127,20,4,2,7,-37,9,-3,46,-62,29,-23,-41,-10,-34,-15,-22,11,5,50,23,-57,12,-17,-16,57,24,116,25,-8,-8,-36,1,-124,-25,-12,0,0,-8,11,-53,-25,-5,39,-35,1,12,-1, 
  /* [5][0][][] */ -8,9,-9,-18,-39,-9,-17,66,39,11,-24,18,-16,-21,31,27,0,-95,-10,19,57,-37,-3,42,24,-14,-72,-34,-35,-26,9,-12,-29,-83,20,-127,62,-13,-48,9,5,-27,3,-38,108,-47,-25,-5, 
  /* [6][0][][] */ -42,-33,-16,5,59,-52,23,-27,-49,-16,44,-22,-37,35,-18,-55,-2,6,18,-40,-68,55,-21,-96,-2,-9,-104,-64,23,40,-22,-19,-12,-87,-94,90,-105,-37,9,-93,-7,50,12,55,127,-62,58,3, 
  /* [7][0][][] */ 19,26,-58,32,-14,20,-10,33,1,1,57,-17,13,-51,7,-4,-8,-127,26,-40,29,46,16,-58,13,-18,5,2,-27,19,-13,-2,-5,28,4,-34,-35,-55,-23,-47,-19,-31,41,58,-23,-7,-9,5, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.025106176733970642, 0.02182760089635849, 0.060102798044681549, 0.067004501819610596, 0.028165832161903381, 0.021260481327772141, 0.022358965128660202, 0.041039794683456421, } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -49203, 45, 14264, -2674, 6859, -2779, 2516, 56116, 3556, 28075, -2297, 32677, -7677, -1083, 24988, 25618, -95, 16591, 34213, 12359, 67, -131, 1479, 20226, -7743, 27179, 47259, 35329, 4079, 2045, -1856, 294, 1642, 15745, -4488, 11662, -10643, 15751, -22077, 162910, 23488, 25426, 10728, -1164, 18767, 3146, 3015, -1797, };
const TfArray<48, float> quant28_scale = { 48, { 0.00035109647433273494, 0.0002831459860317409, 0.00012617408356163651, 0.00027519528521224856, 0.00011946839367737994, 9.774092904990539e-05, 0.00039126721094362438, 6.2155821069609374e-05, 0.00011408274440327659, 0.00016236885858234018, 8.4273495303932577e-05, 0.0001296871923841536, 0.00022072118008509278, 0.000213149658520706, 0.00010048646799987182, 6.4378073147963732e-05, 0.00021948407811578363, 0.00023794178559910506, 6.8711320636793971e-05, 0.00017040755483321846, 0.00022873684065416455, 0.00020642980234697461, 0.00024210209085140377, 0.00010177130752708763, 0.00015933766553644091, 0.00012683543900493532, 0.00046200791257433593, 8.8710716227069497e-05, 0.00016699376283213496, 0.00031229291926138103, 0.00012052220699843019, 0.00018969856319017708, 0.00051404209807515144, 0.00016822159523144364, 0.00025359346182085574, 0.00018855721282307059, 0.00029704818734899163, 0.00016056970343925059, 0.00026585868909023702, 1.6689011317794211e-05, 0.00012720773520413786, 5.750425043515861e-05, 0.00015244631504174322, 0.00012848916230723262, 0.00011748740507755429, 0.00013965270773041993, 0.0001416051818523556, 9.8227821581531316e-05, } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 2,-2,18,112,2,79,4,27,14,9,12,8,-6,-10,-44,8,0,8,-21,-112,-7,-23,126,-8,-3,9,-7,6,-8,5,17,97,19,28,36,-26,0,33,-3,6,17,-66,-10,-12,21,-2,-10,-11, 127,10,13,-127,26,85,11,10,124,127,9,44,-53,-23,6,10,127,-56,-57,-55,-101,25,-106,16,16,74,-32,-83,22,22,9,-124,4,-58,127,8,-42,-47,-6,110,-78,-95,-31,2,-33,-11,-127,25, -29,-3,7,16,-1,60,3,17,27,11,-14,32,-16,-4,13,6,-100,28,-1,75,-30,-13,-17,-6,-6,-59,-4,30,-21,6,6,-23,9,-23,13,-22,-3,46,45,-15,49,44,-12,13,-40,0,-9,-7, 
  /* [0][1][][] */ 116,8,-1,-98,12,-27,42,-17,7,9,-12,55,-8,-3,18,-35,0,-50,-58,-83,9,-73,-127,-16,6,105,-15,-127,-11,35,14,-109,18,-48,-9,127,-3,57,-46,45,-61,-127,39,-90,-42,-17,-14,-4, 26,-126,-127,119,-127,-127,-127,-127,-127,-96,127,-127,127,127,38,-127,-81,127,127,-101,127,127,110,127,127,-127,-127,30,-127,-127,96,127,-127,127,-34,-38,127,-127,127,127,127,-79,127,127,127,-123,95,107, 54,3,48,-13,4,-63,46,17,-25,15,-107,-8,-3,-44,127,5,62,-65,-70,85,14,-48,11,-33,1,6,-39,70,16,42,4,2,35,-42,5,64,-6,62,71,-11,-80,8,-85,-35,27,-17,-16,2, 
  /* [0][2][][] */ -53,-7,23,-16,6,30,-35,22,4,-27,12,32,7,-8,-39,16,5,21,-17,101,5,-34,-18,-9,-2,24,-2,50,-13,4,50,-30,-13,-41,-40,-34,-2,30,8,-18,15,-11,41,-35,-31,13,-11,20, 64,127,73,23,16,-22,121,34,14,-6,43,27,-4,-2,-89,24,-55,-56,-39,114,-40,48,11,21,33,-64,-41,30,75,1,127,21,86,-24,-1,-30,-25,-19,-14,119,-21,-18,-39,44,23,-30,7,-127, -42,-7,6,-2,3,-9,-60,7,-22,-12,-39,-41,22,-11,-6,10,32,23,-16,-127,22,-9,5,-8,-4,10,-11,-52,-18,10,8,4,-17,85,-45,-21,-5,34,24,-59,8,5,-40,2,-41,127,-7,0, 
};
const TfArray<48, float> quant29_scale = { 48, { 0.014921599999070168, 0.012033703736960888, 0.0053623984567821026, 0.011695799417793751, 0.0050774067640304565, 0.0041539892554283142, 0.016628855839371681, 0.0026416224427521229, 0.004848516546189785, 0.0069006765261292458, 0.0035816235467791557, 0.0055117057636380196, 0.0093806497752666473, 0.0090588601306080818, 0.0042706746608018875, 0.0027360680978745222, 0.0093280728906393051, 0.010112525895237923, 0.0029202310834079981, 0.0072423210367560387, 0.0097213154658675194, 0.0087732663378119469, 0.010289338417351246, 0.0043252804316580296, 0.0067718508653342724, 0.0053905057720839977, 0.019635336473584175, 0.0037702054250985384, 0.0070972349494695663, 0.013272448442876339, 0.0051221936009824276, 0.0080621885135769844, 0.021846789866685867, 0.0071494178846478462, 0.010777722112834454, 0.0080136815086007118, 0.012624547816812992, 0.0068242121487855911, 0.011298993602395058, 0.00070928293280303478, 0.0054063289426267147, 0.0024439305998384953, 0.0064789685420691967, 0.0054607894271612167, 0.00499321473762393, 0.0059352400712668896, 0.0060182199813425541, 0.0041746823117136955, } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 51206, 8279, 6037, 7614, 1728, 9545, -1386, -179, 507, 3589, 3605, 481, 1663, -903, 762, -1938, 4047, 12381, -370, 32191, 3381, 3354, 7669, -685, 3288, 4587, 26056, 14872, -173, -2586, -69, 2128, -1972, 8827, 4300, 6185, 7574, 4457, 23586, 2153, -1387, 2887, 1164, 3199, 7172, 2824, -1244, 2809, };
const TfArray<48, float> quant30_scale = { 48, { 8.3389139035716653e-05, 0.00027549423975870013, 0.00025441971956752241, 0.00042369859875179827, 0.0013180148089304566, 0.00050664064474403858, 0.0013288991758599877, 0.0011658677831292152, 0.00067730690352618694, 0.00042966316686943173, 0.00064415187807753682, 0.00044434136361815035, 0.00059233704814687371, 0.00050004961667582393, 0.00046510755782946944, 0.0018895870307460427, 0.0003963913768529892, 0.00034698555828072131, 0.0017548475880175829, 8.5774037870578468e-05, 0.00033252421417273581, 0.00030993125983513892, 0.00050441065104678273, 0.00080607418203726411, 0.00036716886097565293, 0.00026616547256708145, 0.00015401231939904392, 0.00024981124443002045, 0.00053277041297405958, 0.0010282263392582536, 0.00053940672660246491, 0.00039067096076905727, 0.00097667775116860867, 0.00024157852749340236, 0.00027721526566892862, 0.00028569239657372236, 0.00050160428509116173, 0.00031850277446210384, 0.00010109603317687288, 0.0020368916448205709, 0.00055425654863938689, 0.000960234843660146, 0.00043206007103435695, 0.00048965809401124716, 0.00018385834118817002, 0.00041922516538761556, 0.00081892561865970492, 0.00094069406623020768, } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 73,53,-17,-5,127,23,-36,-31, 
  /* [1][0][][] */ 0,18,8,127,16,3,35,-10, 
  /* [2][0][][] */ 39,-127,-38,50,-7,-83,72,-15, 
  /* [3][0][][] */ 127,23,-2,6,1,-22,10,-14, 
  /* [4][0][][] */ 3,-70,127,29,4,-52,16,-64, 
  /* [5][0][][] */ 77,-17,56,-39,127,-8,-26,41, 
  /* [6][0][][] */ -7,54,6,127,68,-32,-20,2, 
  /* [7][0][][] */ -13,127,-3,-14,-18,6,19,2, 
  /* [8][0][][] */ 127,35,-15,-5,-24,11,11,-35, 
  /* [9][0][][] */ -127,34,-3,45,84,-25,55,-1, 
  /* [10][0][][] */ -55,-20,-20,127,33,-8,-24,-35, 
  /* [11][0][][] */ -91,-11,23,-127,53,40,-24,-81, 
  /* [12][0][][] */ 127,-9,-13,57,-31,-57,45,-8, 
  /* [13][0][][] */ 8,85,-127,6,-22,87,-104,65, 
  /* [14][0][][] */ -45,5,52,127,30,-33,21,-12, 
  /* [15][0][][] */ -22,127,-1,-4,-8,-13,8,-46, 
  /* [16][0][][] */ -27,-127,-4,-14,-17,-78,55,-14, 
  /* [17][0][][] */ 48,127,-2,-8,5,61,-93,-23, 
  /* [18][0][][] */ 5,23,-127,15,20,109,-8,101, 
  /* [19][0][][] */ -47,36,2,-21,-127,-18,22,9, 
  /* [20][0][][] */ -127,-25,-26,16,62,-41,18,14, 
  /* [21][0][][] */ -26,-29,-18,-6,-127,-18,3,29, 
  /* [22][0][][] */ -127,-22,12,8,26,-4,23,38, 
  /* [23][0][][] */ -62,-30,-9,18,-16,114,-127,-108, 
  /* [24][0][][] */ 1,31,-127,-2,19,42,-10,71, 
  /* [25][0][][] */ 66,-13,11,127,-49,-8,15,-40, 
  /* [26][0][][] */ -18,-8,4,12,-6,125,127,-43, 
  /* [27][0][][] */ 68,-27,-70,-33,127,57,57,-31, 
  /* [28][0][][] */ 2,127,-39,18,63,73,56,112, 
  /* [29][0][][] */ -22,31,-13,-44,-6,50,-127,-99, 
  /* [30][0][][] */ 6,0,-3,-127,-1,-6,-5,-12, 
  /* [31][0][][] */ -33,-2,-15,-21,-127,13,31,14, 
  /* [32][0][][] */ 40,54,-14,-127,0,-37,-48,-62, 
  /* [33][0][][] */ -70,-20,-14,-16,-127,33,30,3, 
  /* [34][0][][] */ -127,64,41,28,32,-6,52,22, 
  /* [35][0][][] */ 38,120,-34,1,16,-127,30,-3, 
  /* [36][0][][] */ -8,57,9,-13,38,101,-127,-38, 
  /* [37][0][][] */ 17,-88,-19,7,-18,-127,37,-5, 
  /* [38][0][][] */ 20,-127,33,13,55,3,-79,31, 
  /* [39][0][][] */ 23,-127,5,2,-14,-19,-42,-90, 
  /* [40][0][][] */ 127,53,46,-34,-38,122,-121,-89, 
  /* [41][0][][] */ 39,-120,60,-16,-19,86,-107,127, 
  /* [42][0][][] */ 21,17,52,-127,-37,-45,14,-53, 
  /* [43][0][][] */ -21,-24,-4,-127,36,-15,13,8, 
  /* [44][0][][] */ 33,-38,-31,27,-6,127,112,-30, 
  /* [45][0][][] */ -127,-34,12,-2,-1,-9,-26,-27, 
  /* [46][0][][] */ 11,76,127,-8,-14,-6,31,15, 
  /* [47][0][][] */ -1,-2,13,127,16,8,-10,6, 
};
const TfArray<48, float> quant31_scale = { 48, { 0.00020792105351574719, 0.00068691268097609282, 0.00063436583150178194, 0.0010564428521320224, 0.003286315593868494, 0.0012632490834221244, 0.0033134545665234327, 0.0029069548472762108, 0.001688785501755774, 0.0010713147930800915, 0.001606117351911962, 0.0011079132091253996, 0.0014769231202080846, 0.0012468151981011033, 0.0011596912518143654, 0.0047114640474319458, 0.00098835548851639032, 0.00086516787996515632, 0.0043755071237683296, 0.00021386751905083656, 0.00082911021308973432, 0.00077277730451896787, 0.0012576888548210263, 0.0020098516251891851, 0.00091549259377643466, 0.00066365243401378393, 0.00038401168421842158, 0.00062287511536851525, 0.0013284006854519248, 0.0025637620128691196, 0.0013449476100504398, 0.00097409234149381518, 0.0024352315813302994, 0.00060234777629375458, 0.00069120380794629455, 0.00071234052302315831, 0.0012506915954872966, 0.00079414941137656569, 0.00025207112776115537, 0.005078751128166914, 0.0013819738524034619, 0.0023942331317812204, 0.0010772912064567208, 0.0012209051055833697, 0.00045842924737371504, 0.0010452888673171401, 0.0020418951753526926, 0.0023455105256289244, } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { -7366, -17959, 23407, 24429, 2373, 6948, 39046, 16787, };
const TfArray<8, float> quant32_scale = { 8, { 0.00098755687940865755, 0.00057194731198251247, 0.00072617799742147326, 0.0013415258144959807, 0.00097237213049083948, 0.0010248760227113962, 0.00083309336332604289, 0.00062705948948860168, } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -12,3,12,-102,1,40,-2,17,5,13,-13,2,109,0,2,2,0,1,-7,-1,91,-1,-8,10,41,48,14,11,17,-3,-8,-127,3,5,-4,5,-25,-2,-5,27,1,-35,-16,7,8,-1,5,2, 
  /* [1][0][][] */ -64,-14,-14,-5,51,65,-52,103,19,0,-25,-7,19,0,13,47,0,62,39,-66,2,40,127,33,-24,4,43,-1,18,-9,13,-2,13,-7,-9,-12,-8,-47,20,9,-17,-15,-109,-13,-51,-4,-50,-92, 
  /* [2][0][][] */ -75,16,4,18,78,4,36,29,-1,62,18,17,-11,0,-2,53,0,11,-127,25,-12,13,22,-21,-32,-4,54,-11,28,40,29,-4,-1,-1,-6,-19,2,16,24,-2,34,-4,-19,-9,26,-72,28,26, 
  /* [3][0][][] */ 1,-6,0,6,-11,22,3,-5,68,4,8,9,17,0,-27,10,0,-25,-11,-1,4,-8,6,-12,-2,-12,-9,9,-16,-3,-10,-10,-44,40,-51,-2,1,4,0,-127,7,3,6,-42,-1,-7,0,4, 
  /* [4][0][][] */ -7,-13,89,36,1,-27,-6,2,11,1,12,-10,-80,0,-11,6,0,17,3,4,68,-11,4,-11,-11,52,4,52,-7,-13,-10,108,-6,17,-3,-6,17,-25,-5,-15,-5,-127,-1,2,-2,-9,-3,0, 
  /* [5][0][][] */ -16,57,22,8,-5,65,20,18,-25,33,9,72,25,0,-127,-5,0,17,-33,16,-15,13,-11,41,-28,-11,35,-2,-3,17,28,-14,41,46,-51,-8,-9,29,-69,22,27,-13,-25,30,22,58,23,21, 
  /* [6][0][][] */ -19,-57,4,11,40,-66,-25,20,22,-33,-12,79,-8,0,-127,47,0,-5,48,-32,-1,8,35,-24,20,-10,-2,-15,49,-18,-5,-2,94,-24,31,-5,-14,-7,-94,-19,-19,-11,-2,-20,-29,-74,-30,-33, 
  /* [7][0][][] */ -127,-47,-3,-3,118,-2,70,24,26,11,21,-32,-16,0,83,116,0,1,-8,59,-1,-5,-39,44,22,-4,57,-1,40,63,63,-7,-14,-12,-24,-12,4,36,22,48,68,-14,-14,-6,72,-7,70,86, 
};
const TfArray<8, float> quant33_scale = { 8, { 0.041971165686845779, 0.02430775947868824, 0.030862564221024513, 0.057014845311641693, 0.04132581502199173, 0.04355723038315773, 0.035406466573476791, 0.026650028303265572, } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 66901, 47968, 63036, 41845, 853, 12915, -1071, 34740, 28744, 36937, 28371, 7118, -44931, -127, 68614, 1607, -204, 38798, 431, 1805, -12598, 12033, 33408, 50549, -6973, 27355, 55985, 18040, -2773, 12054, -5835, -46987, 17909, 135897, 28774, 1693, 57797, -945, 103589, -22884, 11308, -26119, 513, 110247, -1156, 106301, 2042, -19352, };
const TfArray<48, float> quant34_scale = { 48, { 9.1233203420415521e-05, 8.7020067439880222e-05, 0.00011729693505913019, 8.5178777226246893e-05, 0.00014326468226499856, 0.00020424573449417949, 0.00011527526658028364, 5.7759163610171527e-05, 7.6110205554869026e-05, 3.1100440537557006e-05, 6.0650709201581776e-05, 2.7225887606618926e-05, 0.00016220402903854847, 0.005541567225009203, 3.9527276385342702e-05, 0.00028994149761274457, 0.0027484172023832798, 2.0648285499191843e-05, 8.7202031863853335e-05, 0.00015264096145983785, 9.7586191259324551e-05, 0.00013230112381279469, 0.00017413012392353266, 2.395580304437317e-05, 5.9309139032848179e-05, 9.7515498055145144e-05, 2.9960647225379944e-05, 4.9360129196429625e-05, 0.0003112872363999486, 3.5192268114769831e-05, 4.7224668378476053e-05, 0.00020956377557013184, 0.00014513125643134117, 8.4290331869851798e-06, 8.090768096735701e-05, 0.00021936911798547953, 1.2975505342183169e-05, 0.0003996213199570775, 4.5233111450215802e-05, 8.01279820734635e-05, 4.5438835513778031e-05, 0.00018091569654643536, 0.00017871128511615098, 7.6728092608391307e-06, 0.000183296506293118, 5.6027609389275312e-05, 0.00020603873417712748, 9.9218399554956704e-05, } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -44,-24,-9,-13,3,-38,-78,-71,-18,-51,14,66,35,-71,112,-46,-113,-86,37,-7,3,-75,-114,-81,-29,-119,-63,-23,69,17,94,21,-127,-93,-3,51,16,52,-127,85,-74,-15,108,-119,-2,-35,-85,103, 76,12,-33,-29,56,-127,-127,-82,60,-75,-120,107,37,-82,-1,60,-52,-117,57,8,9,-112,-127,-76,0,-127,-114,-43,-55,23,-56,52,30,-127,63,80,12,78,-91,127,-127,10,127,-127,1,-23,-127,92, -30,41,5,-5,-65,-103,-60,-14,83,-12,-127,37,7,-71,-98,-12,-127,-27,26,13,-17,-67,-36,-24,-9,-36,-60,-12,-14,21,-24,7,103,-99,73,31,15,37,-14,16,-82,2,12,-83,-18,5,-54,13, 
  /* [0][1][][] */ -87,-127,-44,-44,-13,53,105,-102,-16,-108,-23,114,93,-64,26,-99,-121,-102,87,-79,46,-87,-103,-127,43,-105,-76,-38,127,-62,127,82,-43,-89,-14,92,-40,-78,-104,95,44,57,100,-112,-91,-117,80,118, 127,-83,-127,-127,127,37,97,-127,98,-127,-122,127,127,-14,-8,127,-60,-127,127,-127,127,-127,-118,-124,127,-98,-127,-127,-119,-127,-69,127,30,-121,127,127,-72,-127,-90,91,65,127,124,-121,-113,-127,124,127, -49,30,-58,-90,-118,-21,31,-36,127,-24,-81,34,56,-70,-25,-43,-37,-34,52,-72,59,-83,-36,-22,49,-13,-46,-49,12,-91,-35,21,29,-107,121,22,-37,-63,0,-13,41,49,1,-82,-58,-35,64,36, 
  /* [0][2][][] */ -62,-105,-32,-33,-3,34,-3,-33,-33,-56,-19,63,75,-127,-127,-64,-43,-18,66,77,50,-38,-16,-68,32,-49,-11,-61,82,33,74,58,106,-31,-37,-12,-91,34,-22,32,14,37,14,-53,96,-80,4,29, 87,-74,-85,-79,81,16,12,-50,46,-67,-32,55,78,-26,12,94,-24,-37,77,121,76,-55,-21,-61,91,-66,-23,-95,-44,45,-42,107,-17,-56,66,4,-127,51,-16,-2,15,34,11,-72,127,-97,-13,38, -24,27,-40,-35,-79,-18,24,-9,66,-7,-13,31,29,-43,107,-28,-93,-9,28,61,73,-32,-1,-5,40,-2,-2,-59,-7,33,-19,36,-93,-50,71,0,-15,21,21,-37,7,33,-4,-24,63,-35,-4,15, 
};
const TfArray<48, float> quant35_scale = { 48, { 0.0038774111308157444, 0.003698352724313736, 0.0049851196818053722, 0.0036200978793203831, 0.0060887490399181843, 0.0086804432794451714, 0.004899198655039072, 0.0024547644425183535, 0.0032346837688237429, 0.001321768737398088, 0.002577655017375946, 0.0011571001959964633, 0.0068936711177229881, 0.23551659286022186, 0.0016799091827124357, 0.01232251338660717, 0.1168077290058136, 0.00087755208369344473, 0.0037060861941426992, 0.0064872405491769314, 0.0041474131867289543, 0.0056227976456284523, 0.0074005299247801304, 0.0010181216057389975, 0.0025206382852047682, 0.0041444087401032448, 0.0012733275070786476, 0.0020978054963052273, 0.013229707255959511, 0.0014956713421270251, 0.0020070483442395926, 0.0089064603671431541, 0.0061680781655013561, 0.00035823389771394432, 0.0034385763574391603, 0.0093231871724128723, 0.00055145897204056382, 0.016983905807137489, 0.0019224071875214577, 0.0034054392017424107, 0.0019311504438519478, 0.0076889167539775372, 0.0075952294282615185, 0.000326094392221421, 0.0077901012264192104, 0.0023811734281480312, 0.008756645955145359, 0.0042167818173766136, } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 3644, 323, 8367, 7083, 6859, 5936, 11003, 51, -53, -243, 1664, 483, 12949, -80009248, 3054, 24102, -64587616, -118, -235, 13416, 3598, -1, -385, 287, 3419, -955, 49, 925, 4638, 1670, 2221, 13342, 2617, 278, 280, -2222, 410, 3366, -244, 10193, 1949, 11167, -1065, -101, 15214, -6, 12279, 3234, };
const TfArray<48, float> quant36_scale = { 48, { 0.00057050638133659959, 0.00040186682599596679, 0.00037962468923069537, 0.00024741722154431045, 0.00029207693296484649, 0.00033656726009212434, 0.00034496586886234581, 0.0015368143795058131, 0.00044364825589582324, 0.0029896157793700695, 0.00078091060277074575, 0.00178202532697469, 0.0001657411630731076, 2.0270614076167703e-09, 0.00088739249622449279, 0.00013779127039015293, 2.0270614076167703e-09, 0.0051500811241567135, 0.00046884285984560847, 0.0002906141453422606, 0.00028147114790044725, 0.0044798329472541809, 0.00031353955273516476, 0.0020887646824121475, 0.0010850100079551339, 0.00066557590616866946, 0.0023948466405272484, 0.0011367225088179111, 0.0002622200408950448, 0.001738648978061974, 0.0012295644264668226, 0.00017239057342521846, 0.00024249518173746765, 0.011449476704001427, 0.00056625372963026166, 0.00054575852118432522, 0.0036043333820998669, 0.00037247096770443022, 0.0025270041078329086, 0.00033875915687531233, 0.0014655919512733817, 0.00019823574984911829, 0.00028662683325819671, 0.0093027576804161072, 0.00032275795820169151, 0.00080212019383907318, 0.00022671297483611852, 0.00024860768462531269, } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 11,-127,41,-70,28,-50,-33,36, 
  /* [1][0][][] */ 84,84,-7,-92,10,-13,-86,127, 
  /* [2][0][][] */ 13,-4,-50,117,35,127,46,73, 
  /* [3][0][][] */ 123,70,-111,127,-120,-32,2,37, 
  /* [4][0][][] */ -37,-97,61,7,-11,31,-50,-127, 
  /* [5][0][][] */ 6,-14,-18,55,36,-7,28,127, 
  /* [6][0][][] */ 55,-4,-107,-90,127,-47,29,-29, 
  /* [7][0][][] */ 127,24,-8,-14,34,8,56,-49, 
  /* [8][0][][] */ -21,-69,0,127,-16,6,-5,-123, 
  /* [9][0][][] */ 127,-67,29,12,-22,-7,-117,66, 
  /* [10][0][][] */ -127,-40,-99,12,-20,25,-23,53, 
  /* [11][0][][] */ -36,-52,22,-104,-127,-39,52,-12, 
  /* [12][0][][] */ 15,7,-63,91,-78,-17,94,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -19,-31,-4,4,60,127,29,49, 
  /* [15][0][][] */ 30,28,48,-127,113,73,-80,57, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 48,44,127,48,-26,-32,47,78, 
  /* [18][0][][] */ 127,-103,20,36,-1,10,-127,39, 
  /* [19][0][][] */ -127,-19,49,97,-47,-96,-105,55, 
  /* [20][0][][] */ 16,31,-35,110,-42,-127,-3,80, 
  /* [21][0][][] */ 61,49,127,32,-30,-26,81,7, 
  /* [22][0][][] */ -53,-10,-127,15,19,20,-57,21, 
  /* [23][0][][] */ -97,127,7,31,4,16,100,-64, 
  /* [24][0][][] */ 7,-37,-51,83,-9,-85,80,127, 
  /* [25][0][][] */ 13,61,14,51,127,97,-75,-40, 
  /* [26][0][][] */ -59,-23,-127,-1,29,32,-103,-9, 
  /* [27][0][][] */ 2,-41,-76,-30,-5,108,127,86, 
  /* [28][0][][] */ 13,-12,-40,-13,-26,127,51,60, 
  /* [29][0][][] */ 95,21,127,0,-32,-12,92,-10, 
  /* [30][0][][] */ -67,127,13,-55,5,15,107,-69, 
  /* [31][0][][] */ -28,-103,-35,2,17,-65,127,85, 
  /* [32][0][][] */ -9,-12,-41,127,-8,97,90,102, 
  /* [33][0][][] */ 7,60,1,-83,0,-6,-24,127, 
  /* [34][0][][] */ 14,63,-8,-72,26,-22,0,127, 
  /* [35][0][][] */ 127,21,9,-30,22,46,64,-63, 
  /* [36][0][][] */ -127,-43,-20,48,-40,65,-83,82, 
  /* [37][0][][] */ -10,-14,-14,28,14,127,51,49, 
  /* [38][0][][] */ 19,18,-1,82,127,-35,-30,22, 
  /* [39][0][][] */ -12,19,4,-127,13,-9,1,102, 
  /* [40][0][][] */ 55,22,127,-14,-5,4,90,-14, 
  /* [41][0][][] */ 10,-27,-18,67,44,127,48,95, 
  /* [42][0][][] */ -92,7,127,62,-59,12,-31,75, 
  /* [43][0][][] */ -4,-62,14,116,-8,5,23,-127, 
  /* [44][0][][] */ 61,13,-53,-115,59,-70,-35,-127, 
  /* [45][0][][] */ -63,127,19,0,4,-23,57,-49, 
  /* [46][0][][] */ -127,-34,35,5,-43,-1,-83,35, 
  /* [47][0][][] */ 121,8,103,-2,48,-8,127,-4, 
};
const TfArray<48, float> quant37_scale = { 48, { 0.0011080513941124082, 0.00078051554737612605, 0.00073731632437556982, 0.00048053974751383066, 0.00056727894116193056, 0.00065368914511054754, 0.00067000114358961582, 0.0029848383273929358, 0.00086166447727009654, 0.0058065047487616539, 0.0015167036326602101, 0.0034610931761562824, 0.00032190652564167976, 3.937008052901092e-09, 0.001723515335470438, 0.0002676215663086623, 3.937008052901092e-09, 0.010002613067626953, 0.00091059802798554301, 0.00056443788344040513, 0.00054668012307956815, 0.0087008411064743996, 0.0006089641829021275, 0.004056849516928196, 0.0021073329262435436, 0.0012926977360621095, 0.004651329480111599, 0.0022077702451497316, 0.00050929014105349779, 0.0033768464345484972, 0.0023880901280790567, 0.0003348211757838726, 0.00047098007053136826, 0.022237453609704971, 0.001099791843444109, 0.0010599854867905378, 0.0070004244334995747, 0.00072342221392318606, 0.0049080089665949345, 0.00065794627880677581, 0.0028465085197240114, 0.00038501829840242863, 0.00055669364519417286, 0.018068043515086174, 0.00062686839373782277, 0.0015578974271193147, 0.00044032747973687947, 0.00048285190132446587, } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { 3304, -43368, -5517, -4960, -23494, -3310, -25808, -21102, };
const TfArray<8, float> quant38_scale = { 8, { 0.0018973426194861531, 0.0020569514017552137, 0.0026042354293167591, 0.0012066500494256616, 0.0011424109106883407, 0.0020251462701708078, 0.0013422915944829583, 0.0009588751127012074, } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-25,-6,17,127,-5,1,-14,3,-127,-89,-2,0,109,-17,0, 
  /* [1][0][][] */ 0,-33,-12,78,81,11,36,0,1,6,127,-52,0,39,-8,0, 
  /* [2][0][][] */ 0,-3,-1,-9,-59,0,7,3,-3,6,-15,6,0,127,-15,0, 
  /* [3][0][][] */ 0,0,-16,-127,86,11,59,1,3,54,-2,35,0,-8,11,0, 
  /* [4][0][][] */ 0,33,-10,28,-37,11,127,-16,-4,-58,12,-21,0,-16,7,0, 
  /* [5][0][][] */ 0,-21,1,1,-19,-30,-16,24,-3,8,-1,-37,0,-8,127,0, 
  /* [6][0][][] */ 0,26,-5,-6,42,-6,-32,4,-4,-112,121,64,0,127,63,0, 
  /* [7][0][][] */ 0,27,-13,127,7,-17,15,-5,-4,62,-58,83,0,-24,49,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.080637060105800629, 0.087420433759689331, 0.11068000644445419, 0.051282625645399094, 0.048552460968494415, 0.086068712174892426, 0.057047393172979355, 0.040752191096544266, } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { -161, 27273, 6998, 13202, 7774, 110022, 15924, 42203, -18031, 6316, 31178, 15009, -445, 26495, 10215, -107, };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 9.3825445219408721e-05, 0.00057762319920584559, 0.00026400209753774107, 0.00018023715529125184, 3.0127417630865239e-05, 0.00032996293157339096, 9.2852678790222853e-05, 1.6048305042204447e-05, 0.00028852772084064782, 0.00018185580847784877, 0.0007576042553409934, 0.00072724185883998871, 0.00021571804245468229, 0.00018214811279904097, 0.003907486330717802, } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,19,-81,-126,40,-68,80,-75,-90,-3,-7,28,-127,5,54,-73, 51,26,-127,127,127,-127,127,-127,-84,127,-127,49,-105,7,127,-25, 24,-23,94,-2,-70,66,-97,80,-95,-28,3,-15,61,2,-100,-29, 
  /* [0][1][][] */ -127,127,-20,14,-42,14,-29,16,-27,0,3,-107,-49,9,-29,-14, -78,-40,-56,-14,-6,-26,7,-27,-108,-90,21,-12,-104,-127,2,23, 14,2,68,2,4,33,-27,35,-127,6,-2,2,-21,12,-3,43, 
  /* [0][2][][] */ -115,-73,72,2,-5,37,-40,55,-77,0,-1,3,40,1,-26,23, 23,-3,34,-1,-26,38,-35,23,-125,-14,0,82,-58,0,-28,-111, 21,-6,20,0,5,13,8,25,-115,4,-1,-127,107,3,18,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0039875814691185951, 0.024548985064029694, 0.01122008915990591, 0.0076600788161158562, 0.0012804152211174369, 0.014023424126207829, 0.0039462386630475521, 0.00068205298157408834, 0.012262428179383278, 0.0077288718894124031, 0.032198179513216019, 0.030907778069376945, 0.0091680167242884636, 0.0077412943355739117, 0.16606816649436951, } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&g0::quant8_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 25604, -163581, 19148, 266306, 32999, 83134, 5269, 404512, 33461, 39094, 416773, -1073741824, 54599, 70260, -1073741824, };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00016082903312053531, 0.00011441939568612725, 3.0637122108601034e-05, 1.0833282431121916e-05, 0.00012048686039634049, 4.0611765143694356e-05, 0.0003648888086900115, 5.9369849623180926e-06, 4.2523959564277902e-05, 7.3723822424653918e-05, 1.1873142284457572e-05, 1.1533876076441629e-09, 6.5323780290782452e-05, 3.7230955058475956e-05, 1.243374708748135e-10, } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 24,-4,41, -21,-19,25, -127,-94,-36, 
  /* [1][1][][] */ -15,-12,9, -38,-3,2, -20,-36,22, 
  /* [1][2][][] */ -18,2,8, -19,0,10, 22,-22,33, 
  /* [2][0][][] */ 32,2,2, 78,122,9, 48,-24,21, 
  /* [2][1][][] */ 19,21,16, 85,127,-8, 20,2,16, 
  /* [2][2][][] */ 44,-50,41, 63,-37,-3, 23,-48,30, 
  /* [3][0][][] */ 8,33,11, 18,97,17, -18,11,3, 
  /* [3][1][][] */ 33,40,23, 52,127,37, -20,-13,15, 
  /* [3][2][][] */ 21,24,36, 19,31,21, -9,0,19, 
  /* [4][0][][] */ 36,30,-80, 5,55,-57, -3,21,1, 
  /* [4][1][][] */ 59,49,11, 48,109,11, 65,107,10, 
  /* [4][2][][] */ 74,83,9, 66,127,2, 25,78,56, 
  /* [5][0][][] */ 11,-8,-127, -3,-17,-119, -20,6,-39, 
  /* [5][1][][] */ 8,-54,-115, 2,-62,-107, -10,-13,-29, 
  /* [5][2][][] */ -1,-12,-29, 6,-21,-18, -2,-13,-23, 
  /* [6][0][][] */ 26,-61,37, 49,-87,35, 11,-19,6, 
  /* [6][1][][] */ 31,-95,63, 58,-127,69, 7,-26,17, 
  /* [6][2][][] */ 15,-31,22, 8,-39,33, -15,11,3, 
  /* [7][0][][] */ -35,20,14, -80,-11,23, -25,37,23, 
  /* [7][1][][] */ -24,-4,9, -127,-71,12, -21,8,22, 
  /* [7][2][][] */ -14,31,-3, -12,14,10, -32,24,5, 
  /* [8][0][][] */ -126,-102,-66, -127,-101,-65, -125,-60,-54, 
  /* [8][1][][] */ -125,-101,-65, -126,-101,-64, -123,-58,-52, 
  /* [8][2][][] */ -121,-65,-59, -123,-63,-58, -118,-49,-44, 
  /* [9][0][][] */ -19,21,19, -9,9,0, 6,15,-18, 
  /* [9][1][][] */ 119,127,-13, 80,124,-5, 6,23,18, 
  /* [9][2][][] */ -24,-45,12, 3,-52,-12, 17,-6,-24, 
  /* [10][0][][] */ -27,-83,-17, 32,94,21, -8,-12,-1, 
  /* [10][1][][] */ -60,-102,-12, 78,127,16, -16,-25,1, 
  /* [10][2][][] */ -30,-19,4, 38,23,-9, -6,0,9, 
  /* [11][0][][] */ 1,8,30, 20,1,41, 25,-44,-8, 
  /* [11][1][][] */ -23,-9,13, -13,-21,4, 10,-16,-11, 
  /* [11][2][][] */ 34,-3,-35, 127,123,73, 5,33,-15, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -49,-94,-18, -60,-107,-25, -9,-17,-6, 
  /* [13][1][][] */ 63,115,15, 58,127,24, 6,16,10, 
  /* [13][2][][] */ -4,-14,4, 3,-14,-1, 0,7,-4, 
  /* [14][0][][] */ 50,-1,-35, 81,-25,-49, 34,-10,-22, 
  /* [14][1][][] */ 84,-17,-83, 127,-43,-100, 54,-24,-48, 
  /* [14][2][][] */ 53,-5,-50, 74,-20,-60, 28,-5,-16, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.041011400520801544, 0.029176944866776466, 0.0078124655410647392, 0.0027624869253486395, 0.030724147334694862, 0.010355999693274498, 0.0930466428399086, 0.0015139310853555799, 0.0108436094596982, 0.018799573183059692, 0.0030276509933173656, 2.9411381774480105e-07, 0.016657562926411629, 0.0094938930124044418, 3.1706054670621597e-08, } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.51487356424331665, } };
const TfArray<1, int> quant46_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.4010615348815918, } };
const TfArray<1, int> quant50_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<1, float> quant53_scale = { 1, { 0.44661989808082581, } };
const TfArray<1, int> quant53_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<1, float> quant54_scale = { 1, { 0.54590803384780884, } };
const TfArray<1, int> quant54_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.2782498300075531, } };
const TfArray<1, int> quant58_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant61_scale = { 1, { 0.23448854684829712, } };
const TfArray<1, int> quant61_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<1, float> quant62_scale = { 1, { 0.33181893825531006, } };
const TfArray<1, int> quant62_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<1, float> quant65_scale = { 1, { 0.25690194964408875, } };
const TfArray<1, int> quant65_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<1, float> quant66_scale = { 1, { 0.46615725755691528, } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&g0::quant62_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.076253071427345276, } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.12691938877105713, } };
const TfArray<1, int> quant69_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 576), (TfLiteIntArray*)&g0::tensor_dimension69, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension69, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
