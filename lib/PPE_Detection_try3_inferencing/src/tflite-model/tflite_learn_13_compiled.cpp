/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 26.06.2025 10:46:28

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242672;
#else
constexpr int kTensorArenaSize = 241648;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[5] = { 13859, -25660, -19381, -22566, -19110, };
const TfArray<1, int> tensor_dimension2 = { 1, { 5 } };
const TfArray<5, float> quant2_scale = { 5, { 0.00026263340259902179, 0.00019869428069796413, 0.00026007762062363327, 0.0002037537342403084, 0.00025483337230980396, } };
const TfArray<5, int> quant2_zero = { 5, { 0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[5*1*1*32] = { 
  /* [0][0][][] */ -22,-49,-10,-67,-57,62,17,12,44,16,-80,-16,-96,63,117,75,-41,-59,-54,-79,-4,-3,-127,-77,10,-58,57,-98,-83,48,16,-22, 
  /* [1][0][][] */ 43,108,81,90,50,95,7,-30,-78,-41,85,12,-94,64,-127,31,18,32,6,24,-69,71,78,-29,-19,53,12,92,33,-113,35,-100, 
  /* [2][0][][] */ -18,-44,-25,-37,2,42,100,-42,71,94,-23,91,54,86,-127,-31,-1,12,54,10,-20,-72,67,-63,51,41,47,26,-39,-23,71,94, 
  /* [3][0][][] */ 78,-79,3,-47,127,-43,-32,-82,40,-43,-42,-80,-20,-39,-58,-53,-113,-41,-9,48,5,20,-58,34,29,92,-4,-21,27,72,92,-82, 
  /* [4][0][][] */ -45,-95,56,-39,-1,36,-49,-71,65,69,70,-83,19,-54,-67,7,51,-52,-13,57,12,-65,-57,86,0,-34,-53,-50,-127,83,-22,-73, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 5,1,1,32 } };
const TfArray<5, float> quant3_scale = { 5, { 0.0043711033649742603, 0.0033069411292672157, 0.0043285666033625603, 0.0033911475911736488, 0.0042412844486534595, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 243, -95, -273, 160, -13, 475, -809, -627, 138, -973, -716, -724, -494, 60, 1603, -928, -112, -730, -105, -117, -966, 267, -166, -906, -400, 17, 163, -647, 556, 225, -379, -904, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.4210409871302545e-05, 0.00011270559480180964, 5.740593041991815e-05, 7.6810982136521488e-05, 6.6881730163004249e-05, 5.8883677411358804e-05, 4.596295184455812e-05, 7.0809561293572187e-05, 5.5472442909376696e-05, 4.9003010644810274e-05, 5.6228793255286291e-05, 4.3185053073102608e-05, 5.9160691307624802e-05, 5.3400326578412205e-05, 7.6826734584756196e-05, 4.8042726120911539e-05, 8.3888466178905219e-05, 4.5020799007033929e-05, 5.9034595324192196e-05, 5.9877431340282783e-05, 4.7514778998447582e-05, 6.5622203692328185e-05, 7.6232943683862686e-05, 4.7459903726121411e-05, 5.2272349421400577e-05, 5.4658259614370763e-05, 4.6621895307907835e-05, 4.3863892642548308e-05, 5.5975979194045067e-05, 5.1256909500807524e-05, 5.0258066039532423e-05, 4.7507903218502179e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -20,-17,71,29,74,-35,-64,-127,69,-113,-80,30,81,5,-20,59,-57,2,-59,-69,-66,-80,7,83,-62,-5,80,-59,91,35,-9,-31,99,-42,-67,36,-88,-43,-109,36,79,-71,-87,68,67,-86,110,-9,37,-58,-66,34,-93,-15,-94,101,-29,53,72,-81,-64,40,-69,50,-39,24,63,77,60,57,41,-97,70,-75,33,64,-103,2,-44,44,53,14,71,-5,-34,-25,-58,102,11,104,1,-85,-10,56,57,-4, 
  /* [1][0][][] */ -16,24,-35,-7,-40,61,2,-3,16,-16,-47,12,127,-14,7,19,53,-25,10,67,-22,-9,16,11,-5,1,-33,66,-9,1,47,-42,-3,49,-34,42,39,28,-2,-39,-25,-8,-12,-22,-21,16,-9,-32,-15,-35,49,44,15,48,-31,-29,18,38,19,32,-25,49,-49,-29,-35,12,21,-3,38,1,-12,-13,-65,15,-6,15,41,-13,-27,23,-36,24,-8,-40,11,39,-33,-29,30,29,15,21,42,50,13,-11, 
  /* [2][0][][] */ 44,29,-59,100,7,-84,64,56,-57,79,-7,64,37,7,42,-82,-64,-21,78,51,-65,-23,76,15,-47,59,74,5,-47,111,54,73,-107,12,-96,-117,-81,63,57,-3,-88,-55,-14,-12,-96,101,-19,-72,60,27,68,-86,-42,103,6,-5,-76,67,-27,-4,9,36,-29,53,1,52,24,63,-117,13,-10,-59,32,-127,-7,13,-31,-38,3,3,23,-50,-5,-12,1,-79,-8,6,62,93,0,41,-24,-75,-15,-111, 
  /* [3][0][][] */ 14,-1,36,-6,-41,19,-55,8,49,2,27,6,127,65,42,-10,48,56,-40,54,80,-42,-38,-45,-42,-63,-35,79,37,-61,49,9,-50,-12,-3,-5,-50,-31,11,11,-16,-44,-63,2,43,22,-56,-62,37,-24,54,-10,43,14,63,-20,-78,-84,-72,-47,-30,34,-32,48,-26,-17,-29,-32,-71,-33,-27,68,7,-68,-6,-18,25,52,63,-39,-50,-53,44,64,21,21,-28,-64,-34,32,24,13,67,-59,-44,-22, 
  /* [4][0][][] */ 60,93,-22,59,16,-127,25,-13,66,31,8,71,92,-24,-8,-24,-44,19,-49,4,71,-61,56,6,21,-17,58,-79,-25,88,-39,-14,82,86,-21,-85,-49,6,-99,54,-15,-43,-53,-81,38,85,48,41,35,-43,5,-97,-95,60,-89,14,-18,-27,7,19,33,-88,-20,-36,-66,53,4,-6,61,-63,-85,-49,-46,7,34,30,45,-36,2,-10,18,-25,-61,10,11,51,71,30,-85,-33,37,45,15,93,-31,-18, 
  /* [5][0][][] */ 89,-56,62,64,9,-74,33,54,63,-71,14,-97,3,94,24,13,56,49,-8,96,34,49,21,-1,-127,-30,-8,-69,46,69,25,-71,-78,28,-39,12,-83,0,48,25,-50,-16,18,83,-46,34,35,-32,-89,102,-1,31,45,51,43,-5,87,46,-22,-15,51,-15,34,-46,-84,88,-13,26,33,-20,88,-40,-19,50,-29,-46,33,-27,18,-15,86,45,24,97,-49,73,7,48,62,-71,79,55,5,30,54,-104, 
  /* [6][0][][] */ 0,-53,85,52,-91,-63,-19,57,-31,-63,-9,-101,94,38,88,-125,27,-13,20,78,-82,-127,89,38,-74,-82,-25,-70,-34,-114,32,-90,-105,-125,-62,-72,-18,23,-78,60,67,44,15,-25,-123,89,-94,-55,-97,-2,-23,-72,64,-65,75,-39,-2,-5,-53,93,-99,6,56,-85,-34,48,77,-61,68,-7,-103,-9,45,-79,-85,-55,-78,-107,-69,-46,16,-33,29,-34,-82,-97,-49,-101,69,72,72,18,-55,-73,54,-24, 
  /* [7][0][][] */ 50,24,-37,-45,-56,127,-28,-15,53,11,-76,-9,28,-67,14,27,23,-7,-6,63,20,7,-18,39,-62,52,8,25,-61,54,-26,7,-9,0,34,49,-76,39,-17,-36,42,-60,40,31,15,-18,47,-83,13,-43,-80,-53,-22,38,1,4,54,-71,-10,-52,-10,-3,40,-73,-55,-50,25,-4,-77,2,28,39,37,3,38,20,-50,22,-77,9,39,-36,-22,-61,37,5,-83,41,38,-12,35,26,-46,-48,-17,-50, 
  /* [8][0][][] */ 49,39,-48,-45,25,-30,-47,-2,24,3,44,79,-57,-30,-69,-70,-52,80,-6,17,34,-18,65,81,-96,77,51,35,-43,108,-58,121,91,-27,46,-16,72,21,0,67,71,95,-101,-95,-5,-4,-1,91,24,-49,-50,-36,-49,-14,-17,-57,61,105,-54,80,100,45,46,84,-39,-29,-13,90,-70,15,54,15,70,74,18,7,-46,77,72,64,38,47,-87,-42,25,46,68,-14,41,-42,-127,13,-61,-41,-71,-7, 
  /* [9][0][][] */ -19,-19,76,19,86,-102,-65,-119,15,32,-31,26,-14,-83,-111,-47,-7,-22,-83,-45,-6,66,-118,-112,82,-10,-33,6,-10,-67,-96,69,27,-19,3,-18,-80,-6,-45,-62,21,-79,35,-98,48,1,-113,25,19,-10,-73,-54,57,-84,-79,81,63,-63,2,-25,-88,100,90,-62,-86,-16,69,19,-60,78,78,-69,-11,59,-97,-107,-83,-127,-57,68,10,6,81,8,-60,-103,9,-33,78,7,-51,83,96,-10,36,-37, 
  /* [10][0][][] */ -54,44,70,-58,14,56,69,58,43,55,28,-53,69,84,-72,-6,-33,20,-14,-26,7,6,31,-42,-12,61,-112,-58,-33,123,-73,-95,13,86,81,5,-32,-33,2,21,-62,92,-125,-11,-124,-21,-39,-76,-45,-9,60,-2,59,59,-39,-69,-66,4,42,-47,30,74,127,44,52,-48,-102,-28,-90,-33,-41,-46,85,-47,-105,79,9,36,44,20,38,21,66,119,-98,47,67,8,37,12,2,-28,-24,-68,-16,-92, 
  /* [11][0][][] */ 92,-6,-31,86,101,35,36,11,93,111,-94,94,-6,-100,10,-82,-70,-118,50,43,15,57,7,-127,-126,-91,-38,55,77,9,11,-33,-106,-86,38,44,-78,58,-37,-76,-44,88,-86,-12,-59,-75,-107,-107,58,108,99,38,-107,-102,13,15,-82,-67,-33,-105,-100,92,80,4,59,69,-74,12,74,48,-100,-84,24,87,-87,34,-82,17,-62,66,-123,-46,-87,-57,28,-97,-3,-46,-108,-26,-11,-112,-99,-50,-89,-42, 
  /* [12][0][][] */ 78,38,-64,-4,58,0,-33,56,-43,9,-5,32,-98,-28,8,-61,-90,-28,21,-34,21,-19,5,44,-39,-41,71,-98,88,26,-39,54,-25,-107,-29,2,-8,-65,13,46,89,34,-81,-60,3,-50,-7,111,-21,-61,-73,14,33,-80,-64,76,55,0,58,47,21,90,24,28,127,14,-37,105,38,73,77,71,71,93,9,-22,-36,7,-85,17,-43,65,15,19,-35,17,50,84,-71,-92,70,-13,53,41,-9,38, 
  /* [13][0][][] */ 84,-29,71,74,85,83,62,51,49,-126,0,-40,127,61,53,-51,-94,-48,-63,63,51,-22,96,-44,-51,32,3,-2,-66,-125,74,15,12,95,-19,50,-64,-7,24,48,-36,63,-30,7,-22,33,2,-14,28,109,-66,-72,-70,32,90,-45,-46,42,-19,-45,-1,126,-82,24,-113,-48,-73,64,-26,-12,57,7,-93,58,-52,-35,-50,49,62,-115,50,-63,63,23,-57,-84,84,101,-6,-44,-37,46,120,-36,31,-3, 
  /* [14][0][][] */ -57,-47,90,25,-14,47,13,-41,-68,126,68,42,-15,-52,-6,1,25,-33,-22,20,-33,52,32,81,-30,-54,9,40,-46,-127,-25,43,10,-16,-38,102,126,93,35,-59,14,-26,59,104,83,-78,37,-18,94,-4,1,22,82,-65,56,20,41,-54,105,68,-58,2,-61,4,-24,13,82,-64,-34,-58,6,16,63,47,32,13,10,-7,55,-21,31,-17,-102,-50,-35,-27,-61,43,58,49,55,-79,-6,36,-39,15, 
  /* [15][0][][] */ -4,-42,-45,46,62,-92,35,-103,34,-13,-83,-9,75,-15,-99,-120,61,-11,-93,8,26,-3,45,78,50,43,15,64,2,35,40,-107,-18,-12,-77,-20,-80,82,82,-80,-5,81,-60,-39,4,-88,-57,-90,-28,-86,-21,11,-108,-108,-59,-23,44,27,-57,78,-57,-76,-17,71,-47,69,-84,-17,-69,-10,36,-84,-4,-29,38,-115,-20,30,75,50,-92,34,-113,-74,-127,-52,-102,15,60,44,-120,-51,33,83,-112,84, 
  /* [16][0][][] */ -29,-8,58,-31,32,110,-30,45,23,36,-54,22,-35,-27,-28,-39,66,26,127,30,68,38,-21,32,-40,33,-44,55,-30,101,25,5,-76,34,26,11,-12,24,24,-38,2,-19,23,57,22,52,40,-6,-42,-42,25,66,18,46,34,21,74,36,56,2,72,56,62,29,21,3,-24,43,1,34,24,14,29,46,22,44,9,52,-57,-11,2,-40,48,4,3,51,42,2,51,1,-16,41,62,-10,-57,-22, 
  /* [17][0][][] */ 17,-121,10,60,-51,-125,-80,-108,23,-95,65,30,81,43,-126,32,18,35,109,96,-104,-29,-2,-66,9,52,-91,6,86,-66,-45,59,-51,-37,15,-6,-61,81,-100,-45,-106,-54,-28,-24,-10,-3,67,-121,63,85,-28,12,-33,62,81,-86,-127,71,-95,-120,16,-107,58,79,-97,-86,25,-115,-111,-17,89,13,-1,-125,-78,46,98,-61,24,-77,-5,-30,-89,-103,-123,54,62,-47,5,57,-112,-124,-24,83,-3,0, 
  /* [18][0][][] */ -43,72,74,-32,14,-127,-66,4,18,21,-68,-18,-4,11,44,-38,-2,-7,38,6,67,-32,5,-60,34,-77,0,72,32,-19,-6,22,36,-23,-86,-90,-34,31,-12,60,-20,-5,-47,-30,-73,16,25,4,18,-8,50,-2,-62,-17,5,74,-9,30,-4,-82,66,80,-2,27,-117,-72,-17,80,61,-75,-59,79,-88,-26,-93,-75,48,17,10,-62,-28,-14,-33,-33,80,-22,54,79,-81,-34,-29,38,69,-24,64,-50, 
  /* [19][0][][] */ 66,47,31,62,36,-99,76,77,102,-71,43,16,-111,27,-48,54,29,-59,127,33,-1,51,-40,2,78,-59,37,-73,-53,-11,-39,53,87,-41,-12,-42,-19,-43,-22,-38,45,-73,-77,-11,-60,49,75,-61,-6,19,-4,-11,-41,49,-3,5,23,102,30,-17,66,-70,102,44,-87,18,-18,27,-20,22,63,-26,-38,-113,-57,-62,-19,-103,20,111,54,-80,-12,91,-51,5,19,34,67,34,5,31,-25,109,76,-65, 
  /* [20][0][][] */ -29,43,43,63,-96,78,-4,31,-8,-3,-98,-17,-26,58,18,-86,-65,-53,-75,-44,0,-61,-89,-84,49,-86,-113,24,2,-6,-56,82,70,20,-33,32,19,-48,-35,-119,-95,-51,-99,-111,-42,-78,-82,75,36,-127,-112,16,25,80,32,-20,68,44,74,58,79,-65,-79,-49,-42,-80,-66,-9,-96,-88,-81,51,-76,-94,15,-3,79,50,78,76,56,-15,55,-42,33,84,-35,46,-2,66,7,41,0,1,-25,-15, 
  /* [21][0][][] */ 45,69,35,-60,45,-42,47,-21,1,-51,-44,34,-2,21,-4,-19,-48,13,10,127,36,-26,51,-53,63,-76,-21,47,7,2,0,19,3,41,-111,-61,89,100,-90,-20,13,-15,21,-15,-30,-72,-42,62,-4,-45,-88,78,-1,98,-69,-27,-21,8,-45,111,-9,-89,-11,-68,69,47,-24,-74,-44,-15,-4,25,-18,2,37,43,-68,-14,34,82,29,66,-17,-88,45,-75,36,-37,-102,77,127,-65,-29,-63,93,-22, 
  /* [22][0][][] */ 38,-36,-45,-39,127,-53,64,40,-41,14,-43,-45,126,-63,-68,-49,8,49,-61,-29,55,-44,10,10,72,8,-61,51,-24,-78,-38,-66,37,30,5,-2,-14,-7,-13,-59,5,-8,5,48,40,-61,55,-9,-28,-38,12,-24,-63,-52,-20,36,-48,-11,1,-20,75,-43,-48,-78,-83,16,-67,-16,81,64,-37,16,-55,27,-11,-58,25,-46,40,61,68,-34,-41,-56,49,48,56,2,-34,24,-25,47,34,7,-4,67, 
  /* [23][0][][] */ 36,-110,-12,36,76,-107,-14,-112,30,-100,57,56,9,-121,-2,-61,54,-55,-117,70,65,-94,68,-48,-33,-39,54,-5,47,37,38,-50,-58,12,10,2,63,-30,-115,-13,-118,-20,-16,-121,-84,-107,78,6,46,-127,-84,-65,47,-80,-60,60,-88,-47,92,13,-114,-107,-63,-38,20,10,-126,-116,25,-34,88,-81,-23,-56,-57,-109,20,-45,66,70,-73,-66,19,-119,60,-13,76,-44,-101,14,86,-16,74,-82,-54,57, 
  /* [24][0][][] */ -73,-46,-103,-67,-92,-127,-68,-84,51,85,61,31,87,43,-45,-99,-80,27,-3,-72,67,-75,-54,-49,28,-30,51,27,75,35,-2,-77,-22,0,29,21,-55,-77,47,-24,-67,-91,82,-4,10,-34,33,54,-93,-65,-17,-2,45,37,38,-73,-36,66,29,-8,70,-12,14,69,-80,67,-47,-83,-110,41,-53,-31,-32,22,67,75,37,-72,-95,-75,-82,-80,-62,-104,-6,43,-15,-96,8,-87,-24,-94,-22,-14,-80,28, 
  /* [25][0][][] */ -73,-34,-71,-15,99,-79,-80,32,33,-127,-30,32,94,-6,-92,-11,-61,52,8,-42,48,65,-11,-50,43,-43,-71,17,63,-66,27,91,83,-100,33,57,82,-40,-12,-9,-57,79,-84,-3,86,29,55,33,-72,103,-58,-11,34,-32,-57,8,-49,51,-81,67,94,50,31,37,-92,63,-13,-4,-80,-9,-13,-86,31,-85,58,15,71,54,11,9,45,44,-36,62,-56,-32,-74,-61,-21,-31,76,30,-92,-31,-17,-41, 
  /* [26][0][][] */ 46,-90,-29,-11,-83,75,-7,-28,-102,-127,87,59,2,-46,31,-16,109,48,-121,-35,-2,73,94,9,61,51,21,18,3,-100,-72,13,-41,-33,-91,-59,-63,111,-62,93,-70,91,85,26,-32,70,-27,104,-9,43,-59,109,7,-26,7,-68,92,70,33,38,8,-62,22,-9,56,-15,-43,47,-52,82,47,90,43,-43,-49,6,66,-100,-88,-44,-10,71,51,-68,89,2,-35,15,-80,113,0,28,-27,101,36,102, 
  /* [27][0][][] */ -1,2,-75,-113,-127,-79,-81,-30,28,113,23,-117,-40,42,66,-41,51,-29,74,-95,-105,-2,-39,-37,-114,33,-119,13,49,48,-42,-20,54,55,-101,-65,-67,-76,-126,73,-105,5,14,4,83,11,54,87,76,53,43,-86,-69,-96,-20,-47,89,-34,-90,-87,-70,-48,-47,66,54,-59,-122,89,38,-3,-125,-5,48,-61,-23,-99,36,-75,72,87,69,-38,98,-67,-85,-94,-44,16,-61,-18,-49,-29,40,4,70,44, 
  /* [28][0][][] */ 94,42,68,36,-102,-38,-79,-103,-15,-36,55,123,-91,-81,36,122,105,110,-22,60,-58,23,-70,-58,-2,41,-53,-23,5,-106,22,0,-15,24,-13,94,64,-51,-51,31,99,-6,-60,63,-2,-12,22,52,68,-16,-127,-21,-25,61,22,-6,27,-9,67,64,-56,-33,-46,17,44,75,2,31,-83,-5,-107,-88,25,-29,45,-54,-103,-38,-64,74,-50,-61,69,-37,76,-75,56,-60,-110,-9,94,-78,-31,60,-16,-95, 
  /* [29][0][][] */ 76,37,47,-22,-118,-56,-88,18,97,-1,-61,-40,-9,-84,-36,-32,-75,86,45,-100,-50,-19,52,9,-22,12,-21,-41,-93,54,88,30,79,-17,-42,-69,-21,95,-8,92,38,114,-38,75,8,79,-28,-16,33,-45,58,-127,38,-102,88,56,-59,40,-21,78,-108,74,-56,-52,0,-58,52,83,58,-58,63,-36,116,60,54,16,56,-38,-19,58,-11,-107,0,-72,49,116,38,50,-22,51,-6,30,-116,28,-44,61, 
  /* [30][0][][] */ -8,-57,-56,14,-107,-3,-71,-9,73,-19,-15,-61,-86,-12,42,-1,-14,16,69,-98,5,-94,-102,0,-103,13,-87,97,-25,-93,-86,-24,-93,-61,-127,-47,5,-26,-1,-5,64,-79,-11,77,81,-36,73,43,-87,40,14,-114,69,-48,-16,80,-89,-49,-95,-74,-116,-10,-76,-36,-108,-93,-89,53,-61,98,38,-55,-89,84,30,-73,-72,-68,-78,-56,11,-2,-117,-36,-101,8,-118,67,-50,-111,47,22,-44,-28,-9,-58, 
  /* [31][0][][] */ 56,-102,14,72,40,49,-72,-105,-46,-29,-90,-96,82,-127,-61,82,-70,-99,51,40,45,14,-46,79,20,-117,15,17,-73,-77,27,82,-3,2,-100,-21,71,-45,-48,-119,38,-79,-41,13,-13,-65,-52,5,46,16,69,-41,-113,-69,-87,9,-123,49,15,85,-52,-11,64,-81,55,84,-59,-89,54,-121,-121,-6,-102,-55,14,-13,-68,-60,27,63,-85,-37,35,50,34,70,-103,-1,4,-64,-98,-65,-6,80,-23,-31, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0023039423394948244, 0.0047899875789880753, 0.0024397519882768393, 0.0032644665334373713, 0.0028424733318388462, 0.0025025561917573214, 0.0019534253515303135, 0.0030094061512500048, 0.0023575788363814354, 0.0020826279651373625, 0.0023897236678749323, 0.0018353647319599986, 0.0025143292732536793, 0.0022695139050483704, 0.0032651361543685198, 0.0020418157801032066, 0.0035652597434818745, 0.0019133839523419738, 0.0025089702103286982, 0.0025447907391935587, 0.0020193781238049269, 0.0027889434713870287, 0.0032399001065641642, 0.0020170458592474461, 0.0022215747740119696, 0.0023229760117828846, 0.0019814304541796446, 0.0018642154755070806, 0.0023789789993315935, 0.0021784186828881502, 0.0021359678357839584, 0.0020190859213471413, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { -2657, 4214, 6203, 2176, -2793, -2906, 14080, 1821, 1408, -1558, 10965, -730, -5666, 2470, 11959, 7826, 11214, 5159, -4273, -3828, 3191, 23584, 21795, 14434, 544, 952, 3270, 2883, 1658, -5426, 6293, -3709, -436, 3960, -308, 801, 10194, 4531, -1115, 4679, 7189, 6967, 3872, 7895, 5876, 4779, 1520, 7491, 5041, -3229, -6814, 674, -89, -1164, 2194, -393, 284, -1186, -6311, 7675, -1959, 1186, -1061, -1830, -3982, 8918, 17208, 1835, -3479, 643, 1028, 2675, 2262, -1382, -73, 11537, -1744, 11319, 13411, -1658, 8422, 2263, -806, 976, 13528, 7842, 5619, 914, 5524, 5695, -566, -8467, 530, -3043, -2736, -1622, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.0002560037246439606, 0.00034288811730220914, 0.00038095141644589603, 0.00039633171400055289, 0.00040766436723060906, 0.00046323298010975122, 0.00023498167865909636, 0.00038453057641163468, 0.00030343205435201526, 0.00041700323345139623, 0.0001826937950681895, 0.00019329394854139537, 0.00044083359534852207, 0.0011376476613804698, 0.00025142243248410523, 0.00013494558515958488, 0.00016123149544000626, 0.00025758703122846782, 0.00047759665176272392, 0.0004605084250215441, 0.00017013047181535512, 0.00011277851444901899, 0.00013954336463939399, 0.00011037412332370877, 0.00019918479665648192, 0.00036723533412441611, 0.00088216818403452635, 0.00037122311186976731, 0.00025702067068777978, 0.00034816385596059263, 0.0002182342141168192, 0.00022980295761954039, 0.00022334199456963688, 0.00026283427723683417, 0.00032539633684791625, 0.00030913719092495739, 0.00018699499196372926, 0.00023238467110786587, 0.00055443966994062066, 0.00037643892574124038, 0.00016530118591617793, 0.00036527670454233885, 0.00038355067954398692, 0.0002951083006337285, 0.00033129603252746165, 0.00020478357328101993, 0.00028522897628135979, 0.00029099130188114941, 0.0002630930976010859, 0.00040168006671592593, 0.00021606367954518646, 0.00019500979396980256, 0.00056158163351938128, 0.00026366155361756682, 0.00037057418376207352, 0.00037018675357103348, 0.00039489057962782681, 0.00021423384896479547, 0.0002494367363397032, 0.00022843190527055413, 0.00039017293602228165, 0.00057622313033789396, 0.0003736352373380214, 0.00044841977069154382, 0.00050175230717286468, 0.00021303864195942879, 0.000124804035294801, 0.00021634524455294013, 0.00036578302388079464, 0.00041089075966738164, 0.00028847606154158711, 0.00018720539810601622, 0.000558653031475842, 0.00032008573180064559, 0.00023367216635961086, 0.0001776047283783555, 0.00018519336299505085, 0.00015647332475055009, 0.00013355018745642155, 0.00015651283320039511, 0.00016842976037878543, 0.00011740671470761299, 0.00019848151714541018, 0.00026405148673802614, 0.00012396108650136739, 0.00028186311828903854, 0.00041262901504524052, 0.0002318397891940549, 0.00012921546294819564, 0.00034924026113003492, 0.000198618188733235, 0.00023572242935188115, 0.00029420739156194031, 0.00031927635427564383, 0.00024018641852308065, 0.00026437445194460452, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -89,46,30,-127,-96,-8,-58,-114,-39,18,20,62,15,-47,5,-21, 
  /* [1][0][][] */ -56,5,-110,-78,-98,-28,64,-127,39,72,-75,3,81,17,122,-123, 
  /* [2][0][][] */ -2,-4,-18,26,38,28,-48,-11,49,8,0,-14,9,62,-127,-3, 
  /* [3][0][][] */ -50,-113,7,-127,-59,1,10,-48,46,5,65,39,37,-28,74,74, 
  /* [4][0][][] */ -68,35,23,-20,22,-33,3,-34,-3,-26,31,-10,-127,-49,15,-15, 
  /* [5][0][][] */ -6,38,119,-19,-19,29,-16,-2,-127,42,-47,-31,19,-65,-120,13, 
  /* [6][0][][] */ 50,-25,65,-118,2,-49,-1,49,-27,-127,75,-78,8,44,-1,62, 
  /* [7][0][][] */ 35,127,-58,-76,59,-6,34,-32,70,65,-32,-16,-4,-23,58,48, 
  /* [8][0][][] */ 3,-83,11,-77,-9,-16,17,-68,17,127,60,-11,43,66,34,21, 
  /* [9][0][][] */ 21,-26,-33,115,30,8,22,-15,-32,127,37,-22,-35,-14,-22,4, 
  /* [10][0][][] */ -48,-46,-80,-127,0,23,-33,47,28,-9,61,-62,37,29,-17,-24, 
  /* [11][0][][] */ -34,18,46,-9,98,22,127,-78,-117,127,28,34,45,101,-124,-99, 
  /* [12][0][][] */ 58,-48,-20,37,23,-65,56,-101,-2,82,-86,-12,20,127,-44,21, 
  /* [13][0][][] */ -4,2,-51,15,1,-127,9,20,-1,-21,10,-9,17,-12,11,21, 
  /* [14][0][][] */ 11,-18,81,20,45,18,-127,-38,-2,-24,38,-5,10,-68,-2,-64, 
  /* [15][0][][] */ -111,18,57,47,-23,60,127,23,0,112,108,-45,55,3,18,-92, 
  /* [16][0][][] */ 55,51,127,127,-6,-6,37,4,-18,46,-27,-62,38,-49,-67,-61, 
  /* [17][0][][] */ -58,-102,-10,12,-37,-12,-90,-6,-127,-22,13,-27,1,41,65,-43, 
  /* [18][0][][] */ 5,3,-11,72,77,53,-26,-1,37,52,-14,-23,-7,127,47,2, 
  /* [19][0][][] */ 29,9,-27,44,93,-15,-77,46,-50,-21,-9,-127,3,7,-15,-43, 
  /* [20][0][][] */ 48,-1,-3,-40,40,-127,8,-5,-38,25,-41,-80,-22,21,37,-5, 
  /* [21][0][][] */ 104,24,105,40,21,17,-32,127,50,-16,40,-8,-42,45,-44,-17, 
  /* [22][0][][] */ -68,2,-28,87,-127,-11,98,6,-41,47,40,-23,9,-38,65,-4, 
  /* [23][0][][] */ 49,-5,46,-45,38,49,-36,48,8,43,-21,3,-11,-15,-127,7, 
  /* [24][0][][] */ -127,68,0,-32,12,67,52,12,1,5,98,30,-71,50,69,-46, 
  /* [25][0][][] */ 58,57,52,93,32,45,52,-63,34,-127,-14,-25,-76,-71,-16,8, 
  /* [26][0][][] */ -43,-27,-17,4,-15,17,-27,-7,-84,-56,1,-11,2,127,-8,38, 
  /* [27][0][][] */ -3,22,20,95,20,-34,-54,-38,80,22,-35,-18,-2,127,-14,-16, 
  /* [28][0][][] */ -40,30,81,46,127,25,12,13,-103,-22,-24,-23,43,74,53,-76, 
  /* [29][0][][] */ -82,1,79,85,3,98,-67,14,-50,-38,-33,-127,-113,-13,86,94, 
  /* [30][0][][] */ 13,75,-15,108,-18,1,6,-127,-7,89,-23,-13,63,-7,38,45, 
  /* [31][0][][] */ -44,29,75,-96,27,78,-127,-115,-42,78,-38,-112,-43,-35,43,9, 
  /* [32][0][][] */ -127,-68,-16,24,17,43,-12,-27,-30,-14,-48,54,63,17,53,29, 
  /* [33][0][][] */ 2,-48,-5,9,-82,-46,-35,-1,105,51,56,-92,50,-127,70,12, 
  /* [34][0][][] */ 58,38,2,35,44,18,-25,101,-77,-33,23,23,-14,-11,-22,127, 
  /* [35][0][][] */ 2,41,-63,42,8,6,-4,-90,107,107,-83,2,33,6,36,-127, 
  /* [36][0][][] */ -47,2,28,74,19,89,99,31,3,120,2,34,15,20,-94,-127, 
  /* [37][0][][] */ 2,-1,37,-13,13,27,-43,-49,-36,22,-17,-7,6,-127,26,-62, 
  /* [38][0][][] */ 32,59,-18,-43,127,40,-21,-35,78,62,-18,11,32,-17,41,59, 
  /* [39][0][][] */ -70,22,-16,-127,-24,9,-42,6,4,-27,14,10,-1,70,96,-6, 
  /* [40][0][][] */ -22,-22,28,-78,7,20,-15,-13,-127,0,-28,23,-13,-61,106,-50, 
  /* [41][0][][] */ 16,23,-38,8,11,-16,2,14,-30,7,-62,21,-127,6,31,28, 
  /* [42][0][][] */ 100,72,9,17,-23,-17,-41,-18,45,30,93,57,-59,43,86,-127, 
  /* [43][0][][] */ 13,48,3,32,54,4,15,-25,39,71,-15,3,-7,-56,-127,-64, 
  /* [44][0][][] */ -78,-22,33,-7,116,57,-95,-127,-39,23,-4,75,-13,6,34,-76, 
  /* [45][0][][] */ -34,6,-92,-88,-60,-64,-9,-83,-20,24,-21,-127,95,-49,56,30, 
  /* [46][0][][] */ -22,-18,-10,-105,-3,8,26,-34,-127,-15,29,2,-13,-100,73,-44, 
  /* [47][0][][] */ 4,29,21,-21,94,1,-29,5,-59,35,17,37,1,8,127,-24, 
  /* [48][0][][] */ -127,-111,3,56,50,40,-7,-14,7,8,-79,86,70,9,22,13, 
  /* [49][0][][] */ 59,-20,46,86,94,-24,49,35,-127,-27,-9,-64,37,88,-5,-24, 
  /* [50][0][][] */ 33,-36,-95,-26,-91,-127,-36,-36,28,18,-61,-63,87,-17,-47,14, 
  /* [51][0][][] */ 9,-10,72,13,29,9,40,-37,-114,101,14,-110,70,-127,-42,92, 
  /* [52][0][][] */ 5,14,-21,79,43,25,-1,76,47,62,1,7,-2,127,36,7, 
  /* [53][0][][] */ 12,-57,5,-21,-114,-44,-7,21,80,16,25,-101,49,-127,79,19, 
  /* [54][0][][] */ 57,-1,-7,27,60,73,-127,-25,-55,27,-38,-59,-1,-52,-92,-54, 
  /* [55][0][][] */ 25,-39,29,-29,27,-24,-72,-127,-48,-79,-24,51,15,-16,40,-22, 
  /* [56][0][][] */ -38,35,38,-10,-11,-4,-91,54,-15,127,-13,-6,34,1,17,-9, 
  /* [57][0][][] */ 12,86,-80,-66,-77,-44,122,91,-64,29,-66,-49,68,-38,127,31, 
  /* [58][0][][] */ 27,-27,-75,80,67,127,-88,53,-31,24,80,-10,12,41,-18,-75, 
  /* [59][0][][] */ -106,66,94,25,-80,-23,110,127,-4,46,23,15,11,6,54,-21, 
  /* [60][0][][] */ -27,69,-127,-89,35,-119,-8,49,-44,-28,-68,-79,29,-47,52,42, 
  /* [61][0][][] */ 42,-4,27,127,71,31,23,27,-83,-5,11,10,-4,22,23,-22, 
  /* [62][0][][] */ -15,127,20,-7,3,11,-44,50,14,-12,-53,-21,-20,-36,-25,-16, 
  /* [63][0][][] */ -56,48,-32,127,-48,33,-51,3,-94,-4,-66,-31,6,58,65,53, 
  /* [64][0][][] */ 0,-4,-30,2,-15,14,-8,63,-13,4,-80,-33,20,-127,13,1, 
  /* [65][0][][] */ -65,-80,-9,-112,22,-5,86,-45,4,94,28,-127,21,-27,18,-118, 
  /* [66][0][][] */ -16,-77,56,10,-54,44,-15,77,10,-32,28,127,40,83,-20,18, 
  /* [67][0][][] */ -3,64,-25,-127,-7,1,-48,28,33,-72,-31,-5,4,56,95,60, 
  /* [68][0][][] */ -21,59,63,-16,37,-35,-30,-34,-77,-64,-10,-71,-34,29,127,36, 
  /* [69][0][][] */ 127,85,-10,12,-29,-59,-27,-46,-2,25,81,-59,-108,23,66,-94, 
  /* [70][0][][] */ 12,-7,-25,25,7,64,58,124,-41,127,-4,-7,7,33,-3,0, 
  /* [71][0][][] */ 19,-10,27,16,31,-68,-27,-5,-28,-4,-59,30,-127,13,63,45, 
  /* [72][0][][] */ 11,19,-127,12,3,16,22,103,-39,-29,-16,15,8,13,-47,17, 
  /* [73][0][][] */ -39,46,93,-11,57,-40,-127,-93,-21,-107,-28,-2,1,-65,14,-4, 
  /* [74][0][][] */ -48,11,21,114,-2,16,-85,81,-127,6,-60,94,-21,-127,-12,-99, 
  /* [75][0][][] */ -31,11,-21,44,-11,35,11,-1,127,57,8,0,38,108,-90,-22, 
  /* [76][0][][] */ 42,-3,16,64,24,-4,-48,73,37,-5,-12,-127,-50,15,-25,-21, 
  /* [77][0][][] */ 39,36,45,127,9,37,24,91,10,31,-14,10,-37,-20,-37,18, 
  /* [78][0][][] */ 18,-48,-16,-127,25,-47,-23,4,20,-27,38,-71,0,112,-53,7, 
  /* [79][0][][] */ -67,-84,-29,-98,-118,36,-2,-127,105,84,75,43,95,16,23,-54, 
  /* [80][0][][] */ -42,65,57,-120,3,-55,44,-65,-100,14,-10,-127,-42,68,57,-21, 
  /* [81][0][][] */ -77,44,-127,52,96,-101,-39,64,2,-58,110,-1,8,14,46,-27, 
  /* [82][0][][] */ 127,8,22,25,28,-96,-22,40,-5,15,-89,-43,93,27,-24,-1, 
  /* [83][0][][] */ -1,23,-107,-79,-16,-14,35,-67,45,36,-34,-127,44,40,18,71, 
  /* [84][0][][] */ -44,-10,85,-1,23,1,4,-127,-11,44,23,-11,7,41,43,-40, 
  /* [85][0][][] */ -53,125,0,-127,-51,-14,-27,3,-33,22,-83,25,-5,-9,-105,14, 
  /* [86][0][][] */ -20,5,-49,-30,-7,-31,95,42,-17,-18,3,-8,2,75,127,-5, 
  /* [87][0][][] */ -38,-37,15,-127,18,-8,17,-40,-33,15,-15,-82,-43,28,31,-40, 
  /* [88][0][][] */ 88,1,-11,-5,13,-61,52,33,-19,29,-127,-30,15,-17,3,32, 
  /* [89][0][][] */ 17,-37,-16,-12,27,0,-32,-8,-15,52,64,-99,127,-12,-8,-79, 
  /* [90][0][][] */ -32,-114,79,-59,68,6,-127,116,95,-60,-26,-100,9,107,10,-126, 
  /* [91][0][][] */ -23,38,-32,14,21,-32,-93,-96,40,31,40,-127,-81,-35,9,32, 
  /* [92][0][][] */ -17,-5,48,24,17,-127,21,-30,29,19,49,-37,-5,-37,2,-8, 
  /* [93][0][][] */ -18,-64,127,-47,-95,88,63,-74,-73,-8,-80,-1,32,42,73,20, 
  /* [94][0][][] */ 13,-7,-1,-10,49,-1,-41,51,-76,-58,66,-127,111,-27,99,-63, 
  /* [95][0][][] */ 127,46,-17,30,-75,9,-68,-34,-38,-17,110,8,-52,29,72,-40, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00062689930200576782, 0.00083966093370690942, 0.00093286990886554122, 0.00097053305944427848, 0.00099828431848436594, 0.001134360209107399, 0.00057542073773220181, 0.00094163458561524749, 0.00074304133886471391, 0.0010211532935500145, 0.000447378697572276, 0.0004733362584374845, 0.0010795088019222021, 0.0027858600951731205, 0.0006156807066872716, 0.00033045336022041738, 0.0003948220401071012, 0.00063077651429921389, 0.0011695338180288672, 0.0011276883305981755, 0.00041661376599222422, 0.00027617087471298873, 0.00034171238075941801, 0.00027028302429243922, 0.00048776168841868639, 0.00089928210945799947, 0.0021602443885058165, 0.00090904737589880824, 0.0006293896003626287, 0.0008525800658389926, 0.00053440971532836556, 0.0005627391510643065, 0.00054691761033609509, 0.00064362591365352273, 0.00079682719660922885, 0.00075701199239119887, 0.00045791143202222884, 0.00056906120153144002, 0.0013577061472460628, 0.00092181982472538948, 0.00040478786104358733, 0.00089448585640639067, 0.00093923497479408979, 0.00072265818016603589, 0.00081127433804795146, 0.0005014719208702445, 0.00069846579572185874, 0.00071257655508816242, 0.00064425967866554856, 0.00098363007418811321, 0.0005290945409797132, 0.0004775380075443536, 0.001375195337459445, 0.00064565171487629414, 0.00090745824854820967, 0.00090650952188298106, 0.00096700398717075586, 0.00052461365703493357, 0.00061081815510988235, 0.0005593817331828177, 0.00095545151270925999, 0.0014110492775216699, 0.00091495417291298509, 0.0010980857769027352, 0.0012286859564483166, 0.0005216868594288826, 0.00030561885796487331, 0.00052978401072323322, 0.00089572573779150844, 0.0010061850771307945, 0.00070641725324094296, 0.00045842668623663485, 0.0013680238043889403, 0.00078382267383858562, 0.00057221401948481798, 0.00043491664109751582, 0.00045349961146712303, 0.00038317029247991741, 0.00032703633769415319, 0.00038326703361235559, 0.00041244909516535699, 0.00028750437195412815, 0.00048603952745907009, 0.00064660655334591866, 0.00030355463968589902, 0.00069022353272885084, 0.0010104416869580746, 0.00056772690732032061, 0.0003164215013384819, 0.00085521599976345897, 0.00048637419240549207, 0.0005772346630692482, 0.00072045205160975456, 0.00078184070298448205, 0.00058816606178879738, 0.00064739747904241085, } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -345, 7696, 18397, 11914, 11567, 27413, 11403, -44390, 15835, 21732, 41804, 20212, -4288, 3495, -18322, 2405, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00057268241653218865, 0.00039369377191178501, 0.00017767376266419888, 0.00022452072880696505, 0.00027737280470319092, 0.00023507779405917972, 0.00031567085534334183, 0.00026747316587716341, 0.00024996235151775181, 0.00021980293968226761, 0.00047586581786163151, 0.00051796733168885112, 0.00032095322967506945, 0.00022009429812896997, 0.00042692339047789574, 0.00035622183349914849, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -19,-45,4,-8,30,4,-26,41,40,-28,20,-24,-17,-3,-36,30,9,24,17,38,0,-27,9,-8,-2,41,1,127,26,-35,58,22,3,5,27,11,12,19,-76,-35,-54,6,-4,40,31,43,37,-11,7,-3,-12,-22,6,-38,0,80,-3,4,-5,-30,-34,-10,-11,-31,-35,-35,23,-26,38,13,15,-31,21,-32,-33,-14,-21,47,-19,57,-11,7,1,50,-13,29,-10,-79,4,-9,-6,18,51,4,-32,-48, 
  /* [1][0][][] */ 47,-29,-52,-9,96,-9,49,35,-25,-44,-33,-99,-8,-12,-31,27,-16,13,94,14,23,6,1,-68,27,42,2,-54,1,-48,-43,8,-58,27,-14,-54,34,0,-4,31,-82,19,-53,-14,-11,67,24,-7,-16,-29,17,-122,15,36,47,66,-63,-25,-28,-44,-10,-48,11,-82,-65,72,38,-40,-16,-4,7,6,39,-127,11,37,29,-43,-28,48,6,14,31,35,-25,27,-38,18,8,-45,-15,-18,35,19,1,104, 
  /* [2][0][][] */ -48,16,-34,35,34,-11,98,124,42,-127,31,-10,-11,-21,20,61,31,24,-67,66,29,-48,53,17,42,-41,16,-2,21,5,75,-64,37,29,20,34,-127,44,17,9,-24,-14,-14,32,23,-31,29,-16,-35,-8,-68,-35,33,-76,-41,25,22,11,93,-5,78,25,-3,9,-19,8,-13,-11,0,-5,-44,-64,-24,-100,-19,36,53,69,-30,13,8,-44,-18,-43,-50,43,71,35,-12,75,13,-34,20,17,-14,-83, 
  /* [3][0][][] */ -43,49,112,38,4,59,87,47,24,-108,58,-76,20,10,-19,127,32,47,37,-7,112,-51,60,14,44,21,55,16,41,9,-27,31,-63,-53,13,-50,-55,56,-88,-31,-60,-65,27,63,-3,21,63,-85,-83,-37,-36,5,-44,-120,-13,32,-94,66,102,-2,30,50,16,-43,55,12,47,-61,49,37,52,-65,97,-59,-32,5,-38,9,9,58,-19,-26,-49,53,-26,95,12,34,24,58,-21,45,49,115,-22,-78, 
  /* [4][0][][] */ 28,-35,72,-5,99,119,57,-16,-32,-106,-68,5,2,74,6,15,50,-72,-40,123,49,24,94,-32,-8,-54,75,-43,18,-35,52,-16,41,56,-2,-34,46,50,-27,47,-47,24,-74,-41,22,-32,54,-58,42,12,35,-9,-2,-50,-12,-17,-7,19,9,-11,-39,78,65,19,34,64,3,-127,0,40,46,69,60,-61,-38,22,-32,5,34,9,-15,-40,23,-17,-107,3,38,90,-89,42,2,-86,11,43,15,-61, 
  /* [5][0][][] */ -58,13,19,-19,-46,4,72,-54,-40,-83,-36,31,34,13,-8,21,-12,-5,16,-20,71,-85,-41,70,77,-18,14,-82,9,25,-2,-13,-6,-23,-17,-85,20,43,0,43,91,-36,24,6,-38,-20,46,-29,-7,2,27,29,-42,-46,-17,-99,-1,40,-11,-3,114,38,-27,46,-22,13,-6,127,-10,93,8,-1,25,3,2,74,-96,-48,17,15,-35,-76,24,14,25,12,21,126,29,59,-2,-34,-14,0,-54,17, 
  /* [6][0][][] */ 56,-53,-38,-53,15,24,-17,-13,-18,22,-37,-49,-35,-14,8,-18,-21,-53,-34,-1,-44,26,-23,10,-35,4,-9,-38,-33,-13,44,9,20,3,44,26,24,-44,36,-78,-4,68,5,-46,4,-42,-47,30,-4,35,-8,55,3,-19,19,-11,35,-30,-36,9,-21,55,16,-53,40,-17,-6,11,-22,2,127,8,-78,51,-26,15,-30,-25,37,-30,37,36,29,16,-37,-7,18,5,28,-58,33,-13,-27,-51,-18,10, 
  /* [7][0][][] */ 39,127,20,17,64,109,31,-54,-41,-72,8,-57,3,39,28,34,20,-34,112,42,17,-45,19,2,11,73,21,-26,-9,-34,5,18,-29,-23,-57,-51,37,-3,-15,52,3,8,-11,19,-30,-32,12,1,-58,-32,-2,-27,36,-6,19,25,-8,39,-33,-3,-3,-27,4,-63,-57,75,19,-57,-28,52,59,37,9,-17,4,27,-11,43,60,2,-16,-18,18,42,-14,29,-19,-20,1,-22,-11,-27,-6,-9,5,60, 
  /* [8][0][][] */ -77,-1,55,62,-119,3,50,6,63,0,73,-57,-35,21,28,39,-60,15,34,-6,-45,-38,-119,59,84,-21,117,19,9,-23,18,69,127,-102,9,7,9,-39,-48,-76,-26,-32,18,26,-31,67,58,-1,-97,-4,-11,14,-53,-105,-26,116,44,-22,-61,-6,-46,-41,-39,-48,15,44,9,-65,48,-99,35,-21,-16,38,-59,-44,-12,-11,-36,6,-81,75,-103,21,16,52,65,45,40,-31,14,84,-39,102,18,-68, 
  /* [9][0][][] */ -33,-53,-25,8,26,35,1,6,13,-23,79,15,-37,-26,40,-73,-1,-17,-32,18,-13,-37,-36,-12,18,-37,-8,60,-13,-10,-17,-29,25,-44,-33,25,56,9,-40,17,25,-69,-14,92,-24,-18,-14,-32,-7,5,-39,-70,-24,-32,-6,19,69,33,42,-25,67,10,-31,38,-64,-20,12,-9,13,-47,-34,-86,31,-21,10,21,-46,-51,-31,-39,0,-36,-18,18,2,-20,21,-22,30,25,-56,25,-127,54,-46,-82, 
  /* [10][0][][] */ -74,-68,29,-6,-70,-38,51,-9,53,-30,34,61,40,-21,-26,19,-12,38,-35,-1,-12,48,13,42,-45,-52,33,-124,41,-48,76,-29,49,24,19,-9,-63,49,30,-12,-2,-13,67,-61,3,32,13,-5,-9,-28,-52,12,-20,-52,-43,-82,40,32,22,-39,16,8,-16,22,-40,116,-31,-25,20,-6,-19,-16,-75,2,-41,49,17,71,-34,26,-24,30,-18,13,27,-1,7,127,20,25,7,30,24,7,46,-105, 
  /* [11][0][][] */ -101,21,78,-18,-8,-92,39,-27,-19,-23,-31,47,57,48,-17,-15,41,18,-22,-61,55,-44,13,15,74,-14,89,15,-13,36,-30,-18,-14,-9,-21,-7,-19,44,35,33,45,-3,26,-5,52,23,76,34,57,61,38,49,-23,-34,-7,-20,-127,19,-21,-36,46,8,-42,17,-7,-23,3,28,24,17,24,37,-8,2,21,24,-37,54,-75,36,-28,-80,-22,-59,82,11,44,-2,-11,71,13,-79,13,28,4,-12, 
  /* [12][0][][] */ -20,14,-125,-8,50,40,-60,-13,-13,11,34,-18,-51,-47,17,-6,-37,-22,-40,-13,-20,7,-78,36,1,-7,-48,87,21,67,-31,13,24,-38,11,56,19,-58,3,-25,34,-19,-17,-37,-29,-50,16,18,8,21,-60,22,-25,-31,33,-21,50,1,15,46,17,-6,12,51,46,-65,-5,62,-44,-127,1,34,-31,43,40,34,-11,7,16,-44,-33,66,-70,-5,-17,-44,6,-70,29,-17,-24,70,-74,-6,11,44, 
  /* [13][0][][] */ -33,41,-4,-28,-64,69,-23,-33,-9,-20,-40,111,82,16,-19,-41,-9,18,-64,-39,16,-9,52,-36,32,-9,23,16,12,-11,-40,-55,-70,65,0,24,7,3,86,17,11,64,25,-25,41,63,-29,-4,72,-18,70,127,62,11,23,-63,-14,50,4,7,-31,74,-43,76,57,-40,-9,44,26,23,-7,-89,31,21,-29,37,29,-13,-13,-81,20,-78,-7,-55,12,-61,52,42,-63,-7,-5,14,24,-31,14,11, 
  /* [14][0][][] */ 26,19,-41,-52,69,-48,-46,2,-72,87,2,50,-26,-40,-34,-45,-58,1,0,11,4,42,3,-74,-90,-11,-57,-42,-5,-8,1,-22,-72,67,28,17,-28,11,64,25,-27,68,-41,-54,-40,3,-83,15,108,-34,14,-11,58,80,-93,-3,-25,-11,-122,22,-56,14,38,59,21,20,-19,12,-34,54,27,37,2,4,22,3,127,-69,-23,-93,30,-35,34,0,8,-72,-44,-12,-61,-11,46,30,-9,2,47,20, 
  /* [15][0][][] */ 58,-94,-76,-30,19,96,-92,-87,-21,-21,-2,-29,25,8,74,7,-83,-30,-23,18,-54,10,-39,-49,-17,63,-5,-33,-41,-32,70,-60,-32,55,13,18,39,-35,-78,-37,-10,-35,-26,-3,-1,-21,19,52,33,48,-5,-127,46,86,42,26,27,9,-64,64,-65,-35,17,-8,19,36,6,6,-63,59,32,53,-21,33,-18,-36,-44,30,18,28,7,35,4,88,-16,-37,-60,-43,-81,11,41,80,-11,-23,10,63, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.024339001625776291, 0.016731984913349152, 0.0075511345639824867, 0.0095421308651566505, 0.011788344010710716, 0.0099908057600259781, 0.01341601088643074, 0.011367609724402428, 0.010623399168252945, 0.0093416245654225349, 0.020224297419190407, 0.022013610228896141, 0.013640511780977249, 0.0093540074303746223, 0.018144244328141212, 0.015139427967369556, } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 20969, 57463, 4930, -3078, 18166, -1197, -1275, 531, 643, 9906, -2316, -464, 3096, 7557, 5838, -10783, -5578, -2427, 2795, 9243, -9805, 17631, -1167, 9351, 30930, -207, -2454, 16811, 19302, -23589, 2015, 22988, 24819, -11518, 928, -1444, -232, -1829, 1484, -4892, -4335, -1234, -10923, -1658, 29020, -5270, 8033, -5133, -14966, 5038, -473, -313, -5026, 21483, -9328, 10140, 10316, -769, 42128, -773, -5807, -57, 1173, -53, 749, 14718, -2546, -5422, -3110, 2605, -2290, -6780, 960, -996, -2491, -6317, -1520, -1528, 64946, -6380, -5119, -10203, 2240, -907, 66000, -15876, -11773, -27939, -12109, 2551, -2942, 30354, 4057, -6348, -4341, -2062, };
const TfArray<96, float> quant10_scale = { 96, { 0.00015012345102149993, 9.7110445494763553e-05, 0.00012155117292422801, 0.00018012603686656803, 0.000196675187908113, 0.00073597452137619257, 8.9605287939775735e-05, 9.6032148576341569e-05, 0.000177975874976255, 0.00022477387392427772, 0.00024889476480893791, 0.000134112240630202, 0.00027619008324109018, 0.00021260044013615698, 0.00036055032978765666, 0.0001042402655002661, 0.00017525577277410775, 0.00021255952015053481, 0.00023389373382087797, 0.00010144094994757324, 9.1058318503201008e-05, 5.2234016038710251e-05, 0.00016153873002622277, 7.539279613411054e-05, 8.6250387539621443e-05, 0.00015458038251381367, 0.00018736276251729578, 0.00019077544857282192, 7.3971707024611533e-05, 0.00040976310265250504, 0.00040687827276997268, 0.00015715179324615747, 9.5679984951857477e-05, 0.00013560670777224004, 0.00026897419593296945, 0.00042312545701861382, 0.00038643329753540456, 0.00019384855113457888, 0.00019113185408059508, 0.0001358380977762863, 0.00020833729649893939, 0.00023503645206801593, 0.00032765683135949075, 6.7782020778395236e-05, 0.0003739280509762466, 9.1400528617668897e-05, 0.00011966767488047481, 0.00023472907196264714, 0.00075919006485491991, 0.0001180129183921963, 0.00049772090278565884, 0.00020825146930292249, 0.00012408735346980393, 0.00014448008732870221, 7.6590047683566809e-05, 0.00016701644926797599, 0.000282549939583987, 0.00040296249790117145, 3.5312099498696625e-05, 0.00013461122580338269, 0.00030715155298821628, 0.00032395977177657187, 0.00011767580872401595, 0.00017263070913031697, 0.00012398922990541905, 0.0001281385775655508, 0.0001971106103155762, 0.00041656318353489041, 0.00022773425735067576, 0.00018561301112640649, 0.00020577847317326814, 0.0001035072491504252, 0.00020704418420791626, 0.00017548679898027331, 0.00027912631048820913, 0.0003181779757142067, 0.00016504374798387289, 0.00011091663327533752, 3.9723607187625021e-05, 0.00019140767108183354, 0.00022456841543316841, 0.00023545007570646703, 0.00019168280414305627, 0.00031387672061100602, 5.7194793043890968e-05, 8.7622473074588925e-05, 7.3148708906956017e-05, 0.00049599161138758063, 0.0003516523283906281, 0.00011570307106012478, 0.00034251576289534569, 4.5205939386505634e-05, 0.00016312094521708786, 9.0567125880625099e-05, 0.00023886001145001501, 0.00037270228494890034, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -43,-68,-10,127,19,51,127,-69,-4,-36,-18,10,-23,-9,38,0,-12,-39,20,19,27,-120,127,11,-98,34,46,-33,-111,-127,35,27,10,37,55,-25,-36,-5,21,3,-16,29,-107,84,22,-71,40,59,-17,42,-13,22,4,-9,50,49,-97,-51,-76,-19,4,0,9,45,69,-30,76,15,8,21,25,127,20,32,30,-3,-5,10,127,-10,-15,4,-25,17,121,30,-76,-13,1,-33,-18,-38,-5,-27,-15,29, 127,-115,65,103,-45,127,65,-127,77,0,-18,127,127,-104,-14,20,15,127,121,-109,127,-77,83,73,-100,-95,-73,-38,-65,50,-59,-18,-99,75,-127,-83,-50,-7,-56,65,2,127,127,85,-48,-103,-127,-40,-14,-127,44,81,45,-27,94,76,-50,36,-100,-111,-43,-48,-64,65,68,-63,32,31,-73,31,-15,82,127,127,10,18,8,50,-41,48,68,126,127,-24,-5,81,-110,127,-102,-95,-5,-127,-104,-127,-43,118, -65,-15,29,-82,13,-22,88,-16,92,-46,-33,33,-13,3,-9,-21,-7,-16,5,-11,7,-127,32,8,-87,87,1,-59,94,55,-18,11,0,26,10,-41,-20,41,6,14,25,14,-113,71,19,-12,52,24,-12,1,-8,8,-5,-1,22,24,-69,3,-41,46,-3,41,30,7,0,-44,-29,18,1,4,-3,43,5,-12,-8,4,-8,-10,-90,0,-18,-14,-23,2,-103,9,-42,-20,-39,55,-24,-24,17,-20,-17,11, 
  /* [0][1][][] */ -66,-68,57,-26,-48,100,32,121,-43,-23,-6,-112,23,-127,76,37,-10,-53,-19,89,48,-60,37,70,-79,-5,127,-22,-28,71,116,-117,-127,99,-78,-43,-27,40,-22,127,-60,-21,-5,53,-49,127,-4,66,15,87,24,2,27,-61,13,27,127,127,-67,-78,127,-30,-38,127,63,-41,-17,-7,127,39,127,94,-42,96,2,15,15,24,-35,-3,-46,113,-83,114,3,34,-60,32,79,-127,-27,3,127,-75,-26,4, 69,127,52,-103,127,83,64,25,-127,127,127,-41,-72,-121,-127,127,127,-59,-127,-45,96,68,-123,127,-79,-75,-51,127,-127,112,-127,-127,-68,127,96,127,127,-127,-93,99,-60,-98,114,-127,-127,-27,-115,-127,127,-110,85,45,127,127,127,-127,103,-125,-127,127,12,-88,-127,-93,-127,127,-127,127,-111,-127,-95,-84,-124,-72,127,127,-127,127,-79,127,127,38,-51,-127,61,127,80,44,127,20,127,-3,-78,42,127,-127, -56,-12,-37,32,-55,-83,84,-21,23,-32,-29,99,1,107,10,16,-7,55,-11,127,-3,-76,-42,17,-51,89,-71,-22,-69,-13,15,-71,-74,53,7,-23,-24,44,-62,48,127,-7,-34,21,-35,-43,39,50,10,103,-1,7,-13,-82,-3,15,101,-1,29,23,-58,127,80,-41,-42,11,24,-20,-74,114,-17,-79,-8,-42,-21,-16,20,11,87,-33,-71,-20,38,14,-49,-12,61,24,28,78,-45,33,-52,110,-31,2, 
  /* [0][2][][] */ -82,7,-25,-17,6,-24,118,30,59,-44,-39,-5,5,7,-27,20,-1,81,6,4,-67,-87,-9,17,-14,-54,35,-65,72,45,27,22,-10,3,-3,-22,-15,31,4,-6,-19,-3,-68,120,4,39,12,32,-15,-23,3,-25,42,-21,12,11,-79,37,-36,20,21,0,-7,-12,-8,-47,-44,28,-22,20,28,35,14,-27,28,11,28,9,-80,-6,-14,-20,16,26,-127,5,24,-44,-22,-51,-24,-67,9,68,-26,-5, 119,36,-127,-32,-74,-17,62,36,-58,-36,-20,-115,-90,106,-15,57,21,-40,-16,-116,73,-65,-43,4,-127,127,-58,24,-51,-20,-2,-20,-87,23,30,19,-30,-36,127,33,9,-13,59,-29,-38,92,-76,-48,-32,-7,-127,-127,-12,-38,3,35,-83,-2,-10,46,-16,-21,16,-52,-60,34,59,-9,92,104,-14,-66,15,-58,-6,11,106,18,53,33,8,-127,-53,9,0,2,127,37,-32,49,-13,-112,41,95,-16,40, -68,11,-25,21,10,-55,-108,18,-6,-21,-20,2,-2,-26,14,15,-5,-15,1,29,-73,-92,14,23,-24,-93,15,5,-49,-41,-5,10,22,2,-2,-19,-38,-5,46,-51,25,0,-44,-40,4,82,31,27,-9,0,1,-17,42,-23,9,-6,-80,-10,-13,-40,-28,10,84,-17,24,-1,-3,35,-5,18,1,19,-19,6,3,24,38,14,84,-14,-3,-6,-28,-11,59,7,69,-40,69,58,-16,-69,-10,9,-18,-14, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0063802464865148067, 0.004127193707972765, 0.005165924783796072, 0.0076553565450012684, 0.0083586955443024635, 0.031278915703296661, 0.0038082248065620661, 0.0040813661180436611, 0.007563974242657423, 0.0095528895035386086, 0.010578026995062828, 0.0056997700594365597, 0.01173807866871357, 0.0090355183929204941, 0.015323389321565628, 0.0044302111491560936, 0.0074483701027929783, 0.009033779613673687, 0.0099404836073517799, 0.0043112402781844139, 0.0038699784781783819, 0.0022199456579983234, 0.0068653961643576622, 0.003204193664714694, 0.0036656414158642292, 0.0065696663223206997, 0.0079629169777035713, 0.0081079564988613129, 0.0031437976285815239, 0.017414931207895279, 0.01729232631623745, 0.0066789509728550911, 0.0040663992986083031, 0.0057632848620414734, 0.011431402526795864, 0.017982831224799156, 0.016423415392637253, 0.0082385633140802383, 0.008123103529214859, 0.0057731191627681255, 0.0088543351739645004, 0.0099890492856502533, 0.013925415463745594, 0.0028807357884943485, 0.015891941264271736, 0.0038845222443342209, 0.0050858762115240097, 0.009975985623896122, 0.032265577465295792, 0.0050155487842857838, 0.02115313708782196, 0.0088506871834397316, 0.005273712333291769, 0.0061404034495353699, 0.003255076939240098, 0.0070981988683342934, 0.012008371762931347, 0.017125906422734261, 0.001500764163210988, 0.0057209767401218414, 0.013053940609097481, 0.013768290169537067, 0.0050012217834591866, 0.0073368051089346409, 0.0052695418708026409, 0.0054458891972899437, 0.0083772009238600731, 0.017703935503959656, 0.009678705595433712, 0.0078885527327656746, 0.008745584636926651, 0.0043990579433739185, 0.008799377828836441, 0.0074581890366971493, 0.011862867511808872, 0.013522563502192497, 0.0070143593475222588, 0.0047139567323029041, 0.0016882532509043813, 0.008134826086461544, 0.0095441574230790138, 0.01000662799924612, 0.0081465188413858414, 0.013339760713279247, 0.0024307786952704191, 0.0037239550147205591, 0.0031088199466466904, 0.021079642698168755, 0.014945223927497864, 0.0049173804000020027, 0.014556920155882835, 0.0019212523475289345, 0.0069326399825513363, 0.0038491026498377323, 0.01015155017375946, 0.015839846804738045, } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 2154, 5585, 11040, 29187, 17922, -5984, -3374, 6509, 20329, -4501, 13167, 3976, 10489, 15863, 44663, 2368, 3947, 7398, 17097, 3907, 106, 805, 9414, -2443, 3971, -274, 18070, 9537, 8528, 41930, 38526, 16471, 9265, -1269, 15351, 2521, 1597, 4454, 23467, -3454, 8956, 10601, 30997, -3125, 27323, 6067, 11314, 14950, 39063, 8321, -847, 9238, -2851, -351, -2876, 3643, -3927, 26579, 4835, 6568, 8682, 18792, 6764, 2913, 12214, 10804, 5548, -5948, 6261, -7421, 4550, 10072, 15246, 4782, -4044, -6111, 5444, -758, 1784, -3646, 21485, 12349, 5307, 17168, 2827, -146, 17919, 88858, 10288, 12836, 4139, -481, 6633, 8471, 8065, 8444, };
const TfArray<96, float> quant12_scale = { 96, { 0.00020125875016674399, 0.00026925822021439672, 0.00016189838061109185, 8.305328810820356e-05, 0.00015571310359518975, 0.00022690804325975478, 0.00031896229484118521, 0.0002256065490655601, 0.00011456739593995735, 0.0003025903133675456, 0.00019825129129458219, 0.00022438583255279809, 0.00011050359171349555, 0.00014913421182427555, 5.4806707339594141e-05, 0.00024895588285289705, 0.00014554953668266535, 0.00015495553088840097, 0.00012674434401560575, 0.00027273051091469824, 0.00046062876936048269, 0.00036421662662178278, 0.00020152630168013275, 0.00027587290969677269, 0.00067077379208058119, 0.00026708858786150813, 0.00012597997556440532, 0.00014560334966517985, 0.00021077560086268932, 8.1126978329848498e-05, 7.1445479989051819e-05, 0.00014446805289480835, 0.0001664792507654056, 0.00025966871180571616, 0.00013162699178792536, 0.00017334416043013334, 0.00021740075317211449, 0.00028076267335563898, 0.00010861468035727739, 0.00022300564160104841, 0.00019198714289814234, 0.00014905910938978195, 8.4754152339883149e-05, 0.00028804474277421832, 0.00011846589768538252, 0.00021217290486674756, 0.0001551611494505778, 0.00017003410903271288, 0.00010041318455478176, 0.00023813435109332204, 0.00016926662647165358, 0.00017456429486628622, 0.00034907567896880209, 0.00024342213873751462, 0.0003441043954808265, 0.00020597880939021707, 0.00012949552910868078, 7.403989729937166e-05, 0.00041098528890870512, 0.00020640526781789958, 0.00019436726870480925, 7.4501818744465709e-05, 0.00021586734510492533, 0.00028313577058725059, 0.00021344215201679617, 0.00018176491721533239, 0.00023163920559454709, 0.00024634200963191688, 0.00027321110246703029, 0.00013930790009908378, 0.0002254728606203571, 0.0001505374675616622, 0.00013283545558806509, 0.00021218284382484853, 0.00038013479206711054, 0.00021536738495342433, 0.00025967101100832224, 0.00022809709480497986, 0.00031992892036214471, 0.00015208026161417365, 9.6733121608849615e-05, 0.00013360449520405382, 0.00016188574954867363, 0.00011467434524092823, 0.00035277640563435853, 0.00029185085440985858, 0.00012690872245002538, 4.3486164940986782e-05, 0.0001408906391588971, 0.00015796846128068864, 0.00029202958103269339, 0.00039820439997129142, 0.00024194766592700034, 0.00017261112225241959, 0.00014837183698546141, 0.00016073175356723368, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 72,113,-42,46,-17,38,0,54,92,39,-66,60,-56,-115,0,-127, 
  /* [1][0][][] */ 34,52,-19,15,74,-63,127,-53,25,55,-3,-34,-19,-17,35,10, 
  /* [2][0][][] */ -124,90,-3,-23,-35,-39,-39,10,-61,44,48,-127,-111,-5,-8,-30, 
  /* [3][0][][] */ -14,-52,-23,19,3,13,62,60,67,70,-47,-39,-54,-20,-127,-85, 
  /* [4][0][][] */ -111,-127,16,68,-79,65,1,74,31,-21,54,-5,25,34,-62,-98, 
  /* [5][0][][] */ -5,-12,127,76,-55,-25,29,84,4,8,4,-51,-96,22,-18,25, 
  /* [6][0][][] */ 60,15,1,-2,93,63,-14,-43,-19,-7,30,40,127,18,-10,-62, 
  /* [7][0][][] */ 11,81,75,-15,-49,-127,-18,37,-41,-5,-77,-42,-34,18,92,11, 
  /* [8][0][][] */ 60,-1,61,5,-45,64,25,-39,127,-26,30,-19,-7,-22,-98,-62, 
  /* [9][0][][] */ 127,-30,-43,43,7,-61,-32,70,4,-48,-26,63,-23,22,-39,7, 
  /* [10][0][][] */ -28,-76,41,-81,-113,-66,114,90,12,106,126,113,34,127,92,-38, 
  /* [11][0][][] */ 54,-58,33,-93,24,-32,-17,-127,-53,11,7,3,-45,-45,27,-6, 
  /* [12][0][][] */ 38,51,-49,-52,-5,-51,-80,71,-86,-78,-54,-23,-48,127,112,76, 
  /* [13][0][][] */ -76,-34,-54,117,15,-49,-70,-29,127,-16,28,44,-22,59,79,-36, 
  /* [14][0][][] */ 16,-118,27,66,43,48,-8,86,82,71,-29,-1,69,88,-45,127, 
  /* [15][0][][] */ 8,-42,-2,12,38,-22,106,19,9,-127,-18,22,15,14,17,-10, 
  /* [16][0][][] */ 57,-44,-21,-16,20,-75,20,-22,122,-16,52,79,14,89,127,111, 
  /* [17][0][][] */ -44,-75,2,99,67,102,-5,0,127,-21,59,-22,0,13,-84,26, 
  /* [18][0][][] */ -116,56,127,1,-82,-43,-80,125,-98,-108,77,-124,7,-91,-17,-20, 
  /* [19][0][][] */ 69,-11,21,-6,51,-43,-19,87,87,-4,58,36,-27,40,-6,127, 
  /* [20][0][][] */ 5,-1,81,-6,-12,7,-44,8,10,-43,58,2,-3,-22,-60,127, 
  /* [21][0][][] */ -52,11,-14,28,-9,-16,-127,-56,-53,14,22,-50,-94,-53,-60,-58, 
  /* [22][0][][] */ 39,15,8,-13,22,-61,-24,12,-127,26,52,-22,44,-16,26,18, 
  /* [23][0][][] */ 50,59,96,-8,54,37,18,-15,30,-25,48,18,127,-5,26,-77, 
  /* [24][0][][] */ 0,17,6,9,-30,22,22,30,-68,127,-18,-75,-55,-81,69,-23, 
  /* [25][0][][] */ -27,116,-44,11,39,-16,-48,-35,-1,32,49,-57,-127,-5,-100,-46, 
  /* [26][0][][] */ 14,-1,-35,-104,46,-110,22,12,69,-125,10,21,-1,127,63,105, 
  /* [27][0][][] */ 75,-31,13,-16,-26,-43,-30,-19,-54,36,-127,53,-19,-6,9,75, 
  /* [28][0][][] */ -56,41,-29,-8,8,-26,2,-112,1,-5,-127,-44,20,-35,-100,6, 
  /* [29][0][][] */ 5,-15,-127,41,-103,-24,13,16,-32,4,-90,-7,2,-37,-36,26, 
  /* [30][0][][] */ 3,29,127,-37,75,-24,-37,100,44,-101,97,-44,-31,30,22,79, 
  /* [31][0][][] */ 22,-125,23,49,-22,-66,-28,-13,67,99,127,82,-74,118,51,69, 
  /* [32][0][][] */ -20,58,-16,83,-97,94,-127,-64,-37,47,20,82,11,38,-37,12, 
  /* [33][0][][] */ 30,-38,3,127,-33,-65,73,49,-34,22,104,-45,52,18,-23,100, 
  /* [34][0][][] */ 50,49,-11,5,42,127,-80,16,-93,89,-4,-9,30,-22,16,-44, 
  /* [35][0][][] */ 78,26,0,-23,30,-127,-39,11,-49,47,-85,17,-16,33,-83,88, 
  /* [36][0][][] */ 70,-7,-127,-21,-14,-22,-20,56,-15,-35,9,10,10,-5,-28,17, 
  /* [37][0][][] */ -6,-2,127,-19,-75,20,-10,-36,-1,14,-12,72,11,-73,-8,-35, 
  /* [38][0][][] */ -47,66,37,101,-48,83,15,14,-58,28,127,-74,-55,41,45,-58, 
  /* [39][0][][] */ -28,62,-65,74,44,19,-127,50,38,35,-42,-80,-20,-37,-68,-40, 
  /* [40][0][][] */ -86,-74,8,53,40,127,17,3,-74,-78,-1,79,-34,38,14,-46, 
  /* [41][0][][] */ -49,56,-63,-59,-74,-31,127,107,-44,26,-87,-57,73,56,6,17, 
  /* [42][0][][] */ 50,62,-62,-9,-7,64,-127,36,82,-83,65,-72,-58,-30,-78,15, 
  /* [43][0][][] */ -53,25,30,-59,12,-23,15,-56,-127,28,9,-123,-109,-32,-74,11, 
  /* [44][0][][] */ -39,-8,-33,8,-37,6,16,-42,127,41,33,93,0,93,-3,-33, 
  /* [45][0][][] */ -9,-59,60,-88,14,-7,13,11,28,-32,-39,19,-9,117,11,127, 
  /* [46][0][][] */ -85,74,35,76,-64,42,-83,-107,-127,50,-109,-16,11,-37,4,-25, 
  /* [47][0][][] */ -36,-38,-34,127,10,72,-21,33,30,27,41,55,7,4,-2,-21, 
  /* [48][0][][] */ -40,-18,127,-4,21,15,-31,-57,-99,78,62,-8,-29,60,23,-23, 
  /* [49][0][][] */ -59,-84,56,5,46,123,5,-29,36,-22,-31,26,-34,20,-16,-127, 
  /* [50][0][][] */ -32,18,-32,-120,32,48,-26,78,122,24,-27,-83,127,-64,-5,19, 
  /* [51][0][][] */ 61,-18,-2,-54,127,-53,-34,-38,-10,-97,-32,-27,-25,3,25,62, 
  /* [52][0][][] */ 12,76,-2,-10,26,33,-59,90,-100,127,-110,19,39,76,43,31, 
  /* [53][0][][] */ -6,61,26,-7,14,-15,41,-32,-51,-35,-61,24,24,-127,-82,-45, 
  /* [54][0][][] */ 55,11,-11,14,55,-39,23,-18,-24,-29,-52,-4,-15,127,-46,21, 
  /* [55][0][][] */ -60,127,67,18,43,26,-3,17,-5,27,67,-71,56,-35,40,-33, 
  /* [56][0][][] */ 40,32,-44,-18,64,-31,-14,-23,-21,-29,100,127,-12,80,96,41, 
  /* [57][0][][] */ 31,-127,64,59,-26,-62,66,92,57,-97,-28,79,62,91,-30,17, 
  /* [58][0][][] */ -17,71,9,-55,19,15,-38,28,66,-28,-10,43,-55,24,127,91, 
  /* [59][0][][] */ 18,-42,4,-126,-127,31,28,-6,9,38,84,-102,24,-78,-89,27, 
  /* [60][0][][] */ -9,-7,114,-24,-28,127,15,-54,-3,26,-2,23,1,-22,5,-17, 
  /* [61][0][][] */ -56,-81,33,-66,-16,-52,53,62,-86,15,92,12,-79,118,127,69, 
  /* [62][0][][] */ -11,27,42,-36,-90,19,-16,-14,-49,-11,7,-23,29,-64,127,23, 
  /* [63][0][][] */ 38,-28,24,-74,26,-30,-31,-127,-14,80,-3,7,-4,14,27,2, 
  /* [64][0][][] */ -28,-40,56,-36,66,-4,49,-60,57,-127,-25,-9,-5,10,33,62, 
  /* [65][0][][] */ -127,-26,25,-50,-6,113,50,-20,-45,62,-32,-11,-10,23,8,-53, 
  /* [66][0][][] */ 39,-127,65,-48,-34,1,-41,-15,31,-25,79,-121,-53,76,-78,3, 
  /* [67][0][][] */ -12,-12,10,117,87,-23,-127,-11,-28,-106,30,-77,-29,73,15,37, 
  /* [68][0][][] */ 65,-4,3,28,3,-127,27,4,4,-35,-10,-60,-21,18,61,23, 
  /* [69][0][][] */ -5,113,-90,92,40,-58,-69,83,-56,37,-52,122,57,68,26,127, 
  /* [70][0][][] */ 29,16,-6,-73,-49,8,66,127,-49,3,-29,14,9,20,51,16, 
  /* [71][0][][] */ -45,-15,-6,-127,0,-16,-24,91,-40,-12,19,-31,21,-37,86,75, 
  /* [72][0][][] */ -52,39,-57,-15,-45,-74,-23,-114,43,21,35,0,127,72,26,-33, 
  /* [73][0][][] */ -44,-127,-20,-70,-53,-22,-7,-27,-8,-4,-68,-43,-34,-19,26,52, 
  /* [74][0][][] */ -15,46,60,78,12,34,-127,54,-15,-53,-14,-47,-41,-30,48,-13, 
  /* [75][0][][] */ -79,7,12,58,0,107,38,106,45,80,75,-67,-127,70,3,-4, 
  /* [76][0][][] */ -63,26,42,-8,35,-56,-91,-18,30,-21,52,-22,0,27,127,-19, 
  /* [77][0][][] */ -25,20,-81,-8,-62,-42,-36,-64,127,39,-67,37,-24,32,31,-105, 
  /* [78][0][][] */ -71,-70,-86,127,27,51,-7,8,-6,26,-72,79,49,-125,92,74, 
  /* [79][0][][] */ 48,-23,47,-127,87,-54,52,25,101,-92,-12,87,-28,6,84,30, 
  /* [80][0][][] */ -10,-29,68,-127,24,-30,19,-4,-83,-60,12,-10,18,106,-42,16, 
  /* [81][0][][] */ -19,-1,74,42,44,13,20,-6,47,45,25,18,-101,69,-127,58, 
  /* [82][0][][] */ 3,31,-22,5,-51,-21,-21,-44,-83,48,-27,-45,61,-127,-99,-80, 
  /* [83][0][][] */ -12,99,-43,-67,1,3,-81,24,-107,-15,21,-58,10,-124,57,127, 
  /* [84][0][][] */ 127,94,-8,5,-101,-13,-42,4,-23,-59,31,-49,-22,-55,79,-19, 
  /* [85][0][][] */ -32,-71,-35,-10,-16,-41,-7,16,11,-88,26,58,-84,61,110,-127, 
  /* [86][0][][] */ -121,33,18,19,-78,61,-26,-119,-95,-25,27,26,67,-93,-36,-127, 
  /* [87][0][][] */ 127,12,-37,18,-51,-35,-41,35,19,32,-55,-53,-4,23,-16,63, 
  /* [88][0][][] */ -20,-22,14,-13,7,-1,42,29,16,-24,78,9,23,5,127,-65, 
  /* [89][0][][] */ 65,65,-91,-1,-31,-127,44,13,31,0,-56,-19,-28,6,-61,-106, 
  /* [90][0][][] */ 5,-58,-35,9,-2,6,127,-45,4,-69,31,-44,18,41,-45,-50, 
  /* [91][0][][] */ 15,-47,22,-79,3,29,-16,-127,5,45,111,96,28,-2,-57,84, 
  /* [92][0][][] */ 26,-32,-26,-28,6,-18,21,-127,48,-23,54,-16,-76,-7,37,-98, 
  /* [93][0][][] */ 127,-19,49,-27,8,-31,27,73,44,-6,41,21,3,94,56,64, 
  /* [94][0][][] */ -119,-72,-122,19,106,-127,-115,-38,40,-60,113,-48,-62,36,-67,-52, 
  /* [95][0][][] */ -69,39,8,-127,-40,-67,-2,1,-48,-73,-50,-61,6,35,-14,-13, 
};
const TfArray<96, float> quant13_scale = { 96, { 0.00067121721804141998, 0.00089800194837152958, 0.00053994660265743732, 0.00027699067140929401, 0.00051931809866800904, 0.00075676006963476539, 0.001063769799657166, 0.00075241946615278721, 0.00038209324702620506, 0.0010091676376760006, 0.00066118704853579402, 0.00074834824772551656, 0.00036854005884379148, 0.00049737689550966024, 0.0001827856176532805, 0.00083029171219095588, 0.00048542162403464317, 0.00051679153693839908, 0.00042270452831871808, 0.00090958242071792483, 0.0015362410340458155, 0.0012146973749622703, 0.00067210954148322344, 0.0009200625354424119, 0.0022370947990566492, 0.00089076603762805462, 0.00042015529470518231, 0.00048560113646090031, 0.00070295680779963732, 0.0002705662336666137, 0.00023827752738725394, 0.00048181481542997062, 0.00055522425100207329, 0.00086601998191326857, 0.0004389886453282088, 0.00057811936130747199, 0.00072505231946706772, 0.00093637040117755532, 0.00036224036011844873, 0.00074374518590047956, 0.00064029550412669778, 0.00049712642794474959, 0.00028266321169212461, 0.00096065684920176864, 0.00039509512134827673, 0.00070761697134003043, 0.00051747728139162064, 0.00056708004558458924, 0.00033488759072497487, 0.0007942008669488132, 0.00056452042190358043, 0.0005821886588819325, 0.0011642008321359754, 0.00081183615839108825, 0.0011476210784167051, 0.00068695907248184085, 0.00043188000563532114, 0.00024693013983778656, 0.0013706752797588706, 0.00068838131846860051, 0.00064823345746845007, 0.00024847069289535284, 0.00071993825258687139, 0.00094428489683195949, 0.00071185000706464052, 0.00060620339354500175, 0.00077253894414752722, 0.00082157424185425043, 0.00091118516866117716, 0.00046460519661195576, 0.00075197359547019005, 0.00050205684965476394, 0.00044301897287368774, 0.00070765009149909019, 0.0012677859049290419, 0.0007182708359323442, 0.00086602772353217006, 0.00076072564115747809, 0.0010669935727491975, 0.00050720223225653172, 0.0003226142143830657, 0.00044558377703651786, 0.00053990446031093597, 0.00038244991446845233, 0.0011765430681407452, 0.00097335060127079487, 0.00042325275717303157, 0.00014503052807413042, 0.00046988378744572401, 0.00052683992544189095, 0.00097394664771854877, 0.0013280498096719384, 0.00080691865878179669, 0.00057567463954910636, 0.00049483426846563816, 0.00053605576977133751, } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -16941, 18506, 8437, 27481, 25648, 2848, -39857, -733, 18726, 12687, 35332, -7796, -22855, 8529, 43995, -12768, };
const TfArray<16, float> quant14_scale = { 16, { 0.00030594092095270753, 0.00034783218870870769, 0.00016166504065040499, 0.00024693095474503934, 0.00035301389289088547, 0.00024899846175685525, 0.00016403594054281712, 0.00038214345113374293, 0.00020752381533384323, 0.00028132068109698594, 0.00028089096304029226, 0.00040794318192638457, 0.0002901210100390017, 0.00018803734565153718, 0.0005376000190153718, 0.00027840730035677552, } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -3,-4,8,-24,49,118,-8,19,58,12,-6,69,-6,5,1,35,39,-26,-42,2,90,-39,4,1,-23,-24,-10,-81,-41,36,81,55,76,-12,11,23,19,-17,-17,36,-15,19,-21,-33,10,-31,-19,35,4,62,36,-31,-62,-45,26,-12,60,48,-2,-11,-53,54,-13,8,5,-9,57,4,20,18,49,9,-40,62,7,-14,-44,-119,11,-7,51,-6,-35,-14,4,49,40,25,-18,16,-14,22,8,70,8,127, 
  /* [1][0][][] */ 56,-47,30,35,28,-35,-5,-65,-17,-64,9,-65,44,-2,-35,-25,-120,21,18,44,3,-106,-62,-22,28,-36,-49,13,-2,32,6,42,-8,30,-57,6,-18,-27,49,-60,-3,-101,9,-37,-42,32,-12,-12,11,-6,31,12,6,-60,0,11,-4,18,-9,-27,40,-43,-9,-71,9,-19,24,23,5,18,-35,-18,-73,52,-39,59,-12,37,-27,100,-9,-1,-54,-1,-127,27,-39,60,-4,70,11,12,-54,-26,-14,5, 
  /* [2][0][][] */ -28,42,-108,-35,60,-33,45,59,38,-4,36,91,-37,8,72,-67,63,-30,-15,35,-20,-7,64,-7,-23,13,5,60,-34,-28,79,-57,-28,-18,-30,26,31,112,-110,-9,31,-77,41,63,-52,-46,-101,-79,21,36,-25,-14,22,-9,-31,28,8,8,69,46,-89,26,69,83,18,-51,-11,-127,19,-12,60,13,-13,-30,-38,17,-60,57,32,-23,28,90,37,-29,-11,-16,56,2,82,-10,-55,4,12,25,3,90, 
  /* [3][0][][] */ -8,2,-41,16,50,44,27,-4,18,35,11,30,6,-26,30,-6,83,-20,-24,22,-8,-18,-23,21,-18,45,38,19,48,-46,91,-10,-49,-18,-62,29,-19,-37,-2,34,41,-46,-45,-6,28,11,-17,-2,-80,24,-50,-16,-127,16,26,-34,27,22,-17,40,-30,44,-7,5,-22,-22,-16,-37,47,4,34,61,-74,50,-1,-70,-62,-66,69,29,74,-14,-4,50,17,49,68,-9,-13,-29,9,3,-20,24,-5,23, 
  /* [4][0][][] */ -19,-34,6,-33,42,14,-32,22,-26,-35,-48,8,-42,10,30,-23,56,-4,1,-22,23,43,43,-14,-53,-13,-5,-12,-7,22,7,7,-81,27,-1,-7,12,-39,22,-9,13,18,-43,-37,11,-8,-36,-2,-5,19,15,-5,-48,-8,7,-43,-22,-54,34,44,-4,22,-8,-33,31,-85,36,3,-55,19,-13,4,-32,63,-31,7,1,32,42,28,14,-15,127,-10,47,-18,32,11,96,58,16,-9,-31,17,-33,-3, 
  /* [5][0][][] */ 4,9,-5,26,-9,-13,14,94,44,-11,-24,-5,-39,34,41,1,-8,18,2,12,-37,-28,56,-56,-4,23,6,68,55,-11,40,13,-46,4,4,-43,-29,-38,20,-29,-24,-19,38,-11,24,16,24,6,-11,-21,-35,48,-17,42,10,1,-41,-65,0,61,-32,10,-28,-60,-4,29,-5,-24,-13,24,40,1,32,-3,-10,45,8,39,15,105,-9,-28,34,32,12,-47,34,-12,-1,-42,30,-127,-45,-28,-37,-66, 
  /* [6][0][][] */ 24,-100,50,-40,-48,-50,11,18,18,68,23,6,110,-36,13,61,-58,-73,88,13,0,24,-86,42,127,12,8,69,55,35,52,-34,93,-81,-17,22,78,49,16,73,-26,-47,-38,-44,24,-25,70,-102,-7,35,-44,-18,45,-65,74,-34,42,42,16,21,79,57,55,13,-16,114,35,-37,-7,-12,-64,-41,47,-90,103,-41,-24,44,-55,43,63,-1,59,-52,3,112,-27,-21,-85,-33,-38,-26,-77,20,7,6, 
  /* [7][0][][] */ 25,23,46,-24,-19,17,-20,-54,16,34,16,-28,-17,-39,29,36,-3,2,-14,10,20,-22,-76,-37,-38,28,9,11,-21,5,18,20,-34,-7,-15,-60,12,21,-50,-32,12,-49,-23,28,23,34,-9,74,-10,5,13,-26,0,1,-18,-56,-2,25,-4,13,21,-24,-51,-44,5,40,5,-8,0,-7,-14,14,11,4,0,6,11,-12,9,10,12,-21,32,12,-40,127,6,1,-63,-8,-22,24,-56,10,-14,-6, 
  /* [8][0][][] */ -71,10,-24,-29,-29,-45,27,64,19,69,-21,21,67,33,25,-13,12,-12,-46,-24,9,36,-32,-1,-22,24,72,59,-4,-43,16,-12,81,-65,7,15,6,-27,-63,123,15,-10,5,-127,-2,11,9,20,-34,22,-7,2,-104,46,6,0,12,-44,-47,-22,-47,10,-1,-15,-46,41,28,-20,9,-26,15,63,-34,6,18,-2,19,-106,35,-31,62,25,28,-9,-30,24,57,0,-3,104,-57,11,30,-20,-26,-10, 
  /* [9][0][][] */ -18,-55,-26,-15,-6,8,-26,24,42,-29,-3,14,-18,-31,-7,20,6,-14,1,-17,-14,-5,4,-21,18,26,14,-11,8,-6,-35,-16,-5,43,-1,26,20,5,-1,52,1,1,33,-45,-26,1,18,-127,-12,5,-24,-2,-20,21,-18,9,-16,7,-5,-19,-32,31,2,21,8,89,7,-27,2,-23,29,-16,6,3,-46,26,30,4,-3,60,-17,20,7,-23,-57,3,-21,16,-35,12,-28,-27,3,-21,-21,4, 
  /* [10][0][][] */ 7,85,-23,10,-4,-122,28,-32,-4,36,46,-19,-8,16,17,-80,63,28,-77,16,-72,0,-15,-12,-46,5,-31,80,-9,-73,17,76,-4,64,-17,-26,75,2,-67,19,2,7,60,11,-35,3,-82,-21,9,-55,-9,-34,-67,43,-15,5,25,10,-14,8,-22,48,1,44,21,44,29,-15,42,26,9,71,-62,-63,-75,-51,44,22,5,12,39,18,-63,-68,72,-50,108,10,23,5,59,57,127,20,-15,-88, 
  /* [11][0][][] */ 66,68,-43,37,26,15,67,21,30,-19,-20,36,8,15,55,-35,30,-10,-127,-7,24,52,46,-23,-50,-16,-2,18,-20,5,6,-16,-31,-4,19,-10,28,6,16,14,23,27,48,-84,41,-42,48,16,-97,-19,-18,-28,28,47,11,24,-23,-42,21,35,64,-25,-13,-23,-53,52,1,18,15,44,46,30,-11,-8,39,70,4,-31,-29,48,17,18,101,39,56,-24,35,-30,-10,-22,14,-6,23,52,-45,44, 
  /* [12][0][][] */ -41,-30,54,-17,-91,16,27,12,127,37,1,-51,-15,74,-22,-50,3,-9,27,95,28,13,-19,-61,46,88,59,5,-47,26,2,-62,73,-24,27,-6,33,17,22,-26,-28,-26,19,-8,8,21,35,0,26,78,-82,-13,12,0,9,-39,61,-23,44,-5,8,-3,47,32,-6,45,-45,-61,12,-26,-32,-61,59,-43,-70,10,36,38,25,-104,41,-1,12,93,0,8,-64,-17,-14,-20,-30,29,-2,-50,-13,-2, 
  /* [13][0][][] */ 13,61,-9,73,16,-21,-7,-61,23,-6,33,3,-56,-40,17,23,61,-94,-103,7,10,57,55,-17,-40,23,-83,32,-33,-59,-60,75,-41,19,91,2,14,33,-40,-49,57,33,30,127,34,17,22,-111,1,-29,4,6,-9,32,4,-48,-26,73,67,12,6,-37,-8,24,36,-12,-24,-99,14,34,-41,-17,40,24,37,-9,33,0,67,5,54,-38,54,43,83,25,9,31,21,11,38,1,24,10,-73,-14, 
  /* [14][0][][] */ -90,-30,5,44,-13,-33,-29,-18,-15,-4,11,-16,73,-19,-67,-3,35,-17,-17,-9,-10,-4,-4,14,-127,-15,-13,-29,-39,-81,-32,1,2,22,-1,-50,9,31,-32,-20,36,19,-22,-14,24,65,79,28,-108,4,24,7,-15,-33,6,-28,7,24,37,11,21,40,-9,37,36,-15,-38,94,-16,59,-83,-59,-47,-6,-11,46,25,35,50,-43,-5,-2,24,-11,0,35,17,27,16,69,56,-4,22,4,11,-83, 
  /* [15][0][][] */ 104,-51,54,-41,-40,84,16,-34,15,56,-7,-17,-62,-25,26,62,67,66,28,-50,2,44,-102,17,-37,7,20,3,-72,60,-64,-50,15,-40,60,-64,34,-13,-54,-108,-11,19,17,48,-17,36,7,-21,77,-76,22,9,64,-127,32,-98,10,-13,55,73,-108,7,-9,43,125,-38,-64,103,-25,48,-39,24,67,2,25,35,79,-30,57,-49,-52,-36,38,90,-6,-1,43,-52,17,-36,86,-17,-102,18,-69,-17, 
};
const TfArray<16, float> quant15_scale = { 16, { 0.013002488762140274, 0.014782868325710297, 0.0068707638420164585, 0.010494565591216087, 0.015003090724349022, 0.010582434013485909, 0.0069715273566544056, 0.016241095960140228, 0.00881976168602705, 0.011956128291785717, 0.011937865987420082, 0.017337584868073463, 0.01233014278113842, 0.0079915868118405342, 0.022848000749945641, 0.011832309886813164, } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 8429, -11054, 3399, 56800, -5977, -5929, -13215, 3402, -2089, 1697, 3355, -64, 2286, -6405, 6906, -3684, -2461, 13075, 34836, 3946, 13777, -2511, 1734, -487, 15485, -326, 656, -1327, -8711, -9103, 6068, -9878, 2868, 712, -3046, 18706, -1929, -3586, 19166, -394, -608, 3723, -8988, -8116, -8724, 64260, -1326, 16294, 26211, -16442, -1032, 5749, 2427, 1309, -7274, 1327, -16554, 1046, -1091, -6608, 923, -1813, -14310, -2295, 1138, 13361, 26674, 15928, -12691, -1407, -655, -685, 68795, 9587, -588, -1938, 17808, 33394, -2226, -10312, -3459, -8300, 279, -3458, 2595, -4100, 139, -2325, 3466, -3994, 632, -788, 925, -584, 242, 45215, };
const TfArray<96, float> quant16_scale = { 96, { 0.00019342926680110395, 0.00010313664824934676, 0.00025224519777111709, 3.6270554119255394e-05, 0.00015716132475063205, 0.0001929381542140618, 0.00026614009402692318, 8.6534630099777132e-05, 0.00014914380153641105, 0.00045390147715806961, 0.00013760662113782018, 0.00034012427204288542, 0.00014057193766348064, 0.00035010126885026693, 0.00015487887139897794, 0.00019850679382216185, 0.00011149897909490392, 0.00020765750377904624, 5.3637293603969738e-05, 0.00021242424554657191, 2.4795881472527981e-05, 0.00016414551646448672, 0.00013273561489768326, 0.00036001016269437969, 0.00025426954380236566, 0.00021670048590749502, 0.00012500197044573724, 0.00021427417232189327, 6.9769404944963753e-05, 9.6146184660028666e-05, 0.00011800029460573569, 0.00021224754163995385, 0.00013171632599551231, 0.00016423202760051936, 0.000252605474088341, 0.00013437090092338622, 0.00036881057894788682, 9.8178985354024917e-05, 6.2906692619435489e-05, 0.00019976652401965111, 0.0001769664668245241, 0.00044089701259508729, 0.00034997903276234865, 0.00014445513079408556, 0.00018585225916467607, 3.9645874494453892e-05, 0.00023706359206698835, 0.00021571296383626759, 9.5702984253875911e-05, 0.00014744221698492765, 0.00024539290461689234, 0.00016166389104910195, 0.00025079393526539207, 0.00036102489684708416, 0.00026054144836962223, 0.00032979212119244039, 0.0002142318116966635, 0.00032646663021296263, 0.00012121636973461136, 7.8323115303646773e-05, 0.00036965074832551181, 0.00015505104965995997, 0.00024875250528566539, 0.00013465918891597539, 0.00016404713096562773, 0.00023025568225421011, 5.9773970860987902e-05, 0.00012823090946767479, 0.00027919220156036317, 0.00021172343986108899, 0.00022399854788091034, 5.160494038136676e-05, 8.6225154518615454e-05, 0.00016554744797758758, 0.00016014224092941731, 0.0002733775763772428, 0.000401185272494331, 5.3105264669284225e-05, 0.00024347154248971492, 0.00016654370119795203, 0.00016367624630220234, 0.00025995471514761448, 0.00014559316332451999, 0.00012698092905338854, 0.00012980369501747191, 0.00011376180191291496, 0.0001238128897966817, 0.00019636350043583661, 0.00022581717348657548, 0.00015072112728375942, 0.00015735949273221195, 0.00013899948680773377, 0.00013969083374831825, 0.0004837767337448895, 0.0041679795831441879, 8.9394801761955023e-05, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -15,12,-22,122,-9,34,-57,-59,15,-7,98,-11,-2,-8,2,64,7,12,-58,7,86,-3,37,-37,2,20,39,45,23,28,28,70,-1,29,22,-19,9,48,-85,-24,17,8,28,19,-89,-54,26,-8,-11,-18,-1,2,60,8,-11,2,-4,-34,27,-34,30,-11,127,29,-10,-11,16,-50,70,38,-19,4,65,-23,70,9,13,-117,33,67,13,11,127,-17,42,30,-42,-15,30,-1,-18,78,-12,30,4,13, -48,16,-14,4,54,4,-12,-127,36,13,-127,-2,-17,-19,9,117,10,-32,-34,-13,93,-101,127,28,-59,-32,-111,-21,26,27,-50,20,105,17,-2,-2,-19,127,-44,-127,6,-23,-28,23,48,-121,127,-46,-74,44,53,11,44,-63,28,57,37,45,-88,80,127,35,-8,-19,43,-38,-96,1,43,-27,-40,70,-45,-40,110,-1,-25,-64,-21,77,-63,56,-14,6,-16,47,49,-30,-32,53,-14,72,-127,-26,22,-127, 3,1,-24,-88,24,29,39,23,-15,-3,2,57,-5,-11,-4,16,-27,16,-65,15,4,34,30,-34,3,-32,6,-3,7,6,46,-78,38,24,20,-23,15,12,-52,-23,6,8,-18,13,25,-30,23,-2,10,-11,5,0,15,6,-6,8,-13,47,17,-8,6,-15,-3,-14,-26,-19,22,-46,-107,-3,37,-14,-127,-21,-6,22,10,-16,11,29,-15,27,-41,-15,-44,20,42,40,-23,-13,26,-2,11,6,11,-46, 
  /* [0][1][][] */ -37,60,-19,47,-73,-11,-6,-40,21,98,-44,-23,-26,-25,-5,65,127,-23,-111,-17,68,-127,-30,12,-32,-42,-127,-6,45,38,-46,33,-127,-81,-49,2,72,0,-35,49,-26,78,-6,-7,38,-51,-15,-34,127,50,-1,20,47,9,-32,-16,35,6,-103,127,-33,-91,28,127,-61,-36,-82,127,-36,127,-35,84,-32,-60,38,21,-37,-69,127,62,127,32,8,3,127,30,-105,44,-45,-28,-106,34,80,103,31,-57, 127,127,127,127,-41,-127,127,23,127,-127,16,-127,-95,127,127,127,-17,-127,-45,-127,127,17,-64,127,127,127,-55,-127,127,127,-127,127,-21,-127,-108,127,-127,-50,105,106,-127,-127,127,127,127,-127,-98,127,-15,127,-127,-127,-127,127,127,-127,127,-127,-30,35,-120,-24,-69,-68,127,127,-48,119,127,-101,-127,127,-44,127,-127,-127,-127,127,-76,127,-37,127,106,127,-47,-127,-25,-95,-127,-118,-27,-127,-25,-127,-127,115, -21,58,-41,-5,127,68,-14,40,-1,25,-20,-9,-33,-28,-13,16,-100,-22,-127,35,36,74,-9,-117,-38,-41,121,59,23,39,72,6,111,-50,127,-3,61,14,-103,15,33,21,-30,-7,-23,-64,-12,-45,82,17,-16,42,-3,-4,-71,-15,24,24,127,-106,-10,127,2,-35,-114,-29,-75,101,14,-15,123,34,-23,-62,24,54,-30,-9,-42,22,-43,16,49,18,-101,32,127,-40,31,-16,127,-3,-106,34,36,13, 
  /* [0][2][][] */ -5,-39,-26,-60,4,24,39,31,-12,9,-14,60,22,-37,-7,6,44,7,-20,18,-1,33,-23,-27,-3,-25,20,5,-9,6,53,-82,-35,63,-23,-28,42,-35,-64,19,9,12,-36,13,12,-67,-11,0,-4,22,25,-11,15,-6,-19,11,-1,42,-43,33,-8,-6,17,20,-10,-19,1,-72,-58,17,-51,11,-110,-42,7,28,12,-11,63,24,35,20,-52,19,16,35,-27,15,5,36,21,-7,36,35,0,-32, -27,-8,-31,31,-35,78,-31,65,3,-13,56,-11,127,-11,-16,-32,1,-41,-62,24,-17,79,-50,-110,-51,-52,106,70,10,38,54,-13,-118,58,-10,-22,-26,-29,-127,1,48,-8,-12,38,-20,-46,-13,-49,-59,48,75,20,-2,-84,32,56,18,22,79,-53,25,-46,-3,1,18,-28,-127,-78,-17,-23,-77,41,30,-50,-30,-7,-51,24,-64,5,52,37,23,21,-1,68,-80,127,17,127,-35,-14,127,-24,46,77, -10,-35,-29,34,23,56,-48,15,-2,-10,0,13,0,-52,-4,1,-44,-3,-8,17,-26,13,-23,3,-13,13,2,46,4,-8,40,25,20,45,22,-25,-7,-21,-49,8,15,-13,21,0,-75,-32,-12,4,1,-5,2,-8,-5,4,-14,-3,-1,-47,19,-32,-32,54,5,-25,-15,-9,27,-69,40,6,62,-21,29,-64,-15,28,9,14,-1,43,-24,42,100,-14,-29,47,51,0,104,22,1,-12,15,-26,1,-50, 
};
const TfArray<96, float> quant17_scale = { 96, { 0.0082207433879375458, 0.0043833074159920216, 0.010720420628786087, 0.0015414984663948417, 0.0066793560981750488, 0.0081998715177178383, 0.01131095364689827, 0.0036777216009795666, 0.0063386117108166218, 0.019290812313556671, 0.0058482810854911804, 0.01445528119802475, 0.0059743071906268597, 0.014879303053021431, 0.0065823518671095371, 0.0084365382790565491, 0.0047387066297233105, 0.0088254436850547791, 0.0022795849945396185, 0.0090280305594205856, 0.0010538249043747783, 0.0069761844351887703, 0.0056412634439766407, 0.015300431288778782, 0.01080645527690649, 0.0092097707092761993, 0.0053125838749110699, 0.0091066518798470497, 0.0029651995282620192, 0.0040862127207219601, 0.0050150123424828053, 0.0090205203741788864, 0.005597943440079689, 0.0069798608310520649, 0.01073573250323534, 0.0057107629254460335, 0.015674449503421783, 0.0041726068593561649, 0.0026735344436019659, 0.0084900772199034691, 0.0075210747309029102, 0.018738122656941414, 0.0148741090670228, 0.0061393431387841702, 0.0078987209126353264, 0.0016849496169015765, 0.010075202211737633, 0.0091678006574511528, 0.004067376721650362, 0.0062662940472364426, 0.010429197922348976, 0.0068707154132425785, 0.010658741928637028, 0.015343558043241501, 0.01107301190495491, 0.014016165398061275, 0.009104851633310318, 0.013874831609427929, 0.0051516955718398094, 0.0033287322148680687, 0.015710156410932541, 0.0065896697342395782, 0.010571980848908424, 0.0057230154052376747, 0.0069720027968287468, 0.0097858663648366928, 0.0025403937324881554, 0.0054498137906193733, 0.011865668930113316, 0.008998245932161808, 0.0095199383795261383, 0.0021932099480181932, 0.0036645689979195595, 0.0070357662625610828, 0.0068060453049838543, 0.011618546210229397, 0.017050374299287796, 0.0022569736465811729, 0.010347540490329266, 0.0070781069807708263, 0.0069562401622533798, 0.011048075743019581, 0.0061877090483903885, 0.0053966892883181572, 0.0055166571401059628, 0.0048348763957619667, 0.0052620479837059975, 0.008345448412001133, 0.0095972297713160515, 0.0064056478440761566, 0.0066877780482172966, 0.0059074778109788895, 0.0059368605725467205, 0.020560510456562042, 0.17713913321495056, 0.0037992789875715971, } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 10179, 1047, 8205, -748, 3272, 7065, 19297, 8528, -1715, 17614, 8476, 3159, 8112, 26236, -761, -3958, 6755, 12636, 1568, -539, -1042, 15561, 9402, 4924, 11657, 10674, 5656, 6767, -336, -165, 5773, 16008, 10274, 5430, 11369, -345, 18745, 17232, 3186, 5512, 1091, 24990, 9698, 3927, 8677, 17667, 13103, 12889, 7185, 10080, -156, -1290, 17909, 9089, 11109, 10062, -121, 11623, 5242, 4394, 13706, 6054, 4508, 11153, 3739, 7748, 8944, -1000, 35132, 6601, 11128, -987, -443, 3279, 2012, 3324, 13973, 18995, 21306, -2967, 2198, -5112, -961, 981, 7695, 7598, 11246, 8476, 15715, 4517, 5116, 6599, 13368, 35071, -12411, 19131, };
const TfArray<96, float> quant18_scale = { 96, { 0.00024846324231475592, 0.0002538236731197685, 0.00014085252769291401, 0.00074886699439957738, 0.00039648480014875531, 0.00013644255523104221, 0.00016324143507517874, 0.00042631011456251144, 0.00028068918618373573, 0.00010229826148133725, 0.000162302385433577, 0.00027946109184995294, 0.00034193607280030847, 0.00018741971871349961, 0.0002059660037048161, 0.00022652733605355024, 0.00029322042246349156, 0.00017235631821677089, 0.00026645429898053408, 0.00021192281565163285, 0.00022117793560028076, 0.00013922827201895416, 0.00017698906594887376, 0.00016153493197634816, 0.00015342961705755442, 0.00020316590962465852, 0.00025317486142739654, 0.00013711424253415316, 0.00031269123428501189, 0.00027805674471892416, 0.00024922174634411931, 0.00012349212192930281, 0.00017191405640915036, 0.00024105554621201009, 0.00015199383778963238, 0.00053528556600213051, 0.00012250938743818551, 0.00015253349556587636, 0.00028055973234586418, 0.00018152635311707854, 0.00031203351682052016, 8.7509113654959947e-05, 0.00021394775831140578, 0.00017034173652064055, 0.00013301950821187347, 0.00018633427680470049, 0.00021085294429212809, 0.00011691411782521755, 0.00023239447909872979, 0.00010710502101574093, 0.00022560464276466519, 0.00060982682043686509, 0.00014922418631613255, 0.00017501169349998236, 0.00020503869745880365, 0.00017875993216875941, 0.00030326857813633978, 0.00015709141734987497, 0.00015058153076097369, 0.00037294425419531763, 0.00012245189282111824, 0.00022052544227335602, 0.00022262171842157841, 0.00023965364380273968, 0.00024036396644078195, 0.00016174501797650009, 0.00020859170763287693, 0.0002721291093621403, 7.6982199971098453e-05, 0.0001645449228817597, 0.0001844163634814322, 0.00041392300045117736, 0.00030910223722457886, 0.0002939510450232774, 0.00018519899458624423, 0.00031142530497163534, 0.00016330817015841603, 0.00023518965463154018, 7.9785029811318964e-05, 0.00043230646406300366, 0.00037011102540418506, 0.0003862761368509382, 0.00031676632352173328, 0.00036563570029102266, 0.00020283149206079543, 0.0002107227046508342, 0.00013166356075089425, 0.00015876156976446509, 0.00011135058593936265, 0.00030807228176854551, 0.00024870538618415594, 0.00028276699595153332, 0.0001548448926769197, 7.6811324106529355e-05, 0.00024486787151545286, 0.00017586421745363623, } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ -12,0,118,30,37,-1,-9,-31,56,12,-38,-74,24,63,3,-127, 
  /* [1][0][][] */ -16,41,-16,-62,29,-66,-22,-33,41,-17,-127,-37,-21,12,110,-26, 
  /* [2][0][][] */ 0,-56,63,38,-8,97,-55,61,-17,-24,60,63,-62,-59,27,-127, 
  /* [3][0][][] */ 115,77,-42,26,-121,-5,-39,27,4,-5,127,-71,-92,87,-33,-24, 
  /* [4][0][][] */ -7,34,18,32,-17,26,-38,57,-32,-37,11,40,14,-127,78,24, 
  /* [5][0][][] */ 102,-65,-33,-15,-57,-61,9,31,2,9,-127,15,40,-6,-1,42, 
  /* [6][0][][] */ -127,-57,7,68,-57,-19,-69,-32,-104,-104,-118,-105,-15,16,29,27, 
  /* [7][0][][] */ 14,49,-69,65,-1,-127,-19,-7,-10,7,8,-35,25,-26,-13,2, 
  /* [8][0][][] */ 22,-17,-14,7,3,18,-48,-127,-21,41,-63,-13,-94,-30,0,6, 
  /* [9][0][][] */ 48,-117,96,127,15,14,-24,-56,105,-118,1,-23,-62,55,-62,68, 
  /* [10][0][][] */ -19,-57,-77,55,45,123,14,127,51,18,-11,59,39,-18,-86,-43, 
  /* [11][0][][] */ 14,-5,-127,25,30,18,-3,64,10,-19,-1,-26,-63,6,-62,17, 
  /* [12][0][][] */ 9,18,-26,-52,-40,-44,6,36,-24,-3,-127,-25,31,-10,38,59, 
  /* [13][0][][] */ -2,-17,-44,-26,30,71,-45,-127,-14,-31,34,-67,0,20,5,-26, 
  /* [14][0][][] */ -50,38,-83,-32,33,-118,53,-64,49,89,-41,-127,1,78,-10,-16, 
  /* [15][0][][] */ -30,10,119,29,97,-8,-50,-1,45,-73,-8,73,-127,1,-9,27, 
  /* [16][0][][] */ -70,19,6,10,16,28,35,67,60,34,127,-6,35,-9,3,-6, 
  /* [17][0][][] */ 6,-13,-63,-69,-33,-25,63,92,-25,127,-47,5,-19,77,80,3, 
  /* [18][0][][] */ 27,127,-48,46,0,-35,38,-45,69,91,-38,20,38,-49,92,-63, 
  /* [19][0][][] */ 53,32,122,127,2,91,13,8,94,63,-50,-14,-113,19,-30,-50, 
  /* [20][0][][] */ 106,-76,-66,-127,-20,-29,59,-64,-41,40,-112,2,1,28,64,33, 
  /* [21][0][][] */ 68,17,108,126,-24,106,37,29,-68,127,76,-117,61,48,32,-41, 
  /* [22][0][][] */ -21,-9,-26,-65,49,40,62,127,-13,-64,-37,98,43,54,16,91, 
  /* [23][0][][] */ -50,14,-64,14,59,-88,17,17,94,12,-39,14,-127,-2,-32,-12, 
  /* [24][0][][] */ 23,-60,15,-38,44,49,-15,23,57,-4,54,122,-35,83,127,49, 
  /* [25][0][][] */ -127,-11,-35,-101,-44,-79,25,-62,-113,-79,-66,-45,-16,-45,-121,-3, 
  /* [26][0][][] */ 7,3,-7,-13,-48,-33,-1,63,-17,-21,-16,-50,45,-127,39,54, 
  /* [27][0][][] */ -127,10,-39,46,14,62,-6,19,25,-18,108,-2,-1,22,54,-26, 
  /* [28][0][][] */ -15,2,-12,25,-25,-62,44,27,28,20,-69,-20,-127,-39,12,58, 
  /* [29][0][][] */ 48,51,78,-73,57,-66,-2,-61,-127,48,-59,-8,3,41,-85,7, 
  /* [30][0][][] */ -2,20,-127,0,27,-25,-15,56,10,-19,41,-24,-40,-84,-13,-12, 
  /* [31][0][][] */ 96,-6,-71,-24,-61,41,-47,33,-40,-16,-52,-23,51,-47,27,127, 
  /* [32][0][][] */ -45,127,17,77,8,33,31,-16,39,-11,56,-12,-72,70,-6,-49, 
  /* [33][0][][] */ -1,-37,127,51,-79,92,3,-24,25,38,58,74,-19,-27,-7,0, 
  /* [34][0][][] */ -18,-80,-59,-83,14,-33,-11,-33,-80,-127,-51,-109,-68,15,-16,54, 
  /* [35][0][][] */ 5,-34,-27,38,20,-21,4,16,-89,0,-14,9,24,127,-38,-36, 
  /* [36][0][][] */ 3,-23,-8,-13,1,36,26,76,-9,10,127,3,37,44,14,-17, 
  /* [37][0][][] */ -55,29,127,-44,-127,-100,97,-55,-36,73,-2,-47,45,-81,51,-34, 
  /* [38][0][][] */ 10,-22,-3,52,26,-11,-32,9,6,2,127,-35,81,81,44,-3, 
  /* [39][0][][] */ -64,38,-26,25,-73,-79,1,127,-105,-36,7,-22,26,-29,80,109, 
  /* [40][0][][] */ 127,14,-9,-38,46,115,-33,71,-1,-22,47,95,95,62,21,12, 
  /* [41][0][][] */ -61,-81,34,-94,38,24,-33,-127,-18,-5,52,-49,-29,-29,-91,19, 
  /* [42][0][][] */ 30,33,44,20,5,-26,-80,-31,-18,-117,-4,-44,-40,127,-3,16, 
  /* [43][0][][] */ 16,103,2,127,-16,-43,90,-105,-21,53,5,10,127,23,-6,50, 
  /* [44][0][][] */ -69,-1,-60,46,64,127,-94,15,-5,1,74,-28,4,-40,-61,-57, 
  /* [45][0][][] */ -9,31,-62,-127,3,-8,28,-10,-49,-40,-118,37,-8,-53,40,-14, 
  /* [46][0][][] */ -6,54,20,-30,-2,22,-55,26,-19,-87,-76,13,-91,127,41,-17, 
  /* [47][0][][] */ 11,-56,110,-7,-43,107,-127,76,19,82,80,42,-9,-122,47,-32, 
  /* [48][0][][] */ 6,-18,-4,-127,-3,-49,-1,11,35,-44,6,-2,5,44,-49,46, 
  /* [49][0][][] */ 40,-7,96,127,115,66,-23,36,-81,4,101,108,15,33,123,-35, 
  /* [50][0][][] */ -49,-3,123,-99,69,127,-3,-79,-8,-1,101,17,122,34,57,-6, 
  /* [51][0][][] */ 14,47,41,5,16,65,-56,6,37,16,28,127,11,20,17,-60, 
  /* [52][0][][] */ -45,45,127,-30,-1,-43,27,-8,-90,-14,24,48,-5,84,-80,-51, 
  /* [53][0][][] */ 21,-16,27,-127,-16,-71,34,7,-54,-11,-3,-10,-11,21,39,41, 
  /* [54][0][][] */ 40,3,-8,-42,15,68,-4,51,63,44,65,12,-70,127,80,-5, 
  /* [55][0][][] */ -34,-23,-40,6,5,-21,-41,-127,9,-56,17,-1,-47,-3,-8,-45, 
  /* [56][0][][] */ 59,32,121,66,82,20,-24,127,-23,-30,40,5,55,-35,-76,22, 
  /* [57][0][][] */ 65,26,45,-33,-127,-54,-15,-33,-55,-3,-12,-47,-10,-45,31,1, 
  /* [58][0][][] */ 127,51,70,111,-47,72,-1,-45,26,122,114,-7,-120,2,34,-68, 
  /* [59][0][][] */ 127,5,85,82,-36,23,2,1,-11,68,-32,-3,57,-10,22,5, 
  /* [60][0][][] */ -127,33,20,-39,-28,-46,-10,28,-59,-51,82,-25,-100,31,103,-38, 
  /* [61][0][][] */ -7,18,51,2,0,33,-30,30,10,-88,127,-25,90,65,-31,15, 
  /* [62][0][][] */ 18,-43,-58,95,9,39,-11,127,31,-14,45,90,-56,30,-73,-44, 
  /* [63][0][][] */ -35,-86,102,-92,-57,-127,57,-16,35,50,-75,-16,10,13,67,37, 
  /* [64][0][][] */ 27,82,-41,19,75,50,53,-51,-11,27,-72,60,-127,-68,-24,-40, 
  /* [65][0][][] */ 27,55,3,-47,60,-4,12,-96,-46,-127,-47,7,13,-25,59,43, 
  /* [66][0][][] */ -105,-59,-27,-31,-36,-12,36,-13,-66,-74,-52,7,50,36,66,127, 
  /* [67][0][][] */ 19,-25,105,90,10,98,-105,-7,-1,8,-26,14,-2,-18,-127,-22, 
  /* [68][0][][] */ -47,-46,-113,127,-17,19,-90,-87,-71,32,-3,-84,-98,-86,-63,-84, 
  /* [69][0][][] */ 50,120,-12,79,-1,27,24,-127,34,59,-58,59,-6,-33,34,-1, 
  /* [70][0][][] */ -7,-26,-53,-37,80,-127,-21,12,52,-36,-12,-12,15,121,-54,64, 
  /* [71][0][][] */ -16,58,0,86,44,-127,-6,119,18,-86,-17,52,54,-34,-27,40, 
  /* [72][0][][] */ -99,-37,-44,81,-2,33,2,-8,-10,-17,-84,47,125,6,47,127, 
  /* [73][0][][] */ -23,10,86,127,-4,35,-33,-57,-8,53,116,12,71,61,-17,-71, 
  /* [74][0][][] */ 63,0,43,-59,-32,-38,10,-19,1,-23,-127,75,-95,-5,-12,28, 
  /* [75][0][][] */ 14,-4,-3,127,-29,12,18,-7,-32,94,-14,7,14,12,-38,-36, 
  /* [76][0][][] */ -9,19,-24,68,44,-45,15,-127,44,-94,-3,55,43,-19,58,-23, 
  /* [77][0][][] */ 88,-21,5,117,-9,-20,-41,-21,127,-21,-124,61,-10,54,-56,26, 
  /* [78][0][][] */ -69,-29,115,-41,5,-26,-127,11,-2,-67,-42,6,122,127,92,26, 
  /* [79][0][][] */ 10,21,46,-17,24,16,-19,-38,-3,-29,34,-47,127,0,8,-31, 
  /* [80][0][][] */ -70,-90,-3,127,5,-17,2,34,-67,-32,-48,0,103,-68,29,10, 
  /* [81][0][][] */ 10,-3,-20,30,127,76,-29,-25,27,-63,17,-65,-49,22,-30,-1, 
  /* [82][0][][] */ 55,58,25,-3,-56,-6,-35,-39,-12,34,127,-79,-13,62,-15,-26, 
  /* [83][0][][] */ 125,32,12,-56,8,-21,-24,52,18,-6,127,-81,-3,-20,-23,-79, 
  /* [84][0][][] */ 74,-24,-126,10,28,-26,-33,-68,-39,-71,-127,5,-42,-8,-120,2, 
  /* [85][0][][] */ -33,10,-89,-70,-10,-10,77,127,-92,82,-2,-35,13,96,87,-12, 
  /* [86][0][][] */ 105,45,-67,33,-51,-113,-7,-23,17,21,-127,3,-43,85,27,64, 
  /* [87][0][][] */ -8,-23,127,-46,90,104,-78,30,60,-53,9,50,-31,-22,20,-26, 
  /* [88][0][][] */ -7,-98,7,-62,51,-48,-82,-127,27,-95,-30,17,1,21,34,-42, 
  /* [89][0][][] */ 24,-5,103,-127,45,48,7,14,45,-78,-67,-49,-14,58,72,4, 
  /* [90][0][][] */ 2,14,-37,43,30,-33,60,-127,59,111,-90,42,-1,18,99,21, 
  /* [91][0][][] */ -2,8,-52,-5,-56,-127,11,24,-41,13,-44,-35,2,-23,48,20, 
  /* [92][0][][] */ 45,3,127,58,29,-3,-10,6,32,-1,48,1,43,104,78,-22, 
  /* [93][0][][] */ 115,9,-32,-33,32,-127,48,8,-71,24,-120,57,-72,-22,42,113, 
  /* [94][0][][] */ 14,-31,59,62,127,-27,6,84,44,2,12,29,-85,94,-2,-83, 
  /* [95][0][][] */ -122,36,45,10,8,74,12,-13,-54,-23,127,24,-12,32,4,-5, 
};
const TfArray<96, float> quant19_scale = { 96, { 0.00086280022514984012, 0.00088141456944867969, 0.00048911699559539557, 0.0026004756800830364, 0.0013768119970336556, 0.00047380314208567142, 0.00056686351308599114, 0.0014803818194195628, 0.00097470631590113044, 0.00035523550468496978, 0.00056360266171395779, 0.00097044173162430525, 0.0011873890180140734, 0.00065082375658676028, 0.00071522657526656985, 0.00078662676969543099, 0.0010182216065004468, 0.00059851538389921188, 0.00092527503147721291, 0.00073591188993304968, 0.00076805072603747249, 0.00048347670235671103, 0.00061460281722247601, 0.00056093762395903468, 0.00053279154235497117, 0.00070550316013395786, 0.00087916158372536302, 0.00047613561036996543, 0.0010858349269255996, 0.00096556503558531404, 0.00086543423822149634, 0.00042883219430223107, 0.00059697963297367096, 0.00083707668818533421, 0.00052780570695176721, 0.001858804258517921, 0.00042541959555819631, 0.00052967970259487629, 0.00097425677813589573, 0.00063035875791683793, 0.0010835509747266769, 0.00030387949664145708, 0.0007429436082020402, 0.00059151963796466589, 0.00046191649744287133, 0.0006470545195043087, 0.00073219672776758671, 0.00040598976192995906, 0.00080700073158368468, 0.00037192719173617661, 0.00078342267079278827, 0.0021176522132009268, 0.00051818799693137407, 0.00060773629229515791, 0.00071200646925717592, 0.00062075222376734018, 0.0010531143052503467, 0.00054550729691982269, 0.00052290142048150301, 0.0012950664386153221, 0.00042521991417743266, 0.00076578493462875485, 0.00077306432649493217, 0.00083220849046483636, 0.00083467515651136637, 0.00056166714057326317, 0.00072434445610269904, 0.00094498106045648456, 0.00026732429978437722, 0.00057138997362926602, 0.00064039445715025067, 0.0014373670564964414, 0.0010733719682320952, 0.001020758762024343, 0.00064311217283830047, 0.0010814389679580927, 0.00056709529599174857, 0.00081670709187164903, 0.00027705726097337902, 0.0015012044459581375, 0.0012852278305217624, 0.0013413620181381702, 0.0010999859077855945, 0.0012696870835497975, 0.00070434185909107327, 0.00073174445424228907, 0.00045720787602476776, 0.00055130699183791876, 0.00038667011540383101, 0.0010697954567149282, 0.00086364109301939607, 0.00098192167934030294, 0.00053770613158121705, 0.00026673093088902533, 0.00085031520575284958, 0.00061069673392921686, } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -26239, 1, 7628, -14039, -4415, -4299, -12073, -40882, -481, 13607, 25476, -14893, 1247, -24077, 37589, -37690, };
const TfArray<16, float> quant20_scale = { 16, { 0.00067956640850752592, 0.00058959878515452147, 0.00085356045747175813, 0.00090064248070120811, 0.00072811968857422471, 0.00067874119849875569, 0.00091308634728193283, 0.00051662797341123223, 0.00044799924944527447, 0.00043309869943186641, 0.00057103997096419334, 0.00051293196156620979, 0.00096584472339600325, 0.0012001128634437919, 0.00042718328768387437, 0.00040900625754147768, } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -31,-1,-11,18,23,-12,16,89,-40,-6,21,20,25,-2,17,13,25,9,5,8,75,-20,34,127,-32,44,-14,-11,25,-10,32,-19,-22,42,25,-60,6,25,14,-18,-68,-36,43,40,23,3,-89,-56, 
  /* [1][0][][] */ -21,4,16,18,-11,8,6,57,-41,-35,11,-45,-37,26,8,-17,-13,94,-13,13,-12,21,-15,-6,43,-44,25,10,-25,-89,-36,32,-32,9,40,-9,23,-49,6,18,-9,-56,127,7,11,-9,7,-12, 
  /* [2][0][][] */ -16,-23,6,-52,-20,-71,-2,-25,2,-5,-10,11,20,13,-2,9,-3,-15,-1,-11,6,-18,-6,-127,-9,80,-27,1,-7,-20,-10,1,-32,60,17,2,18,12,26,-11,-70,5,-9,-17,-12,-16,19,-5, 
  /* [3][0][][] */ 0,49,0,-41,-2,11,1,0,-12,2,5,30,-127,11,9,-10,-3,11,-21,-1,-39,6,10,11,-12,-6,-10,25,-7,9,5,20,8,-6,11,17,-9,27,50,15,7,20,40,-40,15,-13,18,28, 
  /* [4][0][][] */ 31,-29,-25,12,48,27,2,-17,-38,6,-2,-16,10,53,-7,-5,4,11,-61,14,7,9,20,65,3,-12,6,62,15,-82,22,3,15,-33,24,-127,9,37,0,21,-29,20,-9,-30,-58,-26,4,5, 
  /* [5][0][][] */ 16,-4,-46,41,-2,1,3,31,4,-4,49,-2,3,65,18,4,-33,24,25,-27,2,-7,3,-45,1,-29,4,-11,8,-2,0,2,77,-127,5,18,-19,-16,27,26,-127,42,14,-19,-18,-3,-114,0, 
  /* [6][0][][] */ 35,0,12,14,-15,-9,19,-15,-7,6,-10,-8,-7,-31,9,6,4,-6,127,30,12,26,23,-24,21,-11,30,-13,-9,-17,-7,0,1,-7,13,-30,17,-41,58,11,13,-4,-12,19,9,14,9,-7, 
  /* [7][0][][] */ -25,-22,-20,56,-10,92,-30,36,14,29,9,127,77,-3,1,-8,4,-28,-4,-6,-44,10,-14,72,-6,-59,-55,-26,-2,-34,-6,-2,19,-15,-32,4,8,-86,82,-4,43,41,-55,-49,-11,-33,8,-42, 
  /* [8][0][][] */ -45,-36,-13,24,-10,11,-10,7,19,-71,15,53,53,-10,29,2,21,58,7,24,-20,19,2,-17,3,-15,10,62,16,127,-24,63,11,10,-18,-112,-113,75,11,16,23,-8,105,-4,9,32,46,36, 
  /* [9][0][][] */ -26,56,9,20,-26,-17,-10,3,62,-71,8,62,-90,-12,22,18,-27,-6,-46,-5,28,-12,-19,-20,13,6,27,-34,16,29,-30,-58,2,-2,127,-92,-5,-102,-93,15,-36,38,86,21,36,-9,-29,-53, 
  /* [10][0][][] */ -28,8,-41,-127,13,75,15,9,26,30,21,18,33,-36,-30,34,-7,-27,33,-2,29,-22,34,23,-42,-64,-13,-17,44,24,33,-65,-11,-85,26,-2,8,-41,18,5,-50,-48,-1,-10,-17,-1,25,-58, 
  /* [11][0][][] */ 1,42,-38,44,32,-61,-35,-3,-16,27,9,5,-10,85,10,-56,6,60,-2,-38,-63,-58,20,6,12,-5,11,-11,67,-37,36,-127,45,-3,-38,-87,81,21,15,-96,-4,46,107,-73,-8,-63,14,20, 
  /* [12][0][][] */ 127,-16,-9,-7,3,6,22,87,24,-15,-58,-22,10,-28,3,8,-13,8,5,-7,16,6,8,19,-16,26,-32,1,12,16,9,-7,2,-60,-9,12,-4,-17,-38,9,-18,-78,1,-113,-11,19,75,-17, 
  /* [13][0][][] */ 7,2,-9,5,8,-14,-13,4,-2,0,7,26,-5,2,12,-9,7,6,16,0,17,-6,11,2,4,-13,13,127,7,-6,7,-5,-1,7,-29,20,16,-2,-2,-14,-9,-2,2,17,2,-13,-5,-28, 
  /* [14][0][][] */ 49,-59,43,-38,66,-5,73,-102,-50,-40,-17,127,-47,-31,69,31,72,56,-26,53,32,30,54,-11,4,40,-54,-92,62,-54,75,34,3,73,-116,-12,-17,25,56,-18,-26,-6,47,15,-5,2,11,-48, 
  /* [15][0][][] */ 7,-71,-54,18,48,-1,78,-67,-4,8,-31,-8,71,21,-127,58,73,55,64,-71,-70,-10,85,9,-50,23,51,35,59,55,32,-30,13,73,78,127,-9,-73,-16,-82,103,33,93,-25,7,7,-3,53, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.028881572186946869, 0.025057947263121605, 0.03627631813287735, 0.038277305662631989, 0.030945084989070892, 0.028846500441431999, 0.038806170225143433, 0.021956687793135643, 0.019039968028664589, 0.018406694754958153, 0.024269197136163712, 0.021799609065055847, 0.041048400104045868, 0.051004793494939804, 0.018155289813876152, 0.01738276518881321, } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 5800, 55285, -2344, 65553, 3785, 137093, -1513, 64564, 6288, 37260, 24565, 4687, -7010, 30778, 3267, -2727, -856, -1098, 2619, -2221, 541, 361, -1050, -8749, -2793, 52790, 135460, 119744, 4217, 6894, -6872, -2123, 26720, 1426, 68290, 12001, 97095, 6689, 67719, 619, 5649, 65154, 899, 3848, 50451, 1143, 5879, 58776, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.5712585637811571e-05, 3.2287258363794535e-05, 0.00015748565783724189, 4.9809477786766365e-05, 0.00010995050251949579, 5.2821385907009244e-05, 0.00014127649774309248, 8.9579327323008329e-05, 6.63618920953013e-05, 3.0149234589771368e-05, 3.3642249036347494e-05, 8.0905869253911078e-05, 4.1998617234639823e-05, 3.5873690649168566e-05, 0.00015804689610376954, 0.00020021441741846502, 0.00011686143989209086, 6.7644083173945546e-05, 9.2000227596145123e-05, 0.00011697768786689267, 8.6071042460389435e-05, 9.4805465778335929e-05, 0.00013546417176257819, 6.9208799686748534e-05, 0.00011160834401380271, 7.3207767854910344e-05, 2.5978244593716227e-05, 5.3410698455991223e-05, 0.00017229854711331427, 8.6517276940867305e-05, 9.4956005341373384e-05, 0.00013123531243763864, 3.6729445128003135e-05, 0.00012758430966641754, 2.1970825400785543e-05, 4.1122100810753182e-05, 5.726407835027203e-05, 6.2736355175729841e-05, 8.7216278188861907e-05, 0.00010808557271957397, 7.6047581387683749e-05, 9.04715561773628e-05, 7.8202239819802344e-05, 6.1198988987598568e-05, 2.3861912268330343e-05, 0.00019450573017820716, 9.1811431047972292e-05, 2.7456941097625531e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 80,-94,110,66,51,-37,103,-68,55,-101,-72,54,57,-57,-83,-94,109,85,49,82,70,-75,-77,56,-35,-42,-67,-67,-73,72,-61,-117,-19,48,75,69,-73,62,-51,-20,61,-77,58,64,-78,5,83,-26, 90,-106,127,77,-79,-73,-70,-85,96,-105,-61,71,81,-99,-100,88,-39,100,79,127,95,-119,41,71,-55,-75,-81,-82,45,92,-27,-126,-73,84,86,78,-100,92,-75,-12,70,-96,81,87,-64,-127,105,-96, 31,-47,74,40,21,-42,-48,-41,40,-32,6,24,34,-74,-59,4,-61,44,37,69,42,-56,30,33,-30,-43,-47,-28,30,42,98,-88,-90,58,45,36,-41,48,-36,-3,44,-42,38,52,-13,-15,36,-75, 
  /* [0][1][][] */ 103,-127,-37,96,51,-88,127,-100,90,-107,-76,92,92,-107,-15,-127,127,106,77,-39,88,109,-127,70,71,-78,-90,-98,-127,93,-64,-10,-92,78,114,99,-91,87,-82,87,79,-91,83,97,-79,92,98,-80, 127,-126,-61,127,-127,-127,-98,-127,127,-127,-127,127,127,-127,-19,102,-66,127,127,-53,127,127,64,127,127,-127,-127,-127,45,127,-33,18,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-13,127,-127, 64,-85,-33,64,40,-62,-49,-69,56,-46,-57,58,53,-56,-17,21,-62,53,62,-32,63,67,54,66,62,-65,-62,-48,36,54,127,17,-59,81,48,48,-40,68,-60,61,64,-57,61,71,-58,-64,62,-56, 
  /* [0][2][][] */ 47,-77,-44,59,30,-58,74,-45,53,-78,-13,47,66,-61,79,-79,67,50,43,-37,21,-17,-67,35,-35,-45,-55,-59,-72,38,-38,98,-91,43,55,43,-30,50,-48,-84,52,-58,50,64,-23,15,46,-68, 81,-95,-44,74,-51,-63,-72,-71,56,-78,-74,72,76,-39,127,36,-50,70,65,-54,50,-24,45,70,-45,-57,-85,-70,30,57,-19,127,-65,63,56,56,-44,71,-74,-95,68,-65,69,78,-99,49,67,-63, 43,-67,-25,49,33,-23,-20,-42,22,-24,-51,31,40,-7,69,33,-36,33,30,-32,38,-4,48,48,-20,-26,-56,-32,38,31,62,79,-9,36,18,23,-16,41,-37,-58,37,-36,35,45,-63,6,33,-11, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0027927849441766739, 0.0013722084695473313, 0.0066931406036019325, 0.002116902731359005, 0.0046728961169719696, 0.0022449088282883167, 0.0060042510740458965, 0.0038071214221417904, 0.0028203802648931742, 0.0012813424691557884, 0.0014297955203801394, 0.0034384995233267546, 0.0017849411815404892, 0.0015246318653225899, 0.0067169931717216969, 0.0085091125220060349, 0.0049666110426187515, 0.0028748733457177877, 0.0039100097492337227, 0.0049715517088770866, 0.0036580192390829325, 0.0040292320773005486, 0.005757227074354887, 0.0029413739684969187, 0.004743354395031929, 0.0031113300938159227, 0.001104075345210731, 0.0022699546534568071, 0.0073226881213486195, 0.0036769842263311148, 0.0040356302633881569, 0.0055775009095668793, 0.0015610014088451862, 0.0054223327897489071, 0.00093376007862389088, 0.0017476893262937665, 0.0024337233044207096, 0.0026662950403988361, 0.003706691786646843, 0.0045936368405818939, 0.0032320222817361355, 0.0038450409192591906, 0.0033235952723771334, 0.002600956941023469, 0.0010141312377527356, 0.0082664936780929565, 0.0039019857067614794, 0.0011669199448078871, } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 157, 1123, 2171, -339, 6755, 18444, 1955, -15, -833, -316, 1199, 1077, 3498, 718, 28270, 2843, 1709, -1821, -295, 3042, -1437, 8792, 14390, 8449, 9891, 100, 4832, 3444, 7297, -835, 6803, 4075, 343, -486, 4104, 4556, -2130, 39, -198, 5509, 154, -784, -848, 196, 975, 7847, 254, 1150, };
const TfArray<48, float> quant24_scale = { 48, { 0.00044954803888686001, 0.00064934982219710946, 0.00024789906456135213, 0.00038080336526036263, 0.00032971368636935949, 0.00022329481726046652, 0.00043844009633176029, 0.00042747790575958788, 0.00036268375697545707, 0.00087397376773878932, 0.00081248435890302062, 0.00035142965498380363, 0.00038111786125227809, 0.00087831373093649745, 0.00012569606769829988, 0.00040510570397600532, 0.0002523738075979054, 0.00029263854958117008, 0.00024164331261999905, 0.00030042024445720017, 0.00040909970994107425, 0.0002896794758271426, 0.00027234700974076986, 0.00017538297106511891, 0.00019423184858169407, 0.00031770364148542285, 0.0014359684428200126, 0.00047615796211175621, 0.00025765714235603809, 0.00042323052184656262, 0.00036116040428169072, 0.00026978168170899153, 0.00079495349200442433, 0.00023411068832501769, 0.00090429116971790791, 0.00042658261372707784, 0.00065413309494033456, 0.00038269860669970512, 0.00032956962240859866, 0.00035171982017345726, 0.00020623260934371501, 0.00024091739032883197, 0.00033438543323427439, 0.00033056578831747174, 0.001909774960950017, 0.00020386085088830441, 0.00037170041468925774, 0.0011796014150604606, } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,8,2,80,-41,26,13,-16, 
  /* [1][0][][] */ 41,117,60,77,60,-64,123,127, 
  /* [2][0][][] */ -28,-25,-29,-9,-127,14,4,0, 
  /* [3][0][][] */ 63,-2,9,-67,-127,32,42,-31, 
  /* [4][0][][] */ -127,13,11,-5,8,19,101,-5, 
  /* [5][0][][] */ -127,-14,17,27,-119,-9,4,103, 
  /* [6][0][][] */ -15,-127,-17,-24,1,-33,63,46, 
  /* [7][0][][] */ -37,6,-10,53,127,-34,-30,1, 
  /* [8][0][][] */ 32,42,34,-127,38,31,-60,-50, 
  /* [9][0][][] */ 8,-127,8,-6,-31,109,-44,68, 
  /* [10][0][][] */ -119,-37,22,68,-70,51,127,5, 
  /* [11][0][][] */ 127,30,-5,-3,-30,-35,-13,-107, 
  /* [12][0][][] */ 2,14,32,-7,0,-74,127,84, 
  /* [13][0][][] */ 70,-35,-7,-7,70,127,79,-26, 
  /* [14][0][][] */ 127,96,23,119,-107,-37,17,-33, 
  /* [15][0][][] */ -15,-127,4,7,8,-12,22,52, 
  /* [16][0][][] */ 22,-39,11,-12,-127,21,16,-19, 
  /* [17][0][][] */ -64,127,-117,-1,4,-112,118,-86, 
  /* [18][0][][] */ 127,-45,-52,36,-74,45,27,95, 
  /* [19][0][][] */ 127,-92,-39,-15,53,-1,6,-3, 
  /* [20][0][][] */ 127,0,-14,91,-6,36,-16,-25, 
  /* [21][0][][] */ 2,9,-74,-27,17,42,-127,-55, 
  /* [22][0][][] */ -127,44,73,-23,-39,29,-50,-51, 
  /* [23][0][][] */ -27,-55,31,5,-127,92,91,-35, 
  /* [24][0][][] */ 127,-115,-18,-3,-67,6,-11,-73, 
  /* [25][0][][] */ 39,-38,-4,-34,127,62,64,-37, 
  /* [26][0][][] */ 22,-70,35,-13,67,-127,108,-36, 
  /* [27][0][][] */ -17,-127,27,-18,-4,-68,31,-12, 
  /* [28][0][][] */ -21,38,3,50,-13,-22,127,30, 
  /* [29][0][][] */ -20,42,21,13,12,21,-92,-127, 
  /* [30][0][][] */ 127,36,35,21,-11,1,-39,-2, 
  /* [31][0][][] */ -2,24,-3,12,13,-98,127,28, 
  /* [32][0][][] */ -60,-21,-21,-13,-127,-66,-76,28, 
  /* [33][0][][] */ -7,1,-8,1,-127,-36,-46,8, 
  /* [34][0][][] */ 8,-127,51,-13,17,63,-57,40, 
  /* [35][0][][] */ -36,-61,-127,-5,6,-77,48,-57, 
  /* [36][0][][] */ 2,127,60,13,-17,52,-33,-56, 
  /* [37][0][][] */ -127,38,4,7,67,-34,-4,-100, 
  /* [38][0][][] */ -127,-19,-37,-35,33,16,16,65, 
  /* [39][0][][] */ -17,-44,44,3,33,-34,127,79, 
  /* [40][0][][] */ -36,-13,-26,-48,-116,99,127,-38, 
  /* [41][0][][] */ -127,30,-46,-38,-71,-79,-80,61, 
  /* [42][0][][] */ -28,-118,-47,18,-40,84,-127,-90, 
  /* [43][0][][] */ -57,-2,-43,-111,127,76,69,-7, 
  /* [44][0][][] */ 127,-2,34,-89,42,-64,-47,75, 
  /* [45][0][][] */ 8,-127,-22,7,-8,-109,106,45, 
  /* [46][0][][] */ 103,-12,-11,-24,127,-46,-42,4, 
  /* [47][0][][] */ 127,43,-30,60,14,50,36,-77, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00080331729259341955, 0.0011603519087657332, 0.00044298183638602495, 0.0006804743898101151, 0.00058917998103424907, 0.00039901540731079876, 0.00078346801456063986, 0.00076387921581044793, 0.00064809567993506789, 0.0015617423923686147, 0.0014518642565235496, 0.00062798522412776947, 0.00068103638477623463, 0.0015694977482780814, 0.00022461188200395554, 0.00072390132118016481, 0.0004509779391810298, 0.00052292877808213234, 0.00043180314241908491, 0.00053683423902839422, 0.00073103839531540871, 0.00051764107774943113, 0.00048666895600035787, 0.00031339959241449833, 0.0003470814845059067, 0.00056771870004013181, 0.0025659955572336912, 0.00085086777107790112, 0.0004604189598467201, 0.00075628934428095818, 0.00064537354046478868, 0.00048208481166511774, 0.0014205375919118524, 0.00041834276635199785, 0.0016159178921952844, 0.00076227937825024128, 0.0011688993545249104, 0.00068386108614504337, 0.0005889225285500288, 0.00062850373797118664, 0.00036852617631666362, 0.00043050595559179783, 0.00059752812376245856, 0.00059070263523608446, 0.00341266137547791, 0.00036428798921406269, 0.00066420790972188115, 0.0021078819409012794, } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -25298, 54128, 2665, -10087, 16190, 37251, 38624, 35134, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00042970920912921429, 0.00043848250061273575, 0.0014837057096883655, 0.00144378119148314, 0.00061687256675213575, 0.00041756863356567919, 0.00046749439206905663, 0.0007930049323476851, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -3,-28,-30,14,10,-31,-13,-31,-107,120,-76,102,124,-20,95,-7,19,-32,-18,10,-39,1,38,-71,-10,-107,-6,64,-22,-5,8,-41,17,-58,127,15,-26,-17,36,-19,93,19,83,-20,-13,-8,-4,-6, 
  /* [1][0][][] */ 15,63,116,36,-15,-67,13,-50,45,-45,13,-2,0,-7,-27,-122,48,-127,21,36,-36,37,14,-18,-27,-28,0,27,23,2,29,-41,17,11,-17,-26,10,-76,85,-93,2,106,-19,50,-3,51,73,-32, 
  /* [2][0][][] */ 24,-48,11,-55,40,7,-10,-50,11,-5,-4,21,-5,59,17,-11,-59,119,-39,-12,-11,11,-50,-10,127,-21,4,-10,-36,5,0,-86,-4,-14,-1,-7,4,-20,-26,2,9,-24,-18,-8,10,32,-31,-50, 
  /* [3][0][][] */ -1,-74,-1,12,-20,15,-3,3,7,1,25,20,7,-11,38,9,-3,-31,15,16,-10,2,-30,-4,-7,51,5,-11,1,24,127,10,6,6,11,-4,-26,-3,-22,5,-27,14,-12,28,-8,1,-10,20, 
  /* [4][0][][] */ -90,15,10,21,5,-55,5,11,24,-48,38,-30,-48,16,-54,18,6,7,24,39,29,-58,18,-6,-25,60,39,125,3,-7,-9,-4,10,-127,-10,23,16,16,-2,-20,-46,-5,-31,33,-21,7,0,12, 
  /* [5][0][][] */ 27,-2,-23,-19,-37,-21,21,42,84,-14,1,2,-25,-59,24,61,-1,-124,-6,8,22,-55,-4,18,19,-17,-72,-49,-59,-37,18,-63,-8,-95,-3,-86,53,-20,-54,13,-32,-34,-7,-36,127,-35,-71,-23, 
  /* [6][0][][] */ -30,-28,-25,25,31,-77,22,-45,-42,35,76,1,33,4,-44,-90,-28,37,-41,-88,-81,65,-4,-82,24,4,-80,-73,50,32,11,24,-20,-124,-19,111,-99,-46,9,-111,-35,22,21,110,127,-42,53,17, 
  /* [7][0][][] */ -5,30,-77,49,-22,51,7,68,5,-10,79,-25,16,-42,-23,-6,-24,-127,51,-86,78,48,19,-30,17,-5,-2,-41,19,32,-14,35,-6,47,-10,-28,-61,-48,-32,-60,1,-60,25,63,-23,9,-6,-2, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.018262641504406929, 0.018635505810379982, 0.063057489693164825, 0.061360698193311691, 0.026217082515358925, 0.017746666446328163, 0.019868511706590652, 0.033702708780765533, } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -53342, 368, 11083, -2566, 6291, -2693, 2187, 45520, -1095, 41834, -1472, 34769, -3332, -1109, 18497, 22234, 3007, 16813, 41961, 16105, -716, -568, -738, 29860, -7355, 25167, 45762, 27843, 3229, 4256, -2684, -100, 2980, 15295, -5888, 16621, -10618, 15788, -22945, 150658, 31597, 29554, 13755, -1985, 16967, 5221, 2488, -3108, };
const TfArray<48, float> quant28_scale = { 48, { 0.00028058787574991584, 0.00027091798256151378, 0.00013967446284368634, 0.00022678196546621621, 0.00012181475176475942, 0.00010399688471807167, 0.00058884895406663418, 7.9675432061776519e-05, 0.00011911961337318644, 0.00011377155897207558, 0.00010530623694648966, 0.00012288018479011953, 0.00028343725716695189, 0.00011257601727265865, 0.00011569562775548548, 6.5123604144901037e-05, 0.00019794814579654485, 0.0002491512568667531, 5.837866774527356e-05, 0.0002085310552502051, 0.00022742479632142931, 0.00022085206001065671, 0.00019149402214679867, 7.582699618069455e-05, 0.00013270953786559403, 0.00014830744476057589, 0.00035041582304984331, 0.00010335456317989156, 0.00015823790454305708, 0.00017849740106612444, 0.00010630011092871428, 0.00023943003907334059, 0.00033103241003118455, 0.00018195630400441587, 0.00018328674195799977, 0.00015838557737879455, 0.00030772390891797841, 0.00015941061428748071, 0.00024566761567257345, 1.8144002751796506e-05, 9.9149838206358254e-05, 5.0401831686031073e-05, 0.0001204882501042448, 0.00015675423492211848, 0.00012035290274070576, 9.0016968897543848e-05, 0.00022048719984013587, 0.00010715045209508389, } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 7,-2,18,116,1,83,-4,24,17,9,15,7,-12,-8,-45,9,-4,8,-27,-114,-8,-21,127,-10,0,8,-6,8,-6,5,17,100,15,27,36,-28,-2,30,1,3,17,-67,-9,-13,25,-2,-11,-2, 127,8,13,-127,25,85,8,8,127,127,10,44,-58,-23,9,7,127,-56,-59,-62,-102,24,-106,14,17,72,-28,-87,25,22,14,-122,3,-58,127,7,-43,-50,0,114,-79,-102,-27,2,-27,-13,-127,28, -31,-3,6,19,-3,65,4,15,31,11,-16,33,-28,-4,20,1,-108,28,-3,67,-31,-15,-18,-8,-4,-62,-3,28,-19,7,6,-21,4,-22,13,-21,-2,45,43,-18,50,37,-17,15,-30,2,-8,-7, 
  /* [0][1][][] */ 121,6,-3,-97,14,-27,33,-20,8,8,-11,51,-15,-3,17,-35,-3,-50,-71,-78,10,-73,-124,-19,4,104,-15,-127,-9,30,12,-106,15,-49,-5,127,-3,59,-42,46,-61,-127,38,-91,-35,-16,-15,-3, 26,-126,-127,115,-127,-127,-127,-127,-122,-97,127,-127,127,127,35,-127,-86,127,127,-99,127,127,111,127,127,-127,-127,33,-127,-127,94,127,-127,127,-36,-42,127,-127,127,127,127,-82,127,127,127,-124,93,116, 49,3,47,-12,7,-60,40,15,-18,16,-113,-10,-9,-44,127,2,63,-66,-68,78,15,-47,12,-36,1,3,-38,71,20,41,2,0,28,-42,2,67,-5,66,69,-14,-78,-2,-80,-33,32,-14,-14,6, 
  /* [0][2][][] */ -47,-6,23,-16,4,25,-34,17,11,-25,17,30,1,-9,-46,15,-3,20,-25,95,5,-32,-18,-11,-3,28,-2,53,-10,0,45,-25,-18,-37,-36,-42,-2,35,11,-22,12,-19,41,-40,-23,17,-11,23, 70,127,74,20,13,-25,121,31,22,-4,43,23,-11,-2,-98,23,-64,-58,-36,99,-39,49,12,23,32,-64,-38,32,81,-1,127,23,81,-20,-3,-37,-26,-14,-10,127,-23,-30,-33,43,25,-38,3,-127, -37,-6,7,-4,6,-7,-60,3,-14,-12,-48,-45,15,-12,-13,9,28,22,-4,-127,25,-10,5,-9,-5,6,-10,-56,-17,7,4,5,-23,86,-45,-24,-6,40,24,-62,10,-11,-35,7,-36,127,-7,-2, 
};
const TfArray<48, float> quant29_scale = { 48, { 0.011924983933568001, 0.011514013633131981, 0.0059361644089221954, 0.0096382331103086472, 0.005177126731723547, 0.0044198674149811268, 0.025026081129908562, 0.0033862057607620955, 0.0050625833682715893, 0.0048352912999689579, 0.0044755148701369762, 0.0052224076353013515, 0.012046083807945251, 0.0047844806686043739, 0.0049170642159879208, 0.0027677530888468027, 0.0084127960726618767, 0.010588928125798702, 0.0024810933973640203, 0.0088625699281692505, 0.0096655534580349922, 0.0093862125650048256, 0.008138495497405529, 0.0032226471230387688, 0.0056401551701128483, 0.0063030663877725601, 0.014892672188580036, 0.0043925689533352852, 0.0067251110449433327, 0.0075861392542719841, 0.004517754539847374, 0.010175776667892933, 0.014068877324461937, 0.0077331424690783024, 0.0077896863222122192, 0.0067313867621123791, 0.013078265823423862, 0.0067749512381851673, 0.01044087391346693, 0.00077112007420510054, 0.0042138681747019291, 0.0021420777775347233, 0.0051207505166530609, 0.0066620549187064171, 0.0051149982027709484, 0.0038257210981100798, 0.0093707060441374779, 0.0045538940466940403, } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 40458, 7564, 7607, 5819, 1746, 8784, -1999, -323, 1241, 2569, 5109, 814, 1700, -509, 389, -1978, 3860, 13188, -283, 40916, 5533, 3669, 7126, -391, 3403, 4231, 21740, 9945, -216, -2198, -147, 2228, -1379, 10122, 2986, 6714, 9683, 2304, 20287, 2172, -864, 2181, 690, 4854, 6274, 2366, -1893, 2632, };
const TfArray<48, float> quant30_scale = { 48, { 0.00010578415094641969, 0.00029810052365064621, 0.00021925328474026173, 0.00055390957277268171, 0.0012901956215500832, 0.00053257739637047052, 0.00098325836006551981, 0.0010945401154458523, 0.0005407339776866138, 0.00055236340267583728, 0.00047803120105527341, 0.00032956511131487787, 0.00057546020252630115, 0.00057545723393559456, 0.00050856423331424594, 0.001785445143468678, 0.00041921576485037804, 0.00033876448287628591, 0.0016641486436128616, 6.8218694650568068e-05, 0.00020834477618336678, 0.00027304599643684924, 0.00055101129692047834, 0.00086528679821640253, 0.00034897009027190506, 0.00029235132387839258, 0.00018378299137111753, 0.00037789906491525471, 0.00069575413363054395, 0.001211487571708858, 0.00062787131173536181, 0.00039126942283473909, 0.0013908592518419027, 0.00021627273235935718, 0.00038864850648678839, 0.00028349622152745724, 0.00039745477261021733, 0.00048882537521421909, 0.00011298062599962577, 0.0019188110018149018, 0.00071497441967949271, 0.0011903764680027962, 0.00039511616341769695, 0.00034947157837450504, 0.00020374776795506477, 0.00041759983287192881, 0.00061411486240103841, 0.00086372345685958862, } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 31,34,-14,-45,127,-9,19,-13, 
  /* [1][0][][] */ -29,-2,-20,127,31,-10,-14,-1, 
  /* [2][0][][] */ 62,-105,35,66,50,-127,90,-22, 
  /* [3][0][][] */ 127,-36,1,21,3,-13,17,17, 
  /* [4][0][][] */ 10,-54,127,7,-40,-18,-4,-75, 
  /* [5][0][][] */ 72,26,20,12,127,9,1,3, 
  /* [6][0][][] */ -66,91,-23,121,22,30,-127,5, 
  /* [7][0][][] */ -28,127,-22,9,13,-16,40,18, 
  /* [8][0][][] */ 127,93,-21,-12,-42,13,28,-34, 
  /* [9][0][][] */ -127,-46,-4,8,45,39,-18,-6, 
  /* [10][0][][] */ -53,11,50,127,48,24,-77,4, 
  /* [11][0][][] */ -127,-53,5,-82,67,-27,-34,-30, 
  /* [12][0][][] */ 127,19,0,40,-35,-5,28,-16, 
  /* [13][0][][] */ 21,53,-127,-11,-15,99,-55,61, 
  /* [14][0][][] */ -35,-15,24,127,8,-65,-1,-10, 
  /* [15][0][][] */ -2,127,18,-2,10,-17,-17,-56, 
  /* [16][0][][] */ -7,-127,-46,20,11,-54,72,-1, 
  /* [17][0][][] */ 38,127,5,-10,-12,61,-60,-15, 
  /* [18][0][][] */ -5,32,-127,-34,29,59,7,47, 
  /* [19][0][][] */ -38,38,13,-17,-127,-50,20,32, 
  /* [20][0][][] */ -123,35,-29,-31,127,-28,110,-89, 
  /* [21][0][][] */ -64,-56,-19,-6,-127,13,17,4, 
  /* [22][0][][] */ -127,-7,6,45,49,-16,35,89, 
  /* [23][0][][] */ -19,-24,-21,-14,-9,110,-127,-126, 
  /* [24][0][][] */ -4,32,-127,3,10,21,-3,62, 
  /* [25][0][][] */ 28,-24,-2,127,-46,-38,4,-37, 
  /* [26][0][][] */ -9,-9,10,29,-22,127,94,-57, 
  /* [27][0][][] */ 59,-58,-18,-22,127,-1,35,-13, 
  /* [28][0][][] */ 40,72,-62,-18,22,71,3,127, 
  /* [29][0][][] */ -26,29,-21,-4,6,58,-127,-66, 
  /* [30][0][][] */ 21,2,13,-127,-6,-32,-17,-22, 
  /* [31][0][][] */ -51,-3,27,0,-127,52,26,4, 
  /* [32][0][][] */ 4,20,18,-127,-7,42,-12,-51, 
  /* [33][0][][] */ -74,3,-16,-8,-127,5,-1,5, 
  /* [34][0][][] */ -127,20,-11,-18,-7,13,19,17, 
  /* [35][0][][] */ 39,127,-13,-3,-49,-41,46,-44, 
  /* [36][0][][] */ 11,73,4,-1,4,127,-111,-50, 
  /* [37][0][][] */ 41,-127,3,4,9,-93,55,-46, 
  /* [38][0][][] */ -5,-127,59,-20,82,42,-107,64, 
  /* [39][0][][] */ 16,-127,-3,1,-17,-8,-62,-112, 
  /* [40][0][][] */ 127,33,-49,62,-23,73,-80,-91, 
  /* [41][0][][] */ 6,-116,-6,-3,-14,55,-72,127, 
  /* [42][0][][] */ 79,27,-29,-127,-70,-52,54,-56, 
  /* [43][0][][] */ -68,-26,-9,-127,19,7,-21,-20, 
  /* [44][0][][] */ -2,-47,26,32,-24,127,98,-22, 
  /* [45][0][][] */ -127,-29,-69,12,15,42,3,-15, 
  /* [46][0][][] */ 78,52,127,-11,-37,8,50,31, 
  /* [47][0][][] */ -5,36,20,127,12,2,-11,21, 
};
const TfArray<48, float> quant31_scale = { 48, { 0.00026015567709691823, 0.00073312059976160526, 0.00053921109065413475, 0.0013622335391119123, 0.0031729869078844786, 0.0013097712071612477, 0.0024181338958442211, 0.0026918097864836454, 0.0013298307312652469, 0.0013584310654550791, 0.0011756253661587834, 0.00081050168955698609, 0.0014152331277728081, 0.0014152259100228548, 0.0012507154606282711, 0.0043909572996199131, 0.0010309801436960697, 0.00083312578499317169, 0.0040926518850028515, 0.00016777068958617747, 0.00051238370360806584, 0.0006715038325637579, 0.0013551057782024145, 0.0021280057262629271, 0.00085822452092543244, 0.00071898155147209764, 0.00045197876170277596, 0.00092936970759183168, 0.0017110728658735752, 0.0029794196598231792, 0.0015441281720995903, 0.0009622515644878149, 0.0034205494448542595, 0.0005318809999153018, 0.00095580588094890118, 0.00069720420287922025, 0.00097746320534497499, 0.0012021715519949794, 0.00027785400743596256, 0.0047189448960125446, 0.0017583414446562529, 0.0029275007545948029, 0.00097171188099309802, 0.00085945782484486699, 0.00050107826245948672, 0.0010270060738548636, 0.0015102968318387866, 0.0021241609938442707, } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { -2918, -25619, 10156, 16638, -5775, 6536, 38641, 8555, };
const TfArray<8, float> quant32_scale = { 8, { 0.00091691955458372831, 0.00066302670165896416, 0.00079723406815901399, 0.0012015362735837698, 0.00085194723214954138, 0.0011358998017385602, 0.0008148635970428586, 0.0006833408260717988, } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -5,-12,18,-98,-5,21,2,18,0,15,9,7,91,0,3,1,0,6,-12,-3,82,-2,-4,0,34,48,14,11,13,13,2,-127,7,-5,-9,4,-14,-3,-28,35,0,-42,-10,-8,7,-2,5,13, 
  /* [1][0][][] */ -39,-14,-2,-9,57,40,-46,83,12,19,-3,-13,7,0,5,36,0,45,28,-59,-4,33,127,48,-21,3,53,16,16,-21,8,-10,23,8,-10,-27,-8,-56,18,2,-15,-8,-82,-19,-50,7,-51,-62, 
  /* [2][0][][] */ -36,1,-16,16,79,2,21,49,3,98,6,-56,-25,0,-8,70,0,9,-127,47,-3,13,6,-2,-27,68,59,46,-11,24,1,-19,10,10,8,-13,0,14,42,-17,16,-33,-33,8,2,-69,6,45, 
  /* [3][0][][] */ -1,7,-10,8,3,26,6,-9,72,24,6,-4,15,0,-25,2,0,-13,-3,5,-2,-10,5,-12,1,11,-10,-3,-25,3,0,-7,-44,30,-55,-12,6,-6,19,-127,3,0,-7,-19,-7,-2,-5,13, 
  /* [4][0][][] */ 0,-5,84,33,6,-23,-7,-2,10,-1,4,-18,-82,0,2,5,0,11,5,-2,60,-11,1,-6,4,48,6,40,-7,0,5,89,-6,19,10,1,24,-18,1,-15,-7,-127,1,3,2,-1,4,-2, 
  /* [5][0][][] */ -2,51,12,-4,-9,61,31,17,-29,38,25,60,28,0,-127,-9,0,-1,-33,8,-16,14,-8,21,-17,-22,33,-5,-6,32,25,-17,47,28,-51,-8,11,20,-58,16,30,6,-22,48,12,46,16,20, 
  /* [6][0][][] */ -29,-58,1,22,53,-83,-20,20,36,-10,-21,109,-5,0,-127,51,0,-14,35,-27,-14,10,24,-16,23,-22,-7,-21,51,-29,-15,-9,86,-41,30,-10,-3,-6,-90,-31,-20,-17,-5,-18,-33,-50,-42,-28, 
  /* [7][0][][] */ -108,-50,-24,-8,127,-14,55,23,44,-2,26,-50,-21,0,84,106,0,-6,-5,68,19,-11,-22,59,32,-4,55,23,42,60,72,-6,-10,-25,-20,-30,-23,18,3,33,51,-8,-1,4,66,12,62,92, 
};
const TfArray<8, float> quant33_scale = { 8, { 0.038969080895185471, 0.028178634122014046, 0.033882446587085724, 0.051065292209386826, 0.036207757890224457, 0.048275738954544067, 0.034631703048944473, 0.029041985049843788, } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 57550, 53992, 69260, 46463, -1279, 15605, 1133, 43591, 28239, 43384, 28147, 5799, -50578, -127, 53690, 2187, -204, 34417, 4281, -1209, -12402, 10460, 55216, 40378, 620, 37131, 59566, 19171, -958, 8044, -10248, -50989, 19174, 101702, 31996, 1963, 55180, -206, 108597, -30171, 6093, -30405, 1153, 87007, -3013, 162529, 666, -21079, };
const TfArray<48, float> quant34_scale = { 48, { 0.00010653366189217195, 7.3984185291919857e-05, 0.00011384881509002298, 8.8316868641413748e-05, 0.00010218557144980878, 0.0001946147094713524, 0.00010006985394284129, 4.5907268940936774e-05, 7.1283888246398419e-05, 2.2386964701581746e-05, 5.5911852541612461e-05, 3.0741492082597688e-05, 0.00018480172730050981, 0.005541567225009203, 5.1793544116662815e-05, 0.00022514055308420211, 0.0027484172023832798, 1.8181597624788992e-05, 4.9710291932569817e-05, 0.00017383726662956178, 8.4427156252786517e-05, 0.00014192327216733247, 0.00010513021697988734, 3.036339876416605e-05, 4.6355908125406131e-05, 7.4243289418518543e-05, 2.6536898076301441e-05, 4.625082146958448e-05, 0.00026763288769870996, 4.0796952816890553e-05, 4.6219534851843491e-05, 0.00018061704759020358, 0.00013013288844376802, 9.7378879218013026e-06, 7.5732015829999e-05, 0.00011546738096512854, 1.2038261047564447e-05, 0.00044139899546280503, 4.3843927414854988e-05, 0.00010018808825407177, 4.1760347812669352e-05, 0.00020762800704687834, 0.00013206375297158957, 9.6275234682252631e-06, 0.00011363486555637792, 3.6162829928798601e-05, 0.00022926396923139691, 8.830718434182927e-05, } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -40,-23,-8,-19,8,-44,-78,-72,-15,-54,10,68,36,-71,109,-50,-113,-87,40,-6,3,-57,-111,-74,-28,-108,-70,-26,69,20,99,29,-127,-92,-2,53,22,46,-127,84,-70,-12,108,-108,-3,-32,-85,102, 75,10,-32,-26,54,-127,-127,-79,59,-77,-112,101,38,-82,-3,61,-52,-103,64,10,10,-102,-127,-73,-2,-127,-127,-44,-62,26,-48,57,31,-127,62,76,14,72,-83,127,-127,11,122,-127,1,-19,-127,94, -28,34,5,-11,-67,-108,-58,-27,84,-14,-127,39,12,-71,-99,-9,-127,-22,27,11,-16,-64,-34,-17,-7,-31,-65,-4,-11,22,-18,8,108,-92,73,33,16,35,-15,16,-79,4,4,-80,-17,11,-54,20, 
  /* [0][1][][] */ -83,-127,-46,-47,-7,50,101,-106,-20,-99,-18,120,92,-64,23,-103,-121,-92,91,-78,51,-76,-105,-127,45,-109,-85,-36,122,-59,127,85,-42,-97,-10,81,-40,-77,-103,94,51,61,106,-101,-87,-120,82,117, 127,-82,-127,-127,127,38,95,-127,107,-127,-103,127,127,-14,-8,127,-60,-127,127,-127,127,-127,-117,-116,127,-104,-126,-127,-127,-127,-64,127,29,-126,127,127,-75,-127,-84,95,66,127,127,-108,-111,-127,127,127, -52,25,-60,-88,-119,-23,32,-41,127,-23,-67,35,58,-70,-26,-43,-37,-30,53,-73,57,-89,-37,-32,49,-22,-44,-41,12,-93,-32,18,31,-107,122,27,-44,-65,-10,-14,41,51,13,-67,-56,-38,69,31, 
  /* [0][2][][] */ -62,-118,-39,-37,1,33,-4,-44,-32,-58,-16,71,81,-127,-127,-66,-43,-28,67,79,56,-25,-12,-68,30,-56,-14,-55,77,36,79,64,108,-31,-34,2,-106,39,-23,32,9,43,19,-48,97,-82,0,26, 90,-80,-92,-93,80,18,7,-52,52,-69,-27,58,86,-26,14,94,-24,-32,79,127,79,-50,-17,-59,92,-76,-25,-93,-51,50,-43,113,-18,-59,65,10,-127,54,-15,-1,16,36,18,-68,127,-101,-12,39, -28,30,-42,-41,-77,-15,22,-24,64,-7,-11,41,34,-43,107,-28,-93,0,30,64,71,-22,-5,-9,41,-9,-17,-51,-12,37,-16,39,-92,-43,72,11,-21,22,15,-39,9,36,-8,-20,63,-36,-3,15, 
};
const TfArray<48, float> quant35_scale = { 48, { 0.0045276805758476257, 0.0031443277839571238, 0.0048385746777057648, 0.0037534667644649744, 0.0043428866192698479, 0.0082711251452565193, 0.0042529688216745853, 0.0019510588608682156, 0.0030295653268694878, 0.00095144601073116064, 0.002376253716647625, 0.001306513324379921, 0.0078540733084082603, 0.23551659286022186, 0.002201225608587265, 0.0095684733241796494, 0.1168077290058136, 0.00077271787449717522, 0.0021126873325556517, 0.0073880837298929691, 0.0035881539806723595, 0.0060317390598356724, 0.0044680340215563774, 0.0012904444010928273, 0.0019701260607689619, 0.0031553397420793772, 0.0011278181336820126, 0.0019656599033623934, 0.011374397203326225, 0.0017338704783469439, 0.0019643302075564861, 0.0076762242242693901, 0.0055306479334831238, 0.00041386022348888218, 0.0032186105381697416, 0.0049073635600507259, 0.00051162607269361615, 0.018759457394480705, 0.001863366924226284, 0.0042579937726259232, 0.0017748146783560514, 0.0088241901248693466, 0.0056127095595002174, 0.00040916973375715315, 0.0048294817097485065, 0.0015369203174486756, 0.0097437184303998947, 0.003753055352717638, } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 4276, -23, 10554, 7518, 7388, 9656, 11443, 8, 119, -150, 2809, 353, 18021, -90042312, 3805, 16662, -72686824, -150, -56, 22194, 2688, -8, -50, 392, 3239, -644, 40, 867, 4547, 1886, 2092, 14848, 4013, 372, -12, -2428, 627, 5546, -224, 15686, 1992, 14352, -1075, -150, 16986, 517, 21807, 5290, };
const TfArray<48, float> quant36_scale = { 48, { 0.00048792516463436186, 0.00039788431604392827, 0.00031115490128286183, 0.00023764332581777126, 0.00027408287860453129, 0.00023060357489157468, 0.00034604829852469265, 0.0010326694464311004, 0.00042853193008340895, 0.0032814780715852976, 0.00055262248497456312, 0.0016702327411621809, 0.0001251259382115677, 1.8011937497064423e-09, 0.00072647526394575834, 0.00019695954688359052, 1.8011937497064423e-09, 0.0049678469076752663, 0.00050094729522243142, 0.00017111827037297189, 0.00037711273762397468, 0.0038926783017814159, 0.00036108357016928494, 0.0015696875052526593, 0.0011463477276265621, 0.00079434661893174052, 0.0021029885392636061, 0.0011718878522515297, 0.00025639802333898842, 0.0015240596840158105, 0.0013753101229667664, 0.00015908406930975616, 0.00018716724298428744, 0.0085373660549521446, 0.00049060379387810826, 0.00043670713785104454, 0.002561730332672596, 0.00024522095918655396, 0.0027655144222080708, 0.00021880406711716205, 0.001306552323512733, 0.00016131211305037141, 0.00025520107010379434, 0.0067987050861120224, 0.00029620720306411386, 0.00059603090630844235, 0.00012843943841289729, 0.00016719776613172144, } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 3,-127,40,-66,50,-19,-53,33, 
  /* [1][0][][] */ 87,113,23,-88,19,-2,-99,127, 
  /* [2][0][][] */ 29,16,-31,107,26,127,39,73, 
  /* [3][0][][] */ 110,87,-96,127,-101,-8,-2,25, 
  /* [4][0][][] */ -29,-111,35,31,29,-6,-2,-127, 
  /* [5][0][][] */ 49,-61,-26,54,31,-80,12,127, 
  /* [6][0][][] */ 47,-15,-64,-82,127,-25,42,-43, 
  /* [7][0][][] */ 127,12,-9,-43,69,-21,58,-60, 
  /* [8][0][][] */ 8,-25,32,127,16,2,-4,-123, 
  /* [9][0][][] */ 89,-127,9,-5,-36,1,-90,61, 
  /* [10][0][][] */ -127,-68,-102,-17,16,72,-53,41, 
  /* [11][0][][] */ -19,-42,-6,-103,-127,-71,47,-18, 
  /* [12][0][][] */ 46,8,-63,99,-115,16,100,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -8,-44,6,21,57,127,43,37, 
  /* [15][0][][] */ 19,10,-1,-127,65,43,-34,57, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 6,39,127,19,-30,-18,33,46, 
  /* [18][0][][] */ 105,-127,21,34,-23,-1,-88,21, 
  /* [19][0][][] */ -102,6,81,127,-82,-52,-81,82, 
  /* [20][0][][] */ 5,14,-36,102,-7,-127,-24,45, 
  /* [21][0][][] */ 62,6,127,38,-7,41,66,8, 
  /* [22][0][][] */ -51,-8,-127,3,38,9,-66,7, 
  /* [23][0][][] */ -65,60,-81,-68,-26,-13,127,-74, 
  /* [24][0][][] */ 5,-45,-47,108,-9,-65,95,127, 
  /* [25][0][][] */ 1,40,39,12,127,87,-56,-45, 
  /* [26][0][][] */ -43,-48,-127,-25,22,30,-67,-11, 
  /* [27][0][][] */ 19,-38,-57,-8,-4,107,127,50, 
  /* [28][0][][] */ 17,17,-24,1,-23,127,41,45, 
  /* [29][0][][] */ 75,-16,127,-52,-37,25,108,-51, 
  /* [30][0][][] */ -79,127,-10,-31,31,12,36,-53, 
  /* [31][0][][] */ -22,-107,-44,-6,42,-61,127,110, 
  /* [32][0][][] */ -2,-13,-73,111,16,99,75,127, 
  /* [33][0][][] */ -29,72,-4,-96,11,6,-9,127, 
  /* [34][0][][] */ 6,53,-29,-103,12,-13,-12,127, 
  /* [35][0][][] */ 127,-34,-61,-29,-7,45,101,-28, 
  /* [36][0][][] */ -125,50,24,71,-34,-27,-127,102, 
  /* [37][0][][] */ 12,-29,-24,14,24,127,57,41, 
  /* [38][0][][] */ 9,19,14,60,127,-32,-25,14, 
  /* [39][0][][] */ 1,53,32,-107,12,10,-42,127, 
  /* [40][0][][] */ 73,-19,127,-9,-17,17,81,-4, 
  /* [41][0][][] */ 6,-24,-8,64,38,127,41,80, 
  /* [42][0][][] */ -69,1,127,2,-61,4,-4,72, 
  /* [43][0][][] */ -10,-80,-5,124,-12,8,23,-127, 
  /* [44][0][][] */ 25,5,-105,-127,61,-18,1,-78, 
  /* [45][0][][] */ -90,127,15,-40,25,-11,48,-45, 
  /* [46][0][][] */ -127,-43,48,23,-47,83,-89,42, 
  /* [47][0][][] */ 84,59,127,63,-2,-48,87,-19, 
};
const TfArray<48, float> quant37_scale = { 48, { 0.0010664956644177437, 0.00086968642426654696, 0.00068011524854227901, 0.00051943532889708877, 0.00059908407274633646, 0.00050404801731929183, 0.00075638445559889078, 0.0022571852896362543, 0.00093667529290542006, 0.0071725794114172459, 0.0012079095467925072, 0.0036507563199847937, 0.00027349739684723318, 3.937008052901092e-09, 0.0015879130223765969, 0.00043050965177826583, 3.937008052901092e-09, 0.010858605615794659, 0.0010949590941891074, 0.0003740263928193599, 0.00082428439054638147, 0.0085085267201066017, 0.00078924820991232991, 0.0034309870097786188, 0.0025056605227291584, 0.0017362646758556366, 0.0045966641046106815, 0.0025614856276661158, 0.00056042888900265098, 0.0033312547020614147, 0.003006121376529336, 0.00034772232174873352, 0.00040910585084930062, 0.018660778179764748, 0.0010723505401983857, 0.00095454446272924542, 0.0055993711575865746, 0.00053599837701767683, 0.0060447980649769306, 0.00047825690126046538, 0.0028558322228491306, 0.00035259232390671968, 0.00055781262926757336, 0.014860454015433788, 0.00064744293922558427, 0.0013027907116338611, 0.00028073997236788273, 0.00036545703187584877, } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -4545, -45093, -3132, -6814, -17553, -139, -22224, -32860, };
const TfArray<8, float> quant38_scale = { 8, { 0.0018733757315203547, 0.0015380100812762976, 0.002760142320767045, 0.001088729128241539, 0.0012749340385198593, 0.0020089931786060333, 0.0011703710770234466, 0.00099845905788242817, } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-34,-4,-4,127,5,1,14,-4,-100,-76,-3,0,105,-3,0, 
  /* [1][0][][] */ 0,-20,-11,89,78,9,31,15,-3,4,127,-56,0,27,-16,0, 
  /* [2][0][][] */ 0,-16,-13,-11,-50,-4,8,-4,3,21,-8,11,0,127,-15,0, 
  /* [3][0][][] */ 0,-6,-27,-127,74,4,70,7,-4,58,-5,26,0,9,23,0, 
  /* [4][0][][] */ 0,11,-3,34,-87,6,127,-14,4,-73,20,-13,0,-9,3,0, 
  /* [5][0][][] */ 0,-16,-16,0,-22,-29,-16,17,2,6,-2,-36,0,-2,127,0, 
  /* [6][0][][] */ 0,33,-16,-9,60,-13,-45,0,5,-121,127,69,0,124,73,0, 
  /* [7][0][][] */ 0,9,-21,127,16,11,8,24,4,85,-60,64,0,11,66,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.079618468880653381, 0.065365426242351532, 0.11730604618787766, 0.046270988881587982, 0.054184693843126297, 0.085382208228111267, 0.04974076896905899, 0.042434509843587875, } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { -161, 38987, 67944, 11306, 10571, 54681, 12029, 49361, -10647, 6439, 31350, 14885, -445, 32554, 7803, -107, };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 6.8116285547148436e-05, 5.9666188462870196e-05, 0.00031187658896669745, 0.00015915135736577213, 6.0556831158464774e-05, 0.00033209487446583807, 7.8555829531978816e-05, 1.8242790247313678e-05, 0.00028052402194589376, 0.00017450022278353572, 0.0007375137647613883, 0.00072724185883998871, 0.00014649005606770515, 0.00022023481142241508, 0.003907486330717802, } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-83,-127,40,-66,81,-76,-90,-3,-7,28,-127,6,55,-73, 51,24,-127,127,127,-127,127,-127,-85,127,-127,51,-105,7,127,-25, 24,-24,81,-2,-71,67,-91,76,-95,-27,4,-17,61,1,-100,-29, 
  /* [0][1][][] */ -127,127,-24,13,-42,17,-26,13,-28,0,4,-110,-49,9,-28,-14, -78,-42,-58,-15,-6,-25,10,-28,-108,-89,22,-11,-104,-127,2,23, 14,1,57,2,4,34,-23,32,-127,6,-2,0,-21,11,-3,43, 
  /* [0][2][][] */ -115,-74,64,2,-5,40,-35,52,-76,0,0,5,40,3,-25,23, 23,-5,28,-2,-26,41,-30,21,-125,-13,1,85,-58,1,-27,-111, 21,-7,16,0,5,15,11,22,-115,4,-1,-127,107,3,18,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0028949419502168894, 0.0025358130224049091, 0.013254755176603794, 0.0067639327608048916, 0.0025736652314662933, 0.014114032499492168, 0.0033386226277798414, 0.00077531853457912803, 0.011922270990908146, 0.0074162594974040985, 0.031344335526227951, 0.030907778069376945, 0.0062258271500468254, 0.0093599790707230568, 0.16606816649436951, } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&g0::quant8_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 14430, -67261, 20984, 205324, 27824, 71870, 18442, 561464, 31353, 63445, 1906777, -1073741824, 44988, 95113, -1073741824, };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00021334819030016661, 0.00026646285550668836, 2.103661245200783e-05, 1.3274978300614748e-05, 0.0001207298701046966, 4.1382831113878638e-05, 0.00019797291315626353, 4.2163069338130299e-06, 4.9163871153723449e-05, 5.9047401009593159e-05, 3.0154076284816256e-06, 1.1533876076441629e-09, 9.1337031335569918e-05, 2.8154809115221724e-05, 1.243374708748135e-10, } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 23,-1,28, -26,-19,14, -127,-97,-44, 
  /* [1][1][][] */ -7,-8,-1, -25,-5,-5, 8,-33,9, 
  /* [1][2][][] */ 5,19,8, 14,11,11, 59,-18,20, 
  /* [2][0][][] */ 7,22,-20, 51,126,-20, 18,-8,-20, 
  /* [2][1][][] */ -7,30,-17, 39,127,-47, -6,11,-33, 
  /* [2][2][][] */ 45,-43,0, 69,-24,-38, 13,-33,-13, 
  /* [3][0][][] */ 8,49,2, 34,99,0, 17,15,14, 
  /* [3][1][][] */ 52,88,28, 89,127,8, -1,-21,19, 
  /* [3][2][][] */ 49,54,31, 72,55,28, 9,1,22, 
  /* [4][0][][] */ 46,29,-49, 28,51,-44, 20,-6,-20, 
  /* [4][1][][] */ 55,52,10, 51,86,1, 63,25,-34, 
  /* [4][2][][] */ 73,98,19, 84,127,3, 51,53,15, 
  /* [5][0][][] */ 6,7,-105, -11,1,-94, -15,22,-20, 
  /* [5][1][][] */ 4,-44,-118, -10,-54,-127, -19,-20,-57, 
  /* [5][2][][] */ -11,-10,-14, -9,-14,-15, -14,-7,-35, 
  /* [6][0][][] */ 36,-66,32, 56,-87,36, 6,-14,8, 
  /* [6][1][][] */ 45,-97,71, 71,-127,77, 7,-22,28, 
  /* [6][2][][] */ 15,-36,23, 9,-44,35, -28,14,14, 
  /* [7][0][][] */ -57,-7,-2, -116,-28,24, -24,22,19, 
  /* [7][1][][] */ -52,-31,-4, -127,-69,17, -15,-4,28, 
  /* [7][2][][] */ -40,9,-14, -30,4,14, -31,18,11, 
  /* [8][0][][] */ -124,-123,-126, -124,-124,-126, -123,-123,-124, 
  /* [8][1][][] */ -125,-124,-127, -125,-124,-127, -124,-123,-122, 
  /* [8][2][][] */ -125,-124,-127, -125,-124,-126, -124,-122,-85, 
  /* [9][0][][] */ -23,27,18, -23,19,5, 1,37,-5, 
  /* [9][1][][] */ 78,107,-26, 62,127,11, 6,32,26, 
  /* [9][2][][] */ -16,-61,-9, 10,-52,-15, 19,-31,-42, 
  /* [10][0][][] */ -32,-85,-22, 28,93,16, -13,-13,-6, 
  /* [10][1][][] */ -65,-103,-16, 74,127,12, -20,-24,-2, 
  /* [10][2][][] */ -37,-19,-1, 31,24,-14, -13,1,4, 
  /* [11][0][][] */ -31,-49,-19, 6,-57,-2, 0,-127,-72, 
  /* [11][1][][] */ -72,-73,-41, -48,-85,-51, -33,-84,-74, 
  /* [11][2][][] */ -17,-59,-103, 123,127,56, -53,0,-68, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -53,-97,-19, -63,-110,-27, -10,-16,-6, 
  /* [13][1][][] */ 59,114,14, 55,127,23, 6,18,10, 
  /* [13][2][][] */ -9,-15,3, 0,-15,-2, 0,9,-3, 
  /* [14][0][][] */ 50,-6,-55, 80,-29,-56, 24,-16,-19, 
  /* [14][1][][] */ 94,-10,-97, 127,-38,-103, 49,-24,-45, 
  /* [14][2][][] */ 61,6,-62, 72,-14,-69, 14,-4,-28, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.054403785616159439, 0.067948020994663239, 0.0053643360733985901, 0.0033851193729788065, 0.030786115676164627, 0.010552621446549892, 0.050483088940382004, 0.0010751582449302077, 0.012536786496639252, 0.015057086013257504, 0.00076892890501767397, 2.9411381774480105e-07, 0.023290941491723061, 0.0071794758550822735, 3.1706054670621597e-08, } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.45750319957733154, } };
const TfArray<1, int> quant46_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.40661865472793579, } };
const TfArray<1, int> quant50_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<1, float> quant53_scale = { 1, { 0.47369065880775452, } };
const TfArray<1, int> quant53_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<1, float> quant54_scale = { 1, { 0.55961453914642334, } };
const TfArray<1, int> quant54_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.2879730761051178, } };
const TfArray<1, int> quant58_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant61_scale = { 1, { 0.22700423002243042, } };
const TfArray<1, int> quant61_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<1, float> quant62_scale = { 1, { 0.29984146356582642, } };
const TfArray<1, int> quant62_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<1, float> quant65_scale = { 1, { 0.25294375419616699, } };
const TfArray<1, int> quant65_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<1, float> quant66_scale = { 1, { 0.40836498141288757, } };
const TfArray<1, int> quant66_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.060084007680416107, } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,5 } };
const TfArray<1, float> quant69_scale = { 1, { 0.10655658692121506, } };
const TfArray<1, int> quant69_zero = { 1, { 20 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 720), (TfLiteIntArray*)&g0::tensor_dimension69, 720, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension69, 720, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_13_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_13_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_13_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_13_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_13_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
